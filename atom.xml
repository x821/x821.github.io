<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XuMengru</title>
  
  
  <link href="http://x821.github.io/atom.xml" rel="self"/>
  
  <link href="http://x821.github.io/"/>
  <updated>2021-03-25T01:02:45.795Z</updated>
  <id>http://x821.github.io/</id>
  
  <author>
    <name>Xu Meng Ru</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ES6语法</title>
    <link href="http://x821.github.io/2021/01/11/ES6%E8%AF%AD%E6%B3%95/"/>
    <id>http://x821.github.io/2021/01/11/ES6%E8%AF%AD%E6%B3%95/</id>
    <published>2021-01-11T12:37:42.000Z</published>
    <updated>2021-03-25T01:02:45.795Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ES6新特性"><a href="#ES6新特性" class="headerlink" title="ES6新特性"></a>ES6新特性</h1><p>ES6 = ECMAScript 6</p><h2 id="申明变量let和const"><a href="#申明变量let和const" class="headerlink" title="申明变量let和const"></a>申明变量let和const</h2><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><h4 id="1、let申明变量不存在预解析；"><a href="#1、let申明变量不存在预解析；" class="headerlink" title="1、let申明变量不存在预解析；"></a>1、let申明变量不存在预解析；</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.log(flag);</span><br><span class="line">let flag &#x3D; 123;</span><br><span class="line">&#x2F;&#x2F;结果：报错</span><br></pre></td></tr></table></figure><h4 id="2、let声明的变量不允许重复"><a href="#2、let声明的变量不允许重复" class="headerlink" title="2、let声明的变量不允许重复"></a>2、let声明的变量不允许重复</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let flag &#x3D; 123;</span><br><span class="line">let flag &#x3D; 456;</span><br><span class="line">console.log(flag);</span><br></pre></td></tr></table></figure><h4 id="3、ES6引入了块级作用域"><a href="#3、ES6引入了块级作用域" class="headerlink" title="3、ES6引入了块级作用域"></a>3、ES6引入了块级作用域</h4><p>块内部定义的变量，在外部无法访问(PS: 只要被 { } 包裹起来，就形成块级作用域)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (true)&#123;</span><br><span class="line">let flag &#x3D; 123;</span><br><span class="line">&#125;</span><br><span class="line">console.log(flag);</span><br></pre></td></tr></table></figure><h4 id="4、let必须先声明在使用"><a href="#4、let必须先声明在使用" class="headerlink" title="4、let必须先声明在使用"></a>4、let必须先声明在使用</h4><p>因为用let申明的变量没有预解析</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tem &#x3D; 123;</span><br><span class="line">let tem;  &#x2F;&#x2F;报错</span><br></pre></td></tr></table></figure><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><p>const声明的常量不能被重新赋值，且在申明的同时就要被初始化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const n &#x3D; 1;&#x2F;&#x2F;申明的同时就要初始化</span><br><span class="line">n &#x3D; 2;&#x2F;&#x2F;此处报错</span><br></pre></td></tr></table></figure><h2 id="变量的结构赋值"><a href="#变量的结构赋值" class="headerlink" title="变量的结构赋值"></a>变量的结构赋值</h2><h4 id="数组的解构赋值"><a href="#数组的解构赋值" class="headerlink" title="数组的解构赋值"></a>数组的解构赋值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; var a &#x3D;1,b&#x3D;2,c&#x3D;3;&#x2F;&#x2F;js中的写法</span><br><span class="line">let [a,b,c] &#x3D; [1,2,3];&#x2F;&#x2F;node中 数组的解构赋值</span><br><span class="line">console.log(a,b,c);&#x2F;&#x2F; 1 2 3</span><br><span class="line">&#x2F;&#x2F;声明时赋初值</span><br><span class="line">let [a&#x3D;123,b,c] &#x3D; [,456,];</span><br><span class="line">console.log(a,b,c);&#x2F;&#x2F; 123 456 undefined</span><br></pre></td></tr></table></figure><p>利用解构赋值交换两个变量的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let a &#x3D; 1;</span><br><span class="line">let b &#x3D; 2;</span><br><span class="line">[a, b] &#x3D; [b, a];</span><br><span class="line">console.log(a,b);&#x2F;&#x2F; 2 1</span><br></pre></td></tr></table></figure><p>对象的解构赋值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let &#123;foo,bar&#125; &#x3D; &#123;foo : &#39;hello&#39;,bar : &#39;hi&#39;&#125;;</span><br><span class="line">console.log(foo,bar);</span><br></pre></td></tr></table></figure><p>字符串的解构赋值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let [a,b,c,d,e] &#x3D; &quot;hello&quot;;</span><br><span class="line">console.log(a,b,c,d,e);&#x2F;&#x2F;h e l l o</span><br></pre></td></tr></table></figure><h2 id="字符串相关扩展"><a href="#字符串相关扩展" class="headerlink" title="字符串相关扩展"></a>字符串相关扩展</h2><h3 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h3><p>include(str [,index]) str 所要匹配的字符串 ； index 从什么位置开始匹配</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(&#39;hello world&#39;.includes(&#39;world&#39;);&#x2F;&#x2F;true</span><br><span class="line">console.log(&#39;hello world&#39;.includes(&#39;world&#39;,7);&#x2F;&#x2F;false</span><br></pre></td></tr></table></figure><h3 id="startsWith"><a href="#startsWith" class="headerlink" title="startsWith()"></a>startsWith()</h3><p>判断字符串是否特定字符串开始</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(&#39;admin&#x2F;index.php&#39;.startsWith(&#39;admin&#39;));&#x2F;&#x2F; true</span><br></pre></td></tr></table></figure><h3 id="endsWith"><a href="#endsWith" class="headerlink" title="endsWith()"></a>endsWith()</h3><p>判断字符串是否特定字符串结束</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(&#39;admin&#x2F;index.php&#39;.startsWith(&#39;php&#39;));&#x2F;&#x2F; true</span><br></pre></td></tr></table></figure><h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><p>在js中若要拼接字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var obj &#x3D; &#123;</span><br><span class="line">name:&#39;张三&#39;,</span><br><span class="line">age:13,</span><br><span class="line">gender:&#39;男&#39;</span><br><span class="line">&#125;</span><br><span class="line">var str &#x3D; &#39;&lt;div&gt;&lt;span&gt;&#39;+obj.name+&#39;&lt;&#x2F;span&gt;&lt;span&gt;&#39;+obj.age+&#39;&lt;&#x2F;span&gt;&lt;span&gt;&#39;+obj.gender+&#39;&lt;&#x2F;span&gt;&lt;&#x2F;div&gt;&#39;;</span><br><span class="line">console.log(str);&#x2F;&#x2F;&lt;div&gt;&lt;span&gt;张三&lt;&#x2F;span&gt;&lt;span&gt;13&lt;&#x2F;span&gt;&lt;span&gt;男&lt;&#x2F;span&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>利用模板字符串进行拼接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">let obj &#x3D; &#123;</span><br><span class="line">name:&#39;张三&#39;,</span><br><span class="line">age:13,</span><br><span class="line">gender:&#39;男&#39;</span><br><span class="line">&#125;</span><br><span class="line">let str &#x3D; &#39;&lt;div&gt;</span><br><span class="line">                &lt;span&gt;$&#123;obj.name&#125;&lt;&#x2F;span&gt;</span><br><span class="line">                &lt;span&gt;$&#123;obj.age&#125;&lt;&#x2F;span&gt;</span><br><span class="line">                &lt;span&gt;$&#123;obj.gender&#125;&lt;&#x2F;span&gt;</span><br><span class="line">   &lt;span&gt;$&#123;1+1&#125;&lt;&#x2F;span&gt;</span><br><span class="line">   &lt;span&gt;$&#123;fn(&#39;你好&#39;)&#125;&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;&#39;;</span><br><span class="line">console.log(str);</span><br><span class="line">&#x2F;&#x2F;&lt;div&gt;</span><br><span class="line">&#x2F;&#x2F;    &lt;span&gt;张三&lt;&#x2F;span&gt;</span><br><span class="line">&#x2F;&#x2F;    &lt;span&gt;13&lt;&#x2F;span&gt;</span><br><span class="line">&#x2F;&#x2F;    &lt;span&gt;男&lt;&#x2F;span&gt;</span><br><span class="line">&#x2F;&#x2F;  &lt;span&gt;2&lt;&#x2F;span&gt;</span><br><span class="line">&#x2F;&#x2F;  &lt;span&gt;你好&lt;&#x2F;span&gt;</span><br><span class="line">&#x2F;&#x2F;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h2 id="函数的相关扩展"><a href="#函数的相关扩展" class="headerlink" title="函数的相关扩展"></a>函数的相关扩展</h2><p>1、参数的默认值</p><p>2、参数的解构赋值</p><p>3、rest参数</p><p>4、…扩展运算符</p><p>5、箭头函数</p><h3 id="参数的默认值"><a href="#参数的默认值" class="headerlink" title="参数的默认值"></a>参数的默认值</h3><p>在js中的若要给函数参数指定默认值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function foo(param)&#123;</span><br><span class="line">let p &#x3D; param || &#39;hello&#39;;</span><br><span class="line">console.log(p);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;foo();</span><br><span class="line">&#x2F;&#x2F;foo(&#39;nihao&#39;);</span><br></pre></td></tr></table></figure><p>在ES6中给函数参数指定默认值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function foo(param &#x3D; &#39;hello&#39;)&#123;</span><br><span class="line">console.log(p);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;foo();</span><br><span class="line">&#x2F;&#x2F;foo(&#39;nihao&#39;);</span><br></pre></td></tr></table></figure><h3 id="参数的解构赋值"><a href="#参数的解构赋值" class="headerlink" title="参数的解构赋值"></a>参数的解构赋值</h3><p>默认参数的做法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function foo(param &#x3D; &#39;hello&#39; , age &#x3D; 12)&#123;</span><br><span class="line">console.log(param,age);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;foo();</span><br><span class="line">&#x2F;&#x2F;foo(&#39;nihao&#39;,18);</span><br></pre></td></tr></table></figure><p>参数的解构赋值的做法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function foo(&#123;param,age&#125;&#125;)&#123;</span><br><span class="line">console.log(param,age);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;foo(&#123;&#125;);  &#x2F;&#x2F;注意 此时一定要传入一个对象</span><br><span class="line">&#x2F;&#x2F;添加默认参数</span><br><span class="line">function foo(&#123;param &#x3D; &#39;hello&#39;,age &#x3D; 12&#125;&#125;)&#123;</span><br><span class="line">console.log(param,age);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;foo(&#123;&#125;);  &#x2F;&#x2F;注意 此时一定要传入一个对象</span><br><span class="line">&#x2F;&#x2F;foo(&#123;param &#x3D; &#39;nihao&#39;,age &#x3D; 18&#125;)</span><br></pre></td></tr></table></figure><h3 id="rest参数（剩余参数）"><a href="#rest参数（剩余参数）" class="headerlink" title="rest参数（剩余参数）"></a>rest参数（剩余参数）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function foo(a,b,...param)&#123; &#x2F;&#x2F;...param会以数组的形式存储剩余的参数</span><br><span class="line">console.log(param);</span><br><span class="line">&#125;</span><br><span class="line">foo(1,2,3,4,5,6,7);&#x2F;&#x2F;[3,4,5,6,7]</span><br></pre></td></tr></table></figure><h3 id="扩展运算符-…"><a href="#扩展运算符-…" class="headerlink" title="扩展运算符 …"></a>扩展运算符 …</h3><p>使用 … 将数组拆撒后入参</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function foo(a,b,c,d)&#123;</span><br><span class="line">console.log(a + b + c + d);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;foo(1,2,3,4);&#x2F;&#x2F;传统调用方式</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;当要传入一个数组时 arr &#x3D; [1,2,3,4]</span><br><span class="line">&#x2F;&#x2F;方法一 使用foo.apply(null,arr);</span><br><span class="line">&#x2F;&#x2F;方法二 使用 ...   将数组拆散</span><br><span class="line">foo(...arr); &#x2F;&#x2F;10</span><br></pre></td></tr></table></figure><p>使用 … 合并数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let arr1 &#x3D; [1,2,3];</span><br><span class="line">let arr2 &#x3D; [4,5,6];</span><br><span class="line">let arr3 &#x3D; [...arr1,...arr2];</span><br><span class="line">console.log(arr3);&#x2F;&#x2F;[1,2,3,4,5,6]</span><br></pre></td></tr></table></figure><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;传统函数声明以及调用</span><br><span class="line">function foo(参数列表)&#123;</span><br><span class="line">函数体</span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br><span class="line">&#x2F;&#x2F;ES6 中新增的函数申明以及调用  &#x3D;&gt;</span><br><span class="line">let foo &#x3D; (形参参数列表) &#x3D;&gt; &#123;函数体&#125;;</span><br><span class="line">foo(实参列表);</span><br><span class="line">&#x2F;&#x2F;用处 例子</span><br><span class="line">var arr &#x3D; [1,2,3,4];</span><br><span class="line">&#x2F;&#x2F;arr.forEach(function(e,index)&#123;</span><br><span class="line">&#x2F;&#x2F;    console.log(e);</span><br><span class="line">&#x2F;&#x2F;  console.log(index);</span><br><span class="line">&#x2F;&#x2F;&#125;);</span><br><span class="line">arr.forEach((e,index) &#x3D;&gt; &#123;console.log(e);console.log(index)&#125;);</span><br></pre></td></tr></table></figure><p>箭头函数的注意事项</p><p>1、箭头函数中this取决于函数的定义，而不是函数的调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;不使用箭头函数时 this取决于调用者  此时是window</span><br><span class="line">var obj &#x3D; &#123;</span><br><span class="line">name:&quot;张三&quot;,</span><br><span class="line">doSomething: function()&#123;</span><br><span class="line">setTimeout(function()&#123;</span><br><span class="line">console.log(this);</span><br><span class="line">&#125;,1000);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.doSomething();&#x2F;&#x2F;window</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;使用箭头函数中的this 取决函数声明的环境 此时是在obj中声明的  则this指向obj</span><br><span class="line">var obj &#x3D; &#123;</span><br><span class="line">name:&quot;张三&quot;,</span><br><span class="line">doSomething: function()&#123;</span><br><span class="line">setTimeout(()&#x3D;&gt;&#123;</span><br><span class="line">console.log(this);</span><br><span class="line">&#125;,1000);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.doSomething();&#x2F;&#x2F;obj&#123;name:&quot;张三&quot;&#125;</span><br></pre></td></tr></table></figure><p>2、箭头参数不可以new</p><p>3、箭头函数不可以使用arguments获取参数列表，可以使用rest代替</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let foo &#x3D; (...param) &#x3D;&gt; console.log(param);</span><br><span class="line">foo(1,2,3,4);</span><br></pre></td></tr></table></figure><h2 id="数组的扩展"><a href="#数组的扩展" class="headerlink" title="数组的扩展"></a>数组的扩展</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">let a &#x3D; [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;].keys(); &#x2F;&#x2F;Array.keys()  返回数组的所有下标[0,1,2]</span><br><span class="line">console.log(a.next());  &#x2F;&#x2F;迭代返回当前位置的下标 0</span><br><span class="line">console.log(a.next());  &#x2F;&#x2F;1</span><br><span class="line">console.log(a.next());  &#x2F;&#x2F;2</span><br><span class="line"></span><br><span class="line">let b &#x3D; [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;].values(); &#x2F;&#x2F;Array.values()  返回数组的所有值</span><br><span class="line">console.log(b.next());  &#x2F;&#x2F;迭代返回当前位置的值  a</span><br><span class="line">console.log(b.next());  &#x2F;&#x2F;b</span><br><span class="line">console.log(b.next());  &#x2F;&#x2F;c</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;数组查找</span><br><span class="line">&#123;</span><br><span class="line">    console.log([1,2,3,4,5,6].find((item)&#x3D;&gt;&#123;  &#x2F;&#x2F;find 返回满足条件的第一个元素值</span><br><span class="line">        return item&gt;3;</span><br><span class="line">    &#125;));</span><br><span class="line">    </span><br><span class="line">    console.log([1,2,3,4,5,6].filter((item)&#x3D;&gt;&#123;  &#x2F;&#x2F;filter 返回满足条件的所有元素值</span><br><span class="line">        return item&gt;3;</span><br><span class="line">    &#125;));</span><br><span class="line">    </span><br><span class="line">    console.log([1,2,3,4,5,6].findIndex((item)&#x3D;&gt;&#123; &#x2F;&#x2F;findIndex 返回满条件的第一个元素下标</span><br><span class="line">        return item&gt;3;</span><br><span class="line">    &#125;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;数组包含</span><br><span class="line">&#123;</span><br><span class="line">    let arr &#x3D; [123,456,7,8,9,NaN];</span><br><span class="line">    console.log(arr.includes(456));&#x2F;&#x2F;Array.includes(item);在数组中查询有无item元素 返回boolean</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;也可以查询有无非数字</span><br><span class="line">    console.log([1,2,NaN].includes(1));</span><br><span class="line">    console.log([1,2,NaN].includes(NaN));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h2><p>ES6新增数据类型 属于基本数据类型，Symbol不可以new</p><p>Symbol声明的变量是唯一的，意义在于减少命名冲突；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;Symbol的变量是唯一的，所以a1和a2永远不相等</span><br><span class="line">    let a1 &#x3D; Symbol();</span><br><span class="line">    let a2 &#x3D; Symbol();</span><br><span class="line">    console.log(a1 &#x3D;&#x3D;&#x3D; a2);</span><br><span class="line">    </span><br><span class="line">   &#x2F;&#x2F;Symbol.for(key)</span><br><span class="line">   &#x2F;&#x2F;在使用Symbol时  会生成一个全局注册表，其中的数据以键值对的形式存在；能根据key来拿到对应的value</span><br><span class="line">   &#x2F;&#x2F;若  a3  a4的key是相同的  那么a3 a4是相同的</span><br><span class="line">    let a3 &#x3D; Symbol.for(&quot;a3&quot;);</span><br><span class="line">    let a4 &#x3D; Symbol.for(&quot;a3&quot;);</span><br><span class="line">    console.log(a3 &#x3D;&#x3D;&#x3D; a4);  &#x2F;&#x2F;true</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;问题  若改变a3的值  a4的值会改变吗？</span><br><span class="line">    &#x2F;&#x2F;是值复制   还是指针</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ES6中涉及到的数据结构"><a href="#ES6中涉及到的数据结构" class="headerlink" title="ES6中涉及到的数据结构"></a>ES6中涉及到的数据结构</h2><h3 id="数组Array"><a href="#数组Array" class="headerlink" title="数组Array"></a>数组Array</h3><p>数组中的元素可以重复，且数组中元素的排列是有序的（因此可以通过下标访问）</p><h3 id="集合Set"><a href="#集合Set" class="headerlink" title="集合Set"></a>集合Set</h3><p>集合的元素是唯一的，不可以重复出现，且集合中的元素是无序的（因此无法通过下标访问集合中的元素）</p><h4 id="Set中的方法"><a href="#Set中的方法" class="headerlink" title="Set中的方法"></a>Set中的方法</h4><table><thead><tr><th align="center"><strong>set.add(ele)</strong></th><th align="center"><strong>向set集合中追加ele元素</strong></th></tr></thead><tbody><tr><td align="center"><strong>set.has(ele)</strong></td><td align="center"><strong>判断set集合中是否存在ele元素</strong></td></tr><tr><td align="center"><strong>set.delete(ele)</strong></td><td align="center"><strong>从集合中删除ele元素</strong></td></tr><tr><td align="center"><strong>set.clear()</strong></td><td align="center"><strong>清空set集合</strong></td></tr><tr><td align="center"><strong>set.forEach( (ele) =&gt;{} )</strong></td><td align="center"><strong>遍历集和</strong></td></tr></tbody></table><p>set对象的创建：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let set &#x3D; new set();</span><br></pre></td></tr></table></figure><h3 id="数组与集合的互相转换"><a href="#数组与集合的互相转换" class="headerlink" title="数组与集合的互相转换"></a>数组与集合的互相转换</h3><h4 id="数组-gt-集合"><a href="#数组-gt-集合" class="headerlink" title="数组==&gt;集合"></a>数组==&gt;集合</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let arr &#x3D; [1,2,3];</span><br><span class="line">let set &#x3D; new set(arr);</span><br></pre></td></tr></table></figure><h4 id="集合-gt-数组"><a href="#集合-gt-数组" class="headerlink" title="集合==&gt;数组"></a>集合==&gt;数组</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let set &#x3D; new set();</span><br><span class="line">let arr &#x3D; [...set];</span><br></pre></td></tr></table></figure><h3 id="weakSet"><a href="#weakSet" class="headerlink" title="weakSet"></a>weakSet</h3><p><strong>WeakSet 结构与 Set 类似，也是不重复的值的集合。但是，它与 Set 有下面区别。</strong></p><p> 1.WeakSet 的成员只能是对象，而不能是其他类型的值。</p><p> 2.WeakSet 中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用，也就是说，如果其他对象都不 再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在于 WeakSet 之中。</p><p> 3.WeakSet 只有add/delete/clear/has三个方法，不能遍历，没有size属性等</p><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>Map也是由键值对构成的，和对象的区别在于Map的key也可以是一个对象，Object只可以是字符串</p><h2 id="代理和反射"><a href="#代理和反射" class="headerlink" title="代理和反射"></a>代理和反射</h2><h3 id="代理Proxy"><a href="#代理Proxy" class="headerlink" title="代理Proxy"></a>代理Proxy</h3><p>代理：通过代理对象访问目标对象</p><p>作用：</p><p> 1、控制目标对象的访问权限</p><p> 2、扩展目标对象方法</p><p>创建目标对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let targetObject &#x3D; &#123;</span><br><span class="line">name:&quot;target&quot;,</span><br><span class="line">    type:&quot;object&quot;,</span><br><span class="line">fun:function()&#123;</span><br><span class="line">console.log(&#39;目标对象的fun&#39;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建代理对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">var p &#x3D; new Proxy(targetObject,&#123;</span><br><span class="line">    &#x2F;&#x2F;target 就是目标的对象</span><br><span class="line">    &#x2F;&#x2F;key 就是目标对象中的每一个属性和方法</span><br><span class="line">    &#x2F;&#x2F;当代理对象直接获取属性和方法的等信息的时候都会来调用get方法</span><br><span class="line">get(target,key)&#123;</span><br><span class="line">if(key &#x3D;&#x3D;&#x3D; &#39;fun&#39;)&#123;</span><br><span class="line">console.log(&quot;代理对象调用目标对象的fun&quot;);</span><br><span class="line">&#125;</span><br><span class="line">return target[key];</span><br><span class="line">&#125;,</span><br><span class="line">    &#x2F;&#x2F;当给对象的属性和方法赋值的时候调用set方法</span><br><span class="line">    &#x2F;&#x2F;target 就是目标的对象</span><br><span class="line">    &#x2F;&#x2F;key 就是目标对象中的每一个属性和方法</span><br><span class="line">    &#x2F;&#x2F;value 属性值</span><br><span class="line">    set(target,key,value)&#123;</span><br><span class="line">    &#x2F;&#x2F;如果key为type的时候就不给目标对象赋值</span><br><span class="line">    if(key &#x3D;&#x3D;&#x3D; &#39;type&#39;)&#123;</span><br><span class="line">        return target[type];</span><br><span class="line">        &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">            target[key] &#x3D; value;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;,</span><br><span class="line">    &#x2F;&#x2F;当通过 xx in obj 的时候调用has方法</span><br><span class="line">    has(target,key)&#123;</span><br><span class="line">        if(key &#x3D;&#x3D;&#x3D; &#39;type&#39;)&#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F;当删除对象的属性时 调用此方法</span><br><span class="line">    deleteProperty(target,key)&#123;</span><br><span class="line">        if(key &#x3D;&#x3D;&#x3D; &#39;age&#39;)&#123;</span><br><span class="line">            delete target[key];</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">p.fun(); &#x2F;&#x2F;代理对象调用目标对象的fun     目标对象的fun</span><br><span class="line">p.name &#x3D; &#39;temp&#39;; &#x2F;&#x2F;修改无效  当使用点的方式来访问属性时 会调用set函数  而set函数中设置了对name的修改权限</span><br><span class="line">console.log(p);  &#x2F;&#x2F;&#123; name: &#39;target&#39;, type: &#39;object&#39;, fun: [Function: fun] &#125;</span><br><span class="line">p.type &#x3D; &#39;temp&#39;; &#x2F;&#x2F;修改成功  set中没有对type的权限要求</span><br><span class="line">console.log(p); &#x2F;&#x2F;&#123; name: &#39;target&#39;, type: &#39;temp&#39;, fun: [Function: fun] &#125;</span><br><span class="line"></span><br><span class="line">console.log(&#39;type&#39; in p); &#x2F;&#x2F;true  当使用in判断对象中是否有某属性时 会调用has函数 而我们在has中对type设置了权限 则无法访问</span><br><span class="line">console.log(&#39;name&#39; in p); &#x2F;&#x2F;true  未对name设置  则访问成功</span><br><span class="line"></span><br><span class="line">delete p.name;  &#x2F;&#x2F;删除失败   当使用点的方式来删除某属性时会默认调用deleteProperty方法 而我们在deleteProperty中限制了对name的删除权限 则删除失败</span><br><span class="line">delete p.type;  &#x2F;&#x2F;删除成功   </span><br><span class="line">console.log(p); &#x2F;&#x2F;&#123; name: &#39;target&#39;, fun: [Function: fun] &#125;</span><br></pre></td></tr></table></figure><h3 id="反射Reflect"><a href="#反射Reflect" class="headerlink" title="反射Reflect"></a>反射Reflect</h3><p> 反射机制是指程序在运行的时候访问、检测和修改它本身状态或行为的一种能力，例如一个对象能够在运行时知道自己有哪些方法和属性。</p><p> 反射的概念在编译型的编程语言中比较明显，比如java、C#、Object-c等。对于 <code>JavaScript</code>来说，反射就是获取对象的内部结构的信息，所以JS中的反射随处可见，比如for…in方式遍历对象。</p><p> 从ECMAScript6开始，JS引入Reflect这个API专门用于操作反射。</p><p> ES6中的反射，将抛出异常，异常捕获简化为返回一个boolean值来表示其是否正常运行</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ES6新特性&quot;&gt;&lt;a href=&quot;#ES6新特性&quot; class=&quot;headerlink&quot; title=&quot;ES6新特性&quot;&gt;&lt;/a&gt;ES6新特性&lt;/h1&gt;&lt;p&gt;ES6 = ECMAScript 6&lt;/p&gt;
&lt;h2 id=&quot;申明变量let和const&quot;&gt;&lt;a href=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ES6新特性</title>
    <link href="http://x821.github.io/2021/01/08/ES6%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>http://x821.github.io/2021/01/08/ES6%E6%96%B0%E7%89%B9%E6%80%A7/</id>
    <published>2021-01-08T12:42:37.000Z</published>
    <updated>2021-03-25T01:03:22.746Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ES6新特性"><a href="#ES6新特性" class="headerlink" title="ES6新特性"></a>ES6新特性</h1><p>ES6 = ECMAScript 6</p><h2 id="申明变量let和const"><a href="#申明变量let和const" class="headerlink" title="申明变量let和const"></a>申明变量let和const</h2><h5 id="let"><a href="#let" class="headerlink" title="let"></a>let</h5><ul><li><p>let申明变量不存在预解析；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(flag);</span><br><span class="line"><span class="keyword">let</span> flag = <span class="number">123</span>;</span><br><span class="line"><span class="comment">//结果：报错</span></span><br></pre></td></tr></table></figure></li><li><p>let声明的变量不允许重复</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> flag = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">let</span> flag = <span class="number">456</span>;</span><br><span class="line"><span class="built_in">console</span>.log(flag);</span><br></pre></td></tr></table></figure></li><li><p>ES6引入了块级作用域<br>块内部定义的变量，在外部无法访问(PS: 只要被 { } 包裹起来，就形成块级作用域)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> flag = <span class="number">123</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(flag);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>let必须先声明在使用<br>因为用let申明的变量没有预解析</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tem = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">let</span> tem;  <span class="comment">//报错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h5 id="const"><a href="#const" class="headerlink" title="const"></a>const</h5><p>const声明的常量不能被重新赋值，且在申明的同时就要被初始化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> n = <span class="number">1</span>;<span class="comment">//申明的同时就要初始化</span></span><br><span class="line">n = <span class="number">2</span>;<span class="comment">//此处报错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="变量的结构赋值"><a href="#变量的结构赋值" class="headerlink" title="变量的结构赋值"></a>变量的结构赋值</h2><h5 id="数组的解构赋值"><a href="#数组的解构赋值" class="headerlink" title="数组的解构赋值"></a>数组的解构赋值</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var a =1,b=2,c=3;//js中的写法</span></span><br><span class="line"><span class="keyword">let</span> [a,b,c] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];<span class="comment">//node中 数组的解构赋值</span></span><br><span class="line"><span class="built_in">console</span>.log(a,b,c);<span class="comment">// 1 2 3</span></span><br><span class="line"><span class="comment">//声明时赋初值</span></span><br><span class="line"><span class="keyword">let</span> [a=<span class="number">123</span>,b,c] = [,<span class="number">456</span>,];</span><br><span class="line"><span class="built_in">console</span>.log(a,b,c);<span class="comment">// 123 456 undefined</span></span><br></pre></td></tr></table></figure><p>利用解构赋值交换两个变量的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line">[a, b] = [b, a];</span><br><span class="line"><span class="built_in">console</span>.log(a,b);<span class="comment">// 2 1</span></span><br></pre></td></tr></table></figure><p>对象的解构赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;foo,bar&#125; = &#123;<span class="attr">foo</span> : <span class="string">&#x27;hello&#x27;</span>,<span class="attr">bar</span> : <span class="string">&#x27;hi&#x27;</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(foo,bar);</span><br></pre></td></tr></table></figure><p>字符串的解构赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a,b,c,d,e] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a,b,c,d,e);<span class="comment">//h e l l o</span></span><br></pre></td></tr></table></figure><h2 id="字符串相关扩展"><a href="#字符串相关扩展" class="headerlink" title="字符串相关扩展"></a>字符串相关扩展</h2><h5 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h5><p>include(str [,index]) str 所要匹配的字符串 ； index 从什么位置开始匹配</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;hello world&#x27;</span>.includes(<span class="string">&#x27;world&#x27;</span>);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;hello world&#x27;</span>.includes(<span class="string">&#x27;world&#x27;</span>,<span class="number">7</span>);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><h5 id="startsWith"><a href="#startsWith" class="headerlink" title="startsWith()"></a>startsWith()</h5><p>判断字符串是否特定字符串开始</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;admin/index.php&#x27;</span>.startsWith(<span class="string">&#x27;admin&#x27;</span>));<span class="comment">// true</span></span><br></pre></td></tr></table></figure><h5 id="endsWith"><a href="#endsWith" class="headerlink" title="endsWith()"></a>endsWith()</h5><p>判断字符串是否特定字符串结束</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;admin/index.php&#x27;</span>.startsWith(<span class="string">&#x27;php&#x27;</span>));<span class="comment">// true</span></span><br></pre></td></tr></table></figure><h5 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h5><p>在js中若要拼接字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    age:<span class="number">13</span>,</span><br><span class="line">    gender:<span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&lt;div&gt;&lt;span&gt;&#x27;</span>+obj.name+<span class="string">&#x27;&lt;/span&gt;&lt;span&gt;&#x27;</span>+obj.age+<span class="string">&#x27;&lt;/span&gt;&lt;span&gt;&#x27;</span>+obj.gender+<span class="string">&#x27;&lt;/span&gt;&lt;/div&gt;&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str);<span class="comment">//&lt;div&gt;&lt;span&gt;张三&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;&lt;span&gt;男&lt;/span&gt;&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><p>利用模板字符串进行拼接</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    age:<span class="number">13</span>,</span><br><span class="line">    gender:<span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;&lt;div&gt;</span></span><br><span class="line"><span class="string">                &lt;span&gt;$&#123;obj.name&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="string">                &lt;span&gt;$&#123;obj.age&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="string">                &lt;span&gt;$&#123;obj.gender&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="string">               &lt;span&gt;$&#123;1+1&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="string">               &lt;span&gt;$&#123;fn(&#x27;</span>你好<span class="string">&#x27;)&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="string">          &lt;/div&gt;&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"><span class="comment">//&lt;div&gt;</span></span><br><span class="line"><span class="comment">//    &lt;span&gt;张三&lt;/span&gt;</span></span><br><span class="line"><span class="comment">//    &lt;span&gt;13&lt;/span&gt;</span></span><br><span class="line"><span class="comment">//    &lt;span&gt;男&lt;/span&gt;</span></span><br><span class="line"><span class="comment">//      &lt;span&gt;2&lt;/span&gt;</span></span><br><span class="line"><span class="comment">//      &lt;span&gt;你好&lt;/span&gt;</span></span><br><span class="line"><span class="comment">//&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><h2 id="函数的相关扩展"><a href="#函数的相关扩展" class="headerlink" title="函数的相关扩展"></a>函数的相关扩展</h2><ol><li><p>参数的默认值</p></li><li><p>参数的解构赋值</p></li><li><p>rest参数</p></li><li><p>…扩展运算符</p></li><li><p>箭头函数</p></li></ol><h5 id="参数的默认值"><a href="#参数的默认值" class="headerlink" title="参数的默认值"></a>参数的默认值</h5><p>在js中的若要给函数参数指定默认值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">param</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> p = param || <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//foo();</span></span><br><span class="line"><span class="comment">//foo(&#x27;nihao&#x27;);</span></span><br></pre></td></tr></table></figure><p>在ES6中给函数参数指定默认值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">param = <span class="string">&#x27;hello&#x27;</span></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//foo();</span></span><br><span class="line"><span class="comment">//foo(&#x27;nihao&#x27;);</span></span><br></pre></td></tr></table></figure><h5 id="参数的解构赋值"><a href="#参数的解构赋值" class="headerlink" title="参数的解构赋值"></a>参数的解构赋值</h5><p>默认参数的做法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">param = <span class="string">&#x27;hello&#x27;</span> , age = <span class="number">12</span></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(param,age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//foo();</span></span><br><span class="line"><span class="comment">//foo(&#x27;nihao&#x27;,18);</span></span><br></pre></td></tr></table></figure><p>参数的解构赋值的做法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">&#123;param,age&#125;&#125;</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(param,age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//foo(&#123;&#125;);  //注意 此时一定要传入一个对象</span></span><br><span class="line"><span class="comment">//添加默认参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">&#123;param = <span class="string">&#x27;hello&#x27;</span>,age = <span class="number">12</span>&#125;&#125;</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(param,age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//foo(&#123;&#125;);  //注意 此时一定要传入一个对象</span></span><br><span class="line"><span class="comment">//foo(&#123;param = &#x27;nihao&#x27;,age = 18&#125;)</span></span><br></pre></td></tr></table></figure><h5 id="rest参数（剩余参数）"><a href="#rest参数（剩余参数）" class="headerlink" title="rest参数（剩余参数）"></a>rest参数（剩余参数）</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a,b,...param</span>)</span>&#123; <span class="comment">//...param会以数组的形式存储剩余的参数</span></span><br><span class="line">    <span class="built_in">console</span>.log(param);</span><br><span class="line">&#125;</span><br><span class="line">foo(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>);<span class="comment">//[3,4,5,6,7]</span></span><br></pre></td></tr></table></figure><h5 id="扩展运算符-…"><a href="#扩展运算符-…" class="headerlink" title="扩展运算符 …"></a>扩展运算符 …</h5><p>使用 … 将数组拆撒后入参</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a,b,c,d</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a + b + c + d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//foo(1,2,3,4);//传统调用方式</span></span><br><span class="line"><span class="comment">//当要传入一个数组时 arr = [1,2,3,4]</span></span><br><span class="line"><span class="comment">//方法一 使用foo.apply(null,arr);</span></span><br><span class="line"><span class="comment">//方法二 使用 ...   将数组拆散</span></span><br><span class="line">foo(...arr); <span class="comment">//10</span></span><br></pre></td></tr></table></figure><p>使用 … 合并数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="keyword">let</span> arr3 = [...arr1,...arr2];</span><br><span class="line"><span class="built_in">console</span>.log(arr3);<span class="comment">//[1,2,3,4,5,6]</span></span><br></pre></td></tr></table></figure><h5 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//传统函数声明以及调用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">参数列表</span>)</span>&#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br><span class="line"><span class="comment">//ES6 中新增的函数申明以及调用  =&gt;</span></span><br><span class="line"><span class="keyword">let</span> foo = <span class="function">(<span class="params">形参参数列表</span>) =&gt;</span> &#123;函数体&#125;;</span><br><span class="line">foo(实参列表);</span><br><span class="line"><span class="comment">//用处 例子</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="comment">//arr.forEach(function(e,index)&#123;</span></span><br><span class="line"><span class="comment">//    console.log(e);</span></span><br><span class="line"><span class="comment">//      console.log(index);</span></span><br><span class="line"><span class="comment">//&#125;);</span></span><br><span class="line">arr.forEach(<span class="function">(<span class="params">e,index</span>) =&gt;</span> &#123;<span class="built_in">console</span>.log(e);<span class="built_in">console</span>.log(index)&#125;);</span><br></pre></td></tr></table></figure><p>箭头函数的注意事项</p><ol><li><p>箭头函数中this取决于函数的定义，而不是函数的调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不使用箭头函数时 this取决于调用者  此时是window</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    doSomething: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">        &#125;,<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.doSomething();<span class="comment">//window</span></span><br><span class="line"><span class="comment">//使用箭头函数中的this 取决函数声明的环境 此时是在obj中声明的  则this指向obj</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    doSomething: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">        &#125;,<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.doSomething();<span class="comment">//obj&#123;name:&quot;张三&quot;&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>箭头参数不可以new</p></li><li><p>箭头函数不可以使用arguments获取参数列表，可以使用rest代替</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = <span class="function">(<span class="params">...param</span>) =&gt;</span> <span class="built_in">console</span>.log(param);</span><br><span class="line">foo(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br></pre></td></tr></table></figure></li></ol><h2 id="数组的扩展"><a href="#数组的扩展" class="headerlink" title="数组的扩展"></a>数组的扩展</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>].keys(); <span class="comment">//Array.keys()  返回数组的所有下标[0,1,2]</span></span><br><span class="line"><span class="built_in">console</span>.log(a.next());  <span class="comment">//迭代返回当前位置的下标 0</span></span><br><span class="line"><span class="built_in">console</span>.log(a.next());  <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(a.next());  <span class="comment">//2</span></span><br><span class="line"><span class="keyword">let</span> b = [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>].values(); <span class="comment">//Array.values()  返回数组的所有值</span></span><br><span class="line"><span class="built_in">console</span>.log(b.next());  <span class="comment">//迭代返回当前位置的值  a</span></span><br><span class="line"><span class="built_in">console</span>.log(b.next());  <span class="comment">//b</span></span><br><span class="line"><span class="built_in">console</span>.log(b.next());  <span class="comment">//c</span></span><br><span class="line"><span class="comment">//数组查找</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">console</span>.log([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>].find(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;  <span class="comment">//find 返回满足条件的第一个元素值</span></span><br><span class="line">        <span class="keyword">return</span> item&gt;<span class="number">3</span>;</span><br><span class="line">    &#125;));</span><br><span class="line">    <span class="built_in">console</span>.log([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>].filter(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;  <span class="comment">//filter 返回满足条件的所有元素值</span></span><br><span class="line">        <span class="keyword">return</span> item&gt;<span class="number">3</span>;</span><br><span class="line">    &#125;));</span><br><span class="line">    <span class="built_in">console</span>.log([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>].findIndex(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123; <span class="comment">//findIndex 返回满条件的第一个元素下标</span></span><br><span class="line">        <span class="keyword">return</span> item&gt;<span class="number">3</span>;</span><br><span class="line">    &#125;));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//数组包含</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [<span class="number">123</span>,<span class="number">456</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="literal">NaN</span>];</span><br><span class="line">    <span class="built_in">console</span>.log(arr.includes(<span class="number">456</span>));<span class="comment">//Array.includes(item);在数组中查询有无item元素 返回boolean</span></span><br><span class="line">    <span class="comment">//也可以查询有无非数字</span></span><br><span class="line">    <span class="built_in">console</span>.log([<span class="number">1</span>,<span class="number">2</span>,<span class="literal">NaN</span>].includes(<span class="number">1</span>));</span><br><span class="line">    <span class="built_in">console</span>.log([<span class="number">1</span>,<span class="number">2</span>,<span class="literal">NaN</span>].includes(<span class="literal">NaN</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h2><p>ES6新增数据类型 属于基本数据类型，Symbol不可以new</p><p>Symbol声明的变量是唯一的，意义在于减少命名冲突；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">//Symbol的变量是唯一的，所以a1和a2永远不相等</span></span><br><span class="line">    <span class="keyword">let</span> a1 = <span class="built_in">Symbol</span>();</span><br><span class="line">    <span class="keyword">let</span> a2 = <span class="built_in">Symbol</span>();</span><br><span class="line">    <span class="built_in">console</span>.log(a1 === a2);</span><br><span class="line">   <span class="comment">//Symbol.for(key)</span></span><br><span class="line">   <span class="comment">//在使用Symbol时  会生成一个全局注册表，其中的数据以键值对的形式存在；能根据key来拿到对应的value</span></span><br><span class="line">   <span class="comment">//若  a3  a4的key是相同的  那么a3 a4是相同的</span></span><br><span class="line">    <span class="keyword">let</span> a3 = <span class="built_in">Symbol</span>.for(<span class="string">&quot;a3&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> a4 = <span class="built_in">Symbol</span>.for(<span class="string">&quot;a3&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(a3 === a4);  <span class="comment">//true</span></span><br><span class="line">    <span class="comment">//问题  若改变a3的值  a4的值会改变吗？</span></span><br><span class="line">    <span class="comment">//是值复制   还是指针</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ES6中涉及到的数据结构"><a href="#ES6中涉及到的数据结构" class="headerlink" title="ES6中涉及到的数据结构"></a>ES6中涉及到的数据结构</h2><h5 id="数组Array"><a href="#数组Array" class="headerlink" title="数组Array"></a>数组Array</h5><p>数组中的元素可以重复，且数组中元素的排列是有序的（因此可以通过下标访问）</p><h5 id="集合Set"><a href="#集合Set" class="headerlink" title="集合Set"></a>集合Set</h5><p>集合的元素是唯一的，不可以重复出现，且集合中的元素是无序的（因此无法通过下标访问集合中的元素）</p><h5 id="Set中的方法"><a href="#Set中的方法" class="headerlink" title="Set中的方法"></a>Set中的方法</h5><table><thead><tr><th>set.add(ele)</th><th>向set集合中追加ele元素</th></tr></thead><tbody><tr><td>set.has(ele)</td><td>判断set集合中是否存在ele元素</td></tr><tr><td>set.delete(ele)</td><td>从集合中删除ele元素</td></tr><tr><td>set.clear()</td><td>清空set集合</td></tr><tr><td>set.forEach( (ele) =&gt;{} )</td><td>遍历集和</td></tr></tbody></table><p>set对象的创建：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> set();</span><br></pre></td></tr></table></figure><h2 id="数组与集合的互相转换"><a href="#数组与集合的互相转换" class="headerlink" title="数组与集合的互相转换"></a>数组与集合的互相转换</h2><h5 id="数组-gt-集合"><a href="#数组-gt-集合" class="headerlink" title="数组==&gt;集合"></a>数组==&gt;集合</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> set(arr);</span><br></pre></td></tr></table></figure><h5 id="集合-gt-数组"><a href="#集合-gt-数组" class="headerlink" title="集合==&gt;数组"></a>集合==&gt;数组</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> set();</span><br><span class="line"><span class="keyword">let</span> arr = [...set];</span><br></pre></td></tr></table></figure><h5 id="weakSet"><a href="#weakSet" class="headerlink" title="weakSet"></a>weakSet</h5><h5 id="WeakSet-结构与-Set-类似，也是不重复的值的集合。但是，它与-Set-有下面区别。"><a href="#WeakSet-结构与-Set-类似，也是不重复的值的集合。但是，它与-Set-有下面区别。" class="headerlink" title="WeakSet 结构与 Set 类似，也是不重复的值的集合。但是，它与 Set 有下面区别。"></a>WeakSet 结构与 Set 类似，也是不重复的值的集合。但是，它与 Set 有下面区别。</h5><ul><li>WeakSet 的成员只能是对象，而不能是其他类型的值。</li><li>WeakSet 中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用，也就是说，如果其他对象都不 再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在于 WeakSet 之中。</li><li>WeakSet 只有add/delete/clear/has三个方法，不能遍历，没有size属性等</li></ul><h5 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h5><p>Map也是由键值对构成的，和对象的区别在于Map的key也可以是一个对象，Object只可以是字符串</p><h2 id="代理和反射"><a href="#代理和反射" class="headerlink" title="代理和反射"></a>代理和反射</h2><h5 id="代理Proxy"><a href="#代理Proxy" class="headerlink" title="代理Proxy"></a>代理Proxy</h5><p>代理：通过代理对象访问目标对象<br>作用：</p><ul><li>控制目标对象的访问权限。</li><li>扩展目标对象方法</li></ul><p>创建目标对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> targetObject = &#123;</span><br><span class="line">    name:<span class="string">&quot;target&quot;</span>,</span><br><span class="line">    type:<span class="string">&quot;object&quot;</span>,</span><br><span class="line">    fun:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;目标对象的fun&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建代理对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(targetObject,&#123;</span><br><span class="line">    <span class="comment">//target 就是目标的对象</span></span><br><span class="line">    <span class="comment">//key 就是目标对象中的每一个属性和方法</span></span><br><span class="line">    <span class="comment">//当代理对象直接获取属性和方法的等信息的时候都会来调用get方法</span></span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params">target,key</span>)</span>&#123;</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">key === <span class="string">&#x27;fun&#x27;</span></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;代理对象调用目标对象的fun&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> target[key];</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//当给对象的属性和方法赋值的时候调用set方法</span></span><br><span class="line">    <span class="comment">//target 就是目标的对象</span></span><br><span class="line">    <span class="comment">//key 就是目标对象中的每一个属性和方法</span></span><br><span class="line">    <span class="comment">//value 属性值</span></span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">target,key,value</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//如果key为type的时候就不给目标对象赋值</span></span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">key === <span class="string">&#x27;type&#x27;</span></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> target[type];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            target[key] = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//当通过 xx in obj 的时候调用has方法</span></span><br><span class="line">    <span class="function"><span class="title">has</span>(<span class="params">target,key</span>)</span>&#123;</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">key === <span class="string">&#x27;type&#x27;</span></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//当删除对象的属性时 调用此方法</span></span><br><span class="line">    <span class="function"><span class="title">deleteProperty</span>(<span class="params">target,key</span>)</span>&#123;</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">key === <span class="string">&#x27;age&#x27;</span></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">delete</span> target[key];</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">p.fun(); <span class="comment">//代理对象调用目标对象的fun     目标对象的fun</span></span><br><span class="line">p.name = <span class="string">&#x27;temp&#x27;</span>; <span class="comment">//修改无效  当使用点的方式来访问属性时 会调用set函数  而set函数中设置了对name的修改权限</span></span><br><span class="line"><span class="built_in">console</span>.log(p);  <span class="comment">//&#123; name: &#x27;target&#x27;, type: &#x27;object&#x27;, fun: [Function: fun] &#125;</span></span><br><span class="line">p.type = <span class="string">&#x27;temp&#x27;</span>; <span class="comment">//修改成功  set中没有对type的权限要求</span></span><br><span class="line"><span class="built_in">console</span>.log(p); <span class="comment">//&#123; name: &#x27;target&#x27;, type: &#x27;temp&#x27;, fun: [Function: fun] &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;type&#x27;</span> <span class="keyword">in</span> p); <span class="comment">//true  当使用in判断对象中是否有某属性时 会调用has函数 而我们在has中对type设置了权限 则无法访问</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> p); <span class="comment">//true  未对name设置  则访问成功</span></span><br><span class="line"><span class="keyword">delete</span> p.name;  <span class="comment">//删除失败   当使用点的方式来删除某属性时会默认调用deleteProperty方法 而我们在deleteProperty中限制了对name的删除权限 则删除失败</span></span><br><span class="line"><span class="keyword">delete</span> p.type;  <span class="comment">//删除成功   </span></span><br><span class="line"><span class="built_in">console</span>.log(p); <span class="comment">//&#123; name: &#x27;target&#x27;, fun: [Function: fun] &#125;</span></span><br></pre></td></tr></table></figure><h5 id="反射Reflect"><a href="#反射Reflect" class="headerlink" title="反射Reflect"></a>反射Reflect</h5><p>反射机制是指程序在运行的时候访问、检测和修改它本身状态或行为的一种能力，例如一个对象能够在运行时知道自己有哪些方法和属性。</p><p>反射的概念在编译型的编程语言中比较明显，比如java、C#、Object-c等。对于 JavaScript来说，反射就是获取对象的内部结构的信息，所以JS中的反射随处可见，比如for…in方式遍历对象。</p><p>从ECMAScript6开始，JS引入Reflect这个API专门用于操作反射。</p><p>ES6中的反射，将抛出异常，异常捕获简化为返回一个boolean值来表示其是否正常运行</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ES6新特性&quot;&gt;&lt;a href=&quot;#ES6新特性&quot; class=&quot;headerlink&quot; title=&quot;ES6新特性&quot;&gt;&lt;/a&gt;ES6新特性&lt;/h1&gt;&lt;p&gt;ES6 = ECMAScript 6&lt;/p&gt;
&lt;h2 id=&quot;申明变量let和const&quot;&gt;&lt;a href=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>浅析Javascript中作用域、作用域链和预解析</title>
    <link href="http://x821.github.io/2020/12/25/%E6%B5%85%E6%9E%90Javascript%E4%B8%AD%E4%BD%9C%E7%94%A8%E5%9F%9F%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE%E5%92%8C%E9%A2%84%E8%A7%A3%E6%9E%90/"/>
    <id>http://x821.github.io/2020/12/25/%E6%B5%85%E6%9E%90Javascript%E4%B8%AD%E4%BD%9C%E7%94%A8%E5%9F%9F%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE%E5%92%8C%E9%A2%84%E8%A7%A3%E6%9E%90/</id>
    <published>2020-12-25T10:38:45.000Z</published>
    <updated>2021-03-25T01:01:40.397Z</updated>
    
    <content type="html"><![CDATA[<p>在 JavaScript 中, 对象和函数同样也是变量。在 JavaScript 中, 作用域为可访问变量，对象，函数的集合。JavaScript 函数作用域: 作用域在函数内修改。</p><br><br><br><h2 id="一、作用域"><a href="#一、作用域" class="headerlink" title="一、作用域"></a>一、作用域</h2><br><p>作用域（scope），程序设计概念，通常来说，一段程序代码中所用到的名字并不总是有效/可用的，而限定这个名字的可用性的代码范围就是这个名字的作用域。</p><p>作用域的使用提高了程序逻辑的局部性，增强程序的可靠性，减少名字冲突。</p><br><h3 id="1-全局作用域（全局变量）"><a href="#1-全局作用域（全局变量）" class="headerlink" title="1.全局作用域（全局变量）"></a>1.全局作用域（全局变量）</h3><br><p><strong>全局变量，原理就是将变量挂载到window对象中.</strong></p><p><strong>全局变量拥有全局的作用域，可在任意地方被调用</strong></p><br><p>全局变量有两种声明方式</p><h4 id="（1）函数外部"><a href="#（1）函数外部" class="headerlink" title="（1）函数外部"></a>（1）函数外部</h4><br><p>(写在函数外面的都是全局变量)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> num = <span class="number">15</span>; <span class="comment">//全局变量</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> num = <span class="number">10</span>; <span class="comment">//不是全局变量</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">               <span class="comment">/*----*/</span> </span></span><br><span class="line">        &#125;</span><br><span class="line">            f2();</span><br><span class="line">        &#125;</span><br><span class="line">f();</span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(num); <span class="comment">//  15</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br><h4 id="（2）函数内部"><a href="#（2）函数内部" class="headerlink" title="（2）函数内部"></a>（2）函数内部</h4><br><p>(不加var的变量声明，隐式全局变量)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    num = <span class="number">10</span>; <span class="comment">//隐式全局变量</span></span></span><br><span class="line">    &#125;</span><br><span class="line">f();</span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(num); <span class="comment">// 10</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br><h4 id="全局变量与隐式全局变量的区别"><a href="#全局变量与隐式全局变量的区别" class="headerlink" title="全局变量与隐式全局变量的区别"></a>全局变量与隐式全局变量的区别</h4><br><p>隐式全局变量可以通过delete关键字来删除，全局变量不可以</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//全局变量不可被delete</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> a = <span class="number">2</span>; <span class="comment">//全局变量</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//****</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(a); <span class="comment">//  2</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">delete</span> a;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(a); <span class="comment">//  2</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//隐式全局变量被delete</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        a = <span class="number">2</span>; <span class="comment">//隐式全局变量</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(a); <span class="comment">//  2</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">delete</span> a;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(a); <span class="comment">//  not defined (已被删除)</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br><h3 id="2-局部作用域-局部变量"><a href="#2-局部作用域-局部变量" class="headerlink" title="2.局部作用域(局部变量)"></a>2.局部作用域(局部变量)</h3><br><p>局部变量：写在函数体里面的变量</p><p>局部变量只可以在当前函数内部使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> num = <span class="number">10</span>; <span class="comment">//局部变量</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(num); <span class="comment">// 10</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    f2();</span><br><span class="line">    &#125;</span><br><span class="line">f();</span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(num); <span class="comment">//  not defined</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br><br><h2 id="二、作用域链"><a href="#二、作用域链" class="headerlink" title="二、作用域链"></a>二、作用域链</h2><br><p>作用域链简而言之就是，调用变量时，若当前作用域内没有该变量时就向它的上一级作用域去寻找。</p><p>Javascript用的是词法作用域（静态作用域）</p><br><p>实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">    <span class="comment">/* 0级作用域 */</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> a = <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">aa</span>(<span class="params"></span>)</span>&#123;    <span class="comment">/* 1级作用域 */</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//var a = 2;</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">bb</span>(<span class="params"></span>)</span>&#123;  <span class="comment">/* 2级作用域 */</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//var a = 3;</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(a);  <span class="comment">// 1</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    bb();</span><br><span class="line">&#125;</span><br><span class="line">aa();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br>作用过程：</p><ol><li>当运行到console.log(a)时，会在当前作用域（2级作用域）内寻找是否有a可用；</li><li>若有直接使用，否则向上一级作用域（1级作用域）去寻找；</li><li>此时来到1级作用域，若此时有a可用则用，否则继续向上一级寻找，直到到达0级作用域；</li><li>此时来到0级作用域，若此时有a可用则用，否则报错；</li></ol><br><p><strong>值得注意的是：作用域链的始发点与函数的调用位置无关，而与函数的声明位置有关</strong> 例子如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> value = <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(value);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> value = <span class="number">2</span>;</span></span><br><span class="line">    foo();</span><br><span class="line">&#125;</span><br><span class="line">bar();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br><br></p><h2 id="三、预解析"><a href="#三、预解析" class="headerlink" title="三、预解析"></a>三、预解析</h2><br><p>当浏览器执行Javascript代码时，为了提高执行效率会在代码解释执行前进行预解析处理。</p><br><p>预解析处理规则：</p><p>\1. 变量提升 仅仅将变量声明提升到当前作用域的最上面，不包括变量的赋值<br>\2. 函数提升 将函数的声明提升到当前作用域的最上面，不包括函数的调用 <strong>函数的声明会提前到变量声明之前</strong></p><br><h3 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h3><br><p>实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(a); <span class="comment">//undefined</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> a = <span class="number">10</span>;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上述代码结果打印为undefined,而不是10，这是为什么呢？</p><p>我们来看看与解析之后的结果，</p><p>预解析为</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> a</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(a);</span></span><br><span class="line">a = 10;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由于变量声明被提升到作用域最前端，而赋值没有被提升，导致执行console.log(a);时 a还未被赋值。</p><br><h3 id="函数提升"><a href="#函数提升" class="headerlink" title="函数提升"></a>函数提升</h3><br><p>实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    f1();</span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">/*-----*/</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br><p>被解析为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">/*-----*/</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    f1();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br><h3 id="函数的声明会提前到变量声明之前"><a href="#函数的声明会提前到变量声明之前" class="headerlink" title="函数的声明会提前到变量声明之前"></a>函数的声明会提前到变量声明之前</h3><br><p>函数提升和变量提升同时发生时，函数的声明会提前到变量声明之前。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> a = <span class="number">3</span>;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="number">10</span>);</span></span><br><span class="line">    &#125;   </span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a);</span></span><br><span class="line">    a();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>被解析为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="number">10</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> a;</span></span><br><span class="line">a = 3</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a);</span></span><br><span class="line"><span class="javascript">    a(); <span class="comment">//not function  因为此时a为变量而不是函数</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br><p><strong>值得注意的是：</strong></p><p>1.函数是可以被打印的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">/*----*/</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(a); <span class="comment">//打印函数a</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.变量a的赋值可以被普通类型和函数互相取代</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> a；</span></span><br><span class="line"><span class="javascript">    a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">/*----*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a); <span class="comment">//打印函数a</span></span></span><br><span class="line">a = 1;</span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(a); <span class="comment">// 1；</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br><h3 id="匿名函数的申明不遵循预解析规则"><a href="#匿名函数的申明不遵循预解析规则" class="headerlink" title="匿名函数的申明不遵循预解析规则"></a>匿名函数的申明不遵循预解析规则</h3><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    f();  <span class="comment">//报错</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">/*----*/</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为解析前后代码相同 执行 <strong>f()</strong> 时，f未被声明为函数类型。</p><br><h3 id="隐式全局变量的注意点"><a href="#隐式全局变量的注意点" class="headerlink" title="隐式全局变量的注意点"></a>隐式全局变量的注意点</h3><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    f();</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a);  <span class="comment">//undefined</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(b);  <span class="comment">//9</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> a = b = c = <span class="number">9</span>;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(a); <span class="comment">//9</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(b); <span class="comment">//9</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br><p>被解析为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> a;  <span class="comment">//局部变量</span></span></span><br><span class="line">      a = 9;  </span><br><span class="line"><span class="javascript">      b = <span class="number">9</span>;  <span class="comment">//隐式全局变量</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(a);  <span class="comment">//9</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(b);  <span class="comment">//9</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    f();</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(b);  <span class="comment">//9</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a);  <span class="comment">//undefined   因为a是局部变量</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在 JavaScript 中, 对象和函数同样也是变量。在 JavaScript 中, 作用域为可访问变量，对象，函数的集合。JavaScript 函数作用域: 作用域在函数内修改。&lt;/p&gt;
&lt;br&gt;

&lt;br&gt;

&lt;br&gt;

&lt;h2 id=&quot;一、作用域&quot;&gt;&lt;a href=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Uniapp实现多端开发</title>
    <link href="http://x821.github.io/2020/12/05/Uniapp%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    <id>http://x821.github.io/2020/12/05/Uniapp%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%AB%AF%E5%BC%80%E5%8F%91/</id>
    <published>2020-12-05T06:04:52.000Z</published>
    <updated>2021-03-25T00:56:37.416Z</updated>
    
    <content type="html"><![CDATA[<p>#1.uni-app的基本使用</p><p>课程介绍：</p><p>基础部分：</p><ul><li>环境搭建</li><li>页面外观配置</li><li>数据绑定</li><li>uni-app的生命周期</li><li>组件的使用</li><li>uni-app中样式学习</li><li>在uni-app中使用字体图标和开启scss</li><li>条件注释跨端兼容</li><li>uni中的事件</li><li>导航跳转</li><li>组件创建和通讯，及组件的生命周期</li><li>uni-app中使用uni-ui库</li></ul><p>项目：极客商城项目</p><h2 id="1-1-uni-app介绍-官方网页"><a href="#1-1-uni-app介绍-官方网页" class="headerlink" title="1.1 uni-app介绍 官方网页"></a>1.1 uni-app介绍 <a href="https://uniapp.dcloud.io/resource">官方网页</a></h2><p><code>uni-app</code> 是一个使用 <a href="https://vuejs.org/">Vue.js</a> 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、H5、以及各种小程序（微信/支付宝/百度/头条/QQ/钉钉）等多个平台。</p><p>即使不跨端，<code>uni-app</code>同时也是更好的小程序开发框架。</p><p>具有vue和微信小程序的开发经验，可快速上手uni-app</p><p>为什么要去学习uni-app？</p><p>相对开发者来说，减少了学习成本，因为只学会uni-app之后，即可开发出iOS、Android、H5、以及各种小程序的应用，不需要再去学习开发其他应用的框架，相对公司而言，也大大减少了开发成本。</p><h2 id="1-2-环境搭建"><a href="#1-2-环境搭建" class="headerlink" title="1.2 环境搭建"></a>1.2 环境搭建</h2><p>安装编辑器HbuilderX <a href="https://www.dcloud.io/hbuilderx.html">下载地址</a></p><p>HBuilderX是通用的前端开发工具，但为<code>uni-app</code>做了特别强化。</p><p>下载App开发版，可开箱即用</p><p>安装微信开发者工具 <a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html">下载地址</a></p><h2 id="1-3-利用HbuilderX初始化项目-js"><a href="#1-3-利用HbuilderX初始化项目-js" class="headerlink" title="1.3 利用HbuilderX初始化项目(js)"></a>1.3 利用HbuilderX初始化项目(js)</h2><ul><li>点击HbuilderX菜单栏文件&gt;项目&gt;新建</li><li>选择uni-app,填写项目名称，项目创建的目录</li></ul><h2 id="1-4-使用vue-cli脚手架创建ts项目"><a href="#1-4-使用vue-cli脚手架创建ts项目" class="headerlink" title="1.4 使用vue/cli脚手架创建ts项目"></a>1.4 使用vue/cli脚手架创建ts项目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Javascript</span><br><span class="line">vue create -p dcloudio&#x2F;uni-preset-vue my-ts</span><br></pre></td></tr></table></figure><h2 id="1-5-运行项目"><a href="#1-5-运行项目" class="headerlink" title="1.5 运行项目"></a>1.5 运行项目</h2><p>在菜单栏中点击运行，运行到浏览器，选择浏览器即可运行</p><p>在微信开发者工具里运行：进入hello-uniapp项目，点击工具栏的运行 -&gt; 运行到小程序模拟器 -&gt; 微信开发者工具，即可在微信开发者工具里面体验uni-app</p><p>在微信开发者工具里运行：进入hello-uniapp项目，点击工具栏的运行 -&gt; 运行到手机或模拟器 -&gt; 选择调式的手机</p><p><strong>注意：</strong></p><ul><li>如果是第一次使用，需要先配置小程序ide的相关路径，才能运行成功</li><li>微信开发者工具在设置中安全设置，服务端口开启</li></ul><h2 id="1-6-介绍项目目录和文件作用"><a href="#1-6-介绍项目目录和文件作用" class="headerlink" title="1.6 介绍项目目录和文件作用"></a>1.6 介绍项目目录和文件作用</h2><p><code>pages.json</code> 文件用来对 uni-app 进行全局配置，决定页面文件的路径、窗口样式、原生的导航栏、底部的原生tabbar 等</p><p><code>manifest.json</code> 文件是应用的配置文件，用于指定应用的名称、图标、权限等。</p><p><code>App.vue</code>是我们的跟组件，所有页面都是在<code>App.vue</code>下进行切换的，是页面入口文件，可以调用应用的生命周期函数。</p><p><code>main.js</code>是我们的项目入口文件，主要作用是初始化<code>vue</code>实例并使用需要的插件。</p><p><code>uni.scss</code>文件的用途是为了方便整体控制应用的风格。比如按钮颜色、边框风格，<code>uni.scss</code>文件里预置了一批scss变量预置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">就是打包目录，在这里有各个平台的打包文件</span><br><span class="line">​&#96;&#96;&#96;pages&#96;&#96;&#96; 所有的页面存放目录</span><br><span class="line"></span><br><span class="line">​&#96;&#96;&#96;static&#96;&#96;&#96; 静态资源目录，例如图片等</span><br><span class="line"></span><br><span class="line">​&#96;&#96;&#96;components&#96;&#96;&#96; 组件存放目录</span><br><span class="line"></span><br><span class="line">为了实现多端兼容，综合考虑编译速度、运行性能等因素，&#96;uni-app&#96; 约定了如下开发规范：</span><br><span class="line"></span><br><span class="line">- 页面文件遵循 [Vue 单文件组件 (SFC) 规范](https:&#x2F;&#x2F;vue-loader.vuejs.org&#x2F;zh&#x2F;spec.html)</span><br><span class="line">- 组件标签靠近小程序规范，详见[uni-app 组件规范](https:&#x2F;&#x2F;uniapp.dcloud.io&#x2F;component&#x2F;README)</span><br><span class="line">- 接口能力（JS API）靠近微信小程序规范，但需将前缀 &#96;wx&#96; 替换为 &#96;uni&#96;，详见[uni-app接口规范](https:&#x2F;&#x2F;uniapp.dcloud.io&#x2F;api&#x2F;README)</span><br><span class="line">- 数据绑定及事件处理同 &#96;Vue.js&#96; 规范，同时补充了App及页面的生命周期</span><br><span class="line">- 为兼容多端运行，建议使用flex布局进行开发</span><br><span class="line"></span><br><span class="line"># 2.vue ts语法</span><br><span class="line"></span><br><span class="line">## 2.1 基本使用</span><br><span class="line"></span><br><span class="line">​&#96;&#96;&#96;javascript</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view class&#x3D;&quot;content&quot;&gt;</span><br><span class="line">&lt;image class&#x3D;&quot;logo&quot; src&#x3D;&quot;&#x2F;static&#x2F;logo.png&quot;&gt;&lt;&#x2F;image&gt;</span><br><span class="line">&lt;!--属性绑定--&gt;</span><br><span class="line">&lt;view class&#x3D;&quot;text-area&quot;&gt;</span><br><span class="line">&lt;text class&#x3D;&quot;title&quot;&gt;&#123;&#123;title&#125;&#125;&lt;&#x2F;text&gt;</span><br><span class="line">&lt;view&gt;&#123;&#123;age&#125;&#125;&lt;&#x2F;view&gt;</span><br><span class="line">&lt;image v-bind:src&#x3D;&quot;img&quot;&gt;&lt;&#x2F;image&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;!--v-if和v-for--&gt;</span><br><span class="line">&lt;view v-for&#x3D;&quot;(item,i) in arr&quot; :key&#x3D;&quot;i&quot;&gt;名字：&#123;&#123;item.name&#125;&#125;---年龄：&#123;&#123;item.age&#125;&#125;&lt;&#x2F;view&gt;</span><br><span class="line">&lt;view v-if&#x3D;&quot;flag&quot;&gt;显示我&lt;&#x2F;view&gt;</span><br><span class="line">&lt;!--点击事件--&gt;</span><br><span class="line">&lt;button @click&#x3D;&quot;tapHandle(1,$event)&quot;&gt;点我传参&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button @click.self&#x3D;&quot;printTitle&quot;&gt;点我不传参&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button @click.stop&#x3D;&quot;title &#x3D; &#39;ggg&#39;&quot;&gt;点我修改title&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">import &#123;</span><br><span class="line">Component,</span><br><span class="line">Vue,</span><br><span class="line">Watch</span><br><span class="line">&#125; from &quot;vue-property-decorator&quot;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;&#125;)</span><br><span class="line">export default class Index extends Vue &#123;</span><br><span class="line">&#x2F;&#x2F;1.响应式属性，对标之前的data函数返回的对象</span><br><span class="line">private title: String &#x3D; &#39;myTitle&#39;;</span><br><span class="line">private num: Number &#x3D; 123;</span><br><span class="line">private img: String &#x3D; &#39;http:&#x2F;&#x2F;destiny001.gitee.io&#x2F;image&#x2F;monkey_02.jpg&#39;</span><br><span class="line">private arr: &#123;&#125; [] &#x3D; [&#123;</span><br><span class="line">name: &#39;刘能&#39;,</span><br><span class="line">age: 29</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">name: &#39;赵四&#39;,</span><br><span class="line">age: 39</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">name: &#39;宋小宝&#39;,</span><br><span class="line">age: 49</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">name: &#39;小沈阳&#39;,</span><br><span class="line">age: 59</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">private flag: Boolean &#x3D; true;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;2.计算属性</span><br><span class="line">get age(): Number &#123;</span><br><span class="line">return this.num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;3.生命周期</span><br><span class="line">onLoad() &#123;</span><br><span class="line">this.printTitle();</span><br><span class="line">let a: string &#x3D; &#39;123&#39;;</span><br><span class="line">console.log(&quot;onLoad~~~~~~~~~~~~~~~~&quot;)</span><br><span class="line">&#125;</span><br><span class="line">onShow() &#123;</span><br><span class="line">console.log(&quot;onShow~~~~~~~~~~~&quot;)</span><br><span class="line">&#125;</span><br><span class="line">mounted() &#123;</span><br><span class="line">console.log(&quot;mounted~~~~~~~~~~~~~~&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;4.属性监听 此处是监听title的变化</span><br><span class="line">@Watch(&#39;title&#39;)</span><br><span class="line">titleChange(newVal: Number, oldVal: Number) &#123;</span><br><span class="line">console.log(newVal, oldVal);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;5.methods，对标之前methods中写的方法</span><br><span class="line">printTitle(): void &#123; </span><br><span class="line">console.log(&#39;hahahhhaha&#39;)</span><br><span class="line">&#125;</span><br><span class="line">tapHandle(num: number, event: any): void &#123;</span><br><span class="line">console.log(num, event.type)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.content &#123;</span><br><span class="line">display: flex;</span><br><span class="line">flex-direction: column;</span><br><span class="line">align-items: center;</span><br><span class="line">justify-content: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.logo &#123;</span><br><span class="line">height: 200rpx;</span><br><span class="line">width: 200rpx;</span><br><span class="line">margin-top: 200rpx;</span><br><span class="line">margin-left: auto;</span><br><span class="line">margin-right: auto;</span><br><span class="line">margin-bottom: 50rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.text-area &#123;</span><br><span class="line">display: flex;</span><br><span class="line">justify-content: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.title &#123;</span><br><span class="line">font-size: 36rpx;</span><br><span class="line">color: #8f8f94;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">Javascript</span><br><span class="line">&#x2F;&#x2F;1.vue-class-component：强化 Vue 组件，使用 TypeScript&#x2F;装饰器 增强 Vue 组件</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;2.vue-property-decorator 是在 vue-class-component 上增强了更多的结合 Vue 特性的装饰器，新增了这 7 个装饰器：</span><br><span class="line">@Emit  </span><br><span class="line">@Inject    </span><br><span class="line">@Model</span><br><span class="line">@Prop</span><br><span class="line">@Provide</span><br><span class="line">@Watch</span><br><span class="line">@Component (从 vue-class-component 继承)</span><br></pre></td></tr></table></figure><h2 id="2-2-uni-app中组件的创建"><a href="#2-2-uni-app中组件的创建" class="headerlink" title="2.2 uni-app中组件的创建"></a>2.2 uni-app中组件的创建</h2><p><a href="https://juejin.im/post/6844903741456384014">https://juejin.im/post/6844903741456384014</a></p><p><a href="https://blog.csdn.net/sllailcp/article/details/102542796/">https://blog.csdn.net/sllailcp/article/details/102542796/</a></p><p><a href="https://www.jianshu.com/p/d8ed3aa76e9b">https://www.jianshu.com/p/d8ed3aa76e9b</a></p><p>在uni-app中，可以通过创建一个后缀名为vue的文件，即创建一个组件成功，其他组件可以将该组件通过impot的方式导入，在通过components进行注册即可</p><ul><li><p>创建head组件，在component中创建head.vue文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Javascript</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">这是头部组件</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">import &#123; Component,Vue&#125; from &quot;vue-property-decorator&quot;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;&#125;)</span><br><span class="line">export default class Head extends Vue&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure></li><li><p>在其他组件中导入该组件并注册</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">Javascript</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view class&#x3D;&quot;content&quot;&gt;</span><br><span class="line">&lt;Head&gt;&lt;&#x2F;Head&gt;</span><br><span class="line">&lt;text&gt;</span><br><span class="line">&#123;&#123;msg|msgFormat(&#39;疯狂+1&#39;, &#39;123&#39;)&#125;&#125;</span><br><span class="line">&lt;&#x2F;text&gt;</span><br><span class="line"></span><br><span class="line">&lt;text v-fontsize&#x3D;&quot;15&quot;&gt;测试文字&lt;&#x2F;text&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">import &#123;</span><br><span class="line">Component,</span><br><span class="line">Vue</span><br><span class="line">&#125; from &quot;vue-property-decorator&quot;;</span><br><span class="line">import Head from &#39;@&#x2F;components&#x2F;head.vue&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;@Component 装饰器可以接收一个对象作为参数，可以在对象中声明 components ，filters，directives等未提供装饰器的选项，也可以声明computed，watch等</span><br><span class="line">@Component(&#123;</span><br><span class="line">components: &#123;</span><br><span class="line">Head</span><br><span class="line">&#125;,</span><br><span class="line">filters: &#123;</span><br><span class="line">msgFormat: function(msg: string, arg: string, arg2: string) &#123;</span><br><span class="line">return msg.replace(&#x2F;少年&#x2F;g, arg + arg2)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#x2F;&#x2F;只在浏览器中有效</span><br><span class="line">directives: &#123; </span><br><span class="line">   &#39;fontsize&#39;: function (el, binding) &#123; </span><br><span class="line">        &#x2F;&#x2F; 注意：这个 function 等同于把代码写到了 bind 和 update 中去</span><br><span class="line">        el.style.fontSize &#x3D; parseInt(binding.value) + &#39;px&#39;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">export default class Index extends Vue &#123;</span><br><span class="line">private msg: String &#x3D; &#39;曾经，我也是一个单纯的少年，单纯的我，傻傻的问，谁是世界上最单纯的男人&#39;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li><li><p>使用组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">&lt;Head&gt;&lt;&#x2F;Head&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-3-组件的生命周期函数"><a href="#2-3-组件的生命周期函数" class="headerlink" title="2.3 组件的生命周期函数"></a>2.3 组件的生命周期函数</h2><table><thead><tr><th>beforeCreate</th><th>在实例初始化之后被调用。<a href="https://cn.vuejs.org/v2/api/#beforeCreate">详见</a></th><th></th><th></th></tr></thead><tbody><tr><td>created</td><td>在实例创建完成后被立即调用。<a href="https://cn.vuejs.org/v2/api/#created">详见</a></td><td></td><td></td></tr><tr><td>beforeMount</td><td>在挂载开始之前被调用。<a href="https://cn.vuejs.org/v2/api/#beforeMount">详见</a></td><td></td><td></td></tr><tr><td>mounted</td><td>挂载到实例上去之后调用。<a href="https://cn.vuejs.org/v2/api/#mounted">详见</a> 注意：此处并不能确定子组件被全部挂载，如果需要子组件完全挂载之后在执行操作可以使用<code>$nextTick</code><a href="https://cn.vuejs.org/v2/api/#Vue-nextTick">Vue官方文档</a></td><td></td><td></td></tr><tr><td>beforeUpdate</td><td>数据更新时调用，发生在虚拟 DOM 打补丁之前。<a href="https://cn.vuejs.org/v2/api/#beforeUpdate">详见</a></td><td>仅H5平台支持</td><td></td></tr><tr><td>updated</td><td>由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。<a href="https://cn.vuejs.org/v2/api/#updated">详见</a></td><td>仅H5平台支持</td><td></td></tr><tr><td>beforeDestroy</td><td>实例销毁之前调用。在这一步，实例仍然完全可用。<a href="https://cn.vuejs.org/v2/api/#beforeDestroy">详见</a></td><td></td><td></td></tr><tr><td>destroyed</td><td>Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。<a href="https://cn.vuejs.org/v2/api/#destroyed">详见</a></td><td></td><td></td></tr></tbody></table><h2 id="2-4-组件的通讯"><a href="#2-4-组件的通讯" class="headerlink" title="2.4 组件的通讯"></a>2.4 组件的通讯</h2><h3 id="2-4-1-父组件给子组件传值"><a href="#2-4-1-父组件给子组件传值" class="headerlink" title="2.4.1 父组件给子组件传值"></a>2.4.1 父组件给子组件传值</h3><p>head.vue通过@props来接受外界传递到组件内部的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">Javascript</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">这是头部组件</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">import &#123;</span><br><span class="line">Component,</span><br><span class="line">Vue,</span><br><span class="line">Prop</span><br><span class="line">&#125; from &quot;vue-property-decorator&quot;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;&#125;)</span><br><span class="line">export default class Head extends Vue &#123;</span><br><span class="line">&#x2F;*</span><br><span class="line">@Prop(options: (PropOptions | Constructor[] | Constructor) &#x3D; &#123;&#125;)</span><br><span class="line"></span><br><span class="line">@Prop装饰器接收一个参数，这个参数可以有三种写法：</span><br><span class="line">Constructor，例如String，Number，Boolean等，指定 prop 的类型；</span><br><span class="line">Constructor[]，指定 prop 的可选类型；</span><br><span class="line">PropOptions，可以使用以下选项：type，default，required，validator。</span><br><span class="line">*&#x2F;</span><br><span class="line">&#x2F;&#x2F;!表示非null 非undefined</span><br><span class="line">@Prop(String) readonly name!: string | undefined;</span><br><span class="line">@Prop(&#123;</span><br><span class="line">default: 30,</span><br><span class="line">type: Number</span><br><span class="line">&#125;) private age!: number;</span><br><span class="line">@Prop([String, Boolean]) private sex!: string | boolean;</span><br><span class="line"></span><br><span class="line">created()&#123;</span><br><span class="line">console.log(this.name,this.age,this.sex)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>其他组件在使用head组件的时候传递值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Javascript</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view class&#x3D;&quot;content&quot;&gt;</span><br><span class="line">&lt;Head :name&#x3D;&quot;name&quot; :age&#x3D;&quot;age&quot; :sex&#x3D;&quot;sex&quot;&gt;&lt;&#x2F;Head&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">import &#123;</span><br><span class="line">Component,</span><br><span class="line">Vue</span><br><span class="line">&#125; from &quot;vue-property-decorator&quot;;</span><br><span class="line">import Head from &#39;@&#x2F;components&#x2F;head.vue&#39;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">components:&#123;</span><br><span class="line">Head</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">export default class Index extends Vue &#123;</span><br><span class="line">private name &#x3D; &#39;张三&#39;;</span><br><span class="line">private age &#x3D; 1;</span><br><span class="line">private sex &#x3D; &#39;nan&#39;;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="2-4-2-子组件给父组件传值"><a href="#2-4-2-子组件给父组件传值" class="headerlink" title="2.4.2 子组件给父组件传值"></a>2.4.2 子组件给父组件传值</h3><p>通过@emit触发事件进行传递参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">Javascript</span><br><span class="line">&#x2F;&#x2F;父组件</span><br><span class="line">&lt;Head :name&#x3D;&quot;name&quot; :age&#x3D;&quot;age&quot; :sex&#x3D;&quot;sex&quot; @del&#x3D;&quot;delFromChild&quot; @add&#x3D;&quot;addFromChild&quot;&gt;&lt;&#x2F;Head&gt;</span><br><span class="line"></span><br><span class="line">addFromChild(data: any) &#123;</span><br><span class="line">    &#x2F;&#x2F; this.emitData &#x3D; data;</span><br><span class="line">    console.log(data, &quot;父组件 returnPersons&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">delFromChild(event: MouseEvent,data:any) &#123;</span><br><span class="line">    &#x2F;&#x2F; console.log(this.emitData);</span><br><span class="line">    console.log(event, &quot;父组件 delemit&quot;,data);</span><br><span class="line">&#125;</span><br><span class="line">Javascript</span><br><span class="line">&#x2F;&#x2F;子组件</span><br><span class="line"></span><br><span class="line">&lt;button @click&#x3D;&quot;del($event,&#123;id:1&#125;)&quot;&gt;点击触发del emit&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button @click&#x3D;&quot;add(&#123;name:&#39;张三&#39;&#125;)&quot;&gt;点击触发add emit&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">@Emit 装饰器接收一个可选参数，该参数是$Emit的第一个参数，充当事件名。如果没有提供这个参数，$Emit会将回调函数名的camelCase转为kebab-case，并将其作为事件名；</span><br><span class="line">@Emit会将回调函数的返回值作为第二个参数，如果返回值是一个Promise对象，$emit会在Promise对象被标记为resolved之后触发；</span><br><span class="line">@Emit的回调函数的参数，会放在其返回值之后，一起被$emit当做参数使用。</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;当前组件的del点击事件会触发delClick执行，delClick会触发父组件传递过来的del执行，就相当于之前的this.$emit()</span><br><span class="line">@Emit(&#39;del&#39;) private delClick(event: MouseEvent, data: any) &#123;&#125;</span><br><span class="line">del(event: MouseEvent, data: any) &#123;</span><br><span class="line">    this.delClick(event, data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 如果此处不设置别名字,则默认使用下面的函数命名,该函数既代表当前组件的点击事件，又代表触发父组件传递过来的add事件</span><br><span class="line">@Emit()</span><br><span class="line">add(p: &#123;</span><br><span class="line">    name: string</span><br><span class="line">    &#125;) &#123;</span><br><span class="line">    console.log(&quot;add&quot;)</span><br><span class="line">    &#x2F;&#x2F; 此处不return,则会默认使用括号里的参数p;</span><br><span class="line">    return p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-3-兄弟组件通讯"><a href="#2-4-3-兄弟组件通讯" class="headerlink" title="2.4.3 兄弟组件通讯"></a>2.4.3 兄弟组件通讯</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">uni.$emit(eventName,OBJECT)  触发全局的自定事件。</span><br><span class="line">uni.$on(eventName,callback)  监听全局的自定义事件。事件可以由 uni.$emit 触发，回调函数会接收所有传入事件触发函数的额外参数。</span><br><span class="line">uni.$off([eventName, callback])  移除全局自定义事件监听器</span><br><span class="line">Javascript</span><br><span class="line">&#x2F;&#x2F;1.head.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">&lt;text&gt;这是头部&lt;&#x2F;text&gt;</span><br><span class="line"></span><br><span class="line">&lt;button @click&#x3D;&quot;send&quot;&gt;点击向head发送数据&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">import &#123;</span><br><span class="line">Component,</span><br><span class="line">Vue</span><br><span class="line">&#125; from &quot;vue-property-decorator&quot;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;&#125;)</span><br><span class="line">export default class Head extends Vue &#123;</span><br><span class="line">send():void&#123;</span><br><span class="line">uni.$emit(&quot;eventType1&quot;,&quot;你好，head&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;2.foot.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">&lt;text&gt;这是尾巴&lt;&#x2F;text&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">import &#123;</span><br><span class="line">Component,</span><br><span class="line">Vue,</span><br><span class="line">Prop,</span><br><span class="line">Emit</span><br><span class="line">&#125; from &quot;vue-property-decorator&quot;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;&#125;)</span><br><span class="line">export default class Head extends Vue &#123;</span><br><span class="line">created()&#123;</span><br><span class="line">uni.$on(&quot;eventType1&quot;,(data:any)&#x3D;&gt;&#123;</span><br><span class="line">console.log(&quot;收到来自foot的数据&quot;,data)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;index.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view class&#x3D;&quot;content&quot;&gt;</span><br><span class="line">&lt;Head&gt;&lt;&#x2F;Head&gt;</span><br><span class="line">&lt;Foot&gt;&lt;&#x2F;Foot&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">import &#123;</span><br><span class="line">Component,</span><br><span class="line">Vue</span><br><span class="line">&#125; from &quot;vue-property-decorator&quot;;</span><br><span class="line">import Head from &#39;@&#x2F;components&#x2F;head.vue&#39;</span><br><span class="line">import Foot from &#39;@&#x2F;components&#x2F;foot.vue&#39;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">components: &#123;</span><br><span class="line">Head,</span><br><span class="line">Foot</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">export default class Index extends Vue &#123;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h1 id="3-全局配置和页面配置"><a href="#3-全局配置和页面配置" class="headerlink" title="3 全局配置和页面配置"></a>3 全局配置和页面配置</h1><h2 id="3-1-通过globalStyle进行全局配置"><a href="#3-1-通过globalStyle进行全局配置" class="headerlink" title="3.1 通过globalStyle进行全局配置"></a>3.1 通过globalStyle进行全局配置</h2><p>用于设置应用的状态栏、导航条、标题、窗口背景色等。<a href="https://uniapp.dcloud.io/collocation/pages?id=globalstyle">详细文档</a></p><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>navigationBarBackgroundColor</td><td>HexColor</td><td>#F7F7F7</td><td>导航栏背景颜色（同状态栏背景色）</td></tr><tr><td>navigationBarTextStyle</td><td>String</td><td>white</td><td>导航栏标题颜色及状态栏前景颜色，仅支持 black/white</td></tr><tr><td>navigationBarTitleText</td><td>String</td><td></td><td>导航栏标题文字内容</td></tr><tr><td>backgroundColor</td><td>HexColor</td><td>#ffffff</td><td>窗口的背景色</td></tr><tr><td>backgroundTextStyle</td><td>String</td><td>dark</td><td>下拉 loading 的样式，仅支持 dark / light</td></tr><tr><td>enablePullDownRefresh</td><td>Boolean</td><td>false</td><td>是否开启下拉刷新，详见<a href="https://uniapp.dcloud.io/use?id=%E9%A1%B5%E9%9D%A2%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">页面生命周期</a>。</td></tr><tr><td>onReachBottomDistance</td><td>Number</td><td>50</td><td>页面上拉触底事件触发时距页面底部距离，单位只支持px，详见<a href="https://uniapp.dcloud.io/use?id=%E9%A1%B5%E9%9D%A2%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">页面生命周期</a></td></tr></tbody></table><h2 id="3-2-创建新的message页面"><a href="#3-2-创建新的message页面" class="headerlink" title="3.2 创建新的message页面"></a>3.2 创建新的message页面</h2><p>右键pages新建message目录，在message目录下右键新建.vue文件,并选择基本模板</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Html</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">这是信息页面</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h2 id="3-3-通过pages来配置页面"><a href="#3-3-通过pages来配置页面" class="headerlink" title="3.3 通过pages来配置页面"></a>3.3 通过pages来配置页面</h2><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>path</td><td>String</td><td></td><td>配置页面路径</td></tr><tr><td>style</td><td>Object</td><td></td><td>配置页面窗口表现，配置项参考 <a href="https://uniapp.dcloud.io/collocation/pages?id=style">pageStyle</a></td></tr></tbody></table><p>pages数组数组中第一项表示应用启动页</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Html</span><br><span class="line">&quot;pages&quot;: [ </span><br><span class="line">&#123;</span><br><span class="line">&quot;path&quot;:&quot;pages&#x2F;message&#x2F;message&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&quot;path&quot;: &quot;pages&#x2F;index&#x2F;index&quot;,</span><br><span class="line">&quot;style&quot;: &#123;</span><br><span class="line">&quot;navigationBarTitleText&quot;: &quot;uni-app&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>通过style修改页面的标题和导航栏背景色，并且设置h5下拉刷新的特有样式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Js</span><br><span class="line">&quot;pages&quot;: [ &#x2F;&#x2F;pages数组中第一项表示应用启动页，参考：https:&#x2F;&#x2F;uniapp.dcloud.io&#x2F;collocation&#x2F;pages</span><br><span class="line">&#123;</span><br><span class="line">&quot;path&quot;:&quot;pages&#x2F;message&#x2F;message&quot;,</span><br><span class="line">&quot;style&quot;: &#123;</span><br><span class="line">&quot;navigationBarBackgroundColor&quot;: &quot;#007AFF&quot;,</span><br><span class="line">&quot;navigationBarTextStyle&quot;: &quot;white&quot;,</span><br><span class="line">&quot;enablePullDownRefresh&quot;: true,</span><br><span class="line">&quot;disableScroll&quot;: true,</span><br><span class="line">&quot;h5&quot;: &#123;</span><br><span class="line">&quot;pullToRefresh&quot;: &#123;</span><br><span class="line">&quot;color&quot;: &quot;#007AFF&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="3-4-配置tabbar"><a href="#3-4-配置tabbar" class="headerlink" title="3.4 配置tabbar"></a>3.4 配置tabbar</h2><p>如果应用是一个多 tab 应用，可以通过 tabBar 配置项指定 tab 栏的表现，以及 tab 切换时显示的对应页。</p><p><strong>Tips</strong></p><ul><li>当设置 position 为 top 时，将不会显示 icon</li><li>tabBar 中的 list 是一个数组，只能配置最少2个、最多5个 tab，tab 按数组的顺序排序。</li></ul><p><strong>属性说明：</strong></p><table><thead><tr><th>属性</th><th>类型</th><th>必填</th><th>默认值</th><th>描述</th><th>平台差异说明</th></tr></thead><tbody><tr><td>color</td><td>HexColor</td><td>是</td><td></td><td>tab 上的文字默认颜色</td><td></td></tr><tr><td>selectedColor</td><td>HexColor</td><td>是</td><td></td><td>tab 上的文字选中时的颜色</td><td></td></tr><tr><td>backgroundColor</td><td>HexColor</td><td>是</td><td></td><td>tab 的背景色</td><td></td></tr><tr><td>borderStyle</td><td>String</td><td>否</td><td>black</td><td>tabbar 上边框的颜色，仅支持 black/white</td><td>App 2.3.4+ 支持其他颜色值</td></tr><tr><td>list</td><td>Array</td><td>是</td><td></td><td>tab 的列表，详见 list 属性说明，最少2个、最多5个 tab</td><td></td></tr><tr><td>position</td><td>String</td><td>否</td><td>bottom</td><td>可选值 bottom、top</td><td>top 值仅微信小程序支持</td></tr></tbody></table><p>其中 list 接收一个数组，数组中的每个项都是一个对象，其属性值如下：</p><table><thead><tr><th>属性</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>pagePath</td><td>String</td><td>是</td><td>页面路径，必须在 pages 中先定义</td></tr><tr><td>text</td><td>String</td><td>是</td><td>tab 上按钮文字，在 5+APP 和 H5 平台为非必填。例如中间可放一个没有文字的+号图标</td></tr><tr><td>iconPath</td><td>String</td><td>否</td><td>图片路径，icon 大小限制为40kb，建议尺寸为 81px * 81px，当 postion 为 top 时，此参数无效，不支持网络图片，不支持字体图标</td></tr><tr><td>selectedIconPath</td><td>String</td><td>否</td><td>选中时的图片路径，icon 大小限制为40kb，建议尺寸为 81px * 81px ，当 postion 为 top 时，此参数无效</td></tr></tbody></table><p>案例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Js</span><br><span class="line">&quot;tabBar&quot;: &#123;</span><br><span class="line">&quot;list&quot;: [</span><br><span class="line">&#123;</span><br><span class="line">&quot;text&quot;: &quot;首页&quot;,</span><br><span class="line">&quot;pagePath&quot;:&quot;pages&#x2F;index&#x2F;index&quot;,</span><br><span class="line">&quot;iconPath&quot;:&quot;static&#x2F;tabs&#x2F;home.png&quot;,</span><br><span class="line">&quot;selectedIconPath&quot;:&quot;static&#x2F;tabs&#x2F;home-active.png&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&quot;text&quot;: &quot;信息&quot;,</span><br><span class="line">&quot;pagePath&quot;:&quot;pages&#x2F;message&#x2F;message&quot;,</span><br><span class="line">&quot;iconPath&quot;:&quot;static&#x2F;tabs&#x2F;message.png&quot;,</span><br><span class="line">&quot;selectedIconPath&quot;:&quot;static&#x2F;tabs&#x2F;message-active.png&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&quot;text&quot;: &quot;我们&quot;,</span><br><span class="line">&quot;pagePath&quot;:&quot;pages&#x2F;contact&#x2F;contact&quot;,</span><br><span class="line">&quot;iconPath&quot;:&quot;static&#x2F;tabs&#x2F;contact.png&quot;,</span><br><span class="line">&quot;selectedIconPath&quot;:&quot;static&#x2F;tabs&#x2F;contact-active.png&quot;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-5-condition启动模式配置"><a href="#3-5-condition启动模式配置" class="headerlink" title="3.5 condition启动模式配置"></a>3.5 condition启动模式配置</h2><p>启动模式配置，仅开发期间生效，用于模拟直达页面的场景，如：小程序转发后，用户点击所打开的页面。</p><p>记得要在微信开发工具里选中你要调试的模式</p><p><strong>属性说明：</strong></p><table><thead><tr><th>属性</th><th>类型</th><th>是否必填</th><th>描述</th></tr></thead><tbody><tr><td>current</td><td>Number</td><td>是</td><td>当前激活的模式，list节点的索引值</td></tr><tr><td>list</td><td>Array</td><td>是</td><td>启动模式列表</td></tr></tbody></table><p><strong>list说明：</strong></p><table><thead><tr><th>属性</th><th>类型</th><th>是否必填</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>String</td><td>是</td><td>启动模式名称</td></tr><tr><td>path</td><td>String</td><td>是</td><td>启动页面路径</td></tr><tr><td>query</td><td>String</td><td>否</td><td>启动参数，可在页面的 <a href="https://uniapp.dcloud.io/use?id=%E9%A1%B5%E9%9D%A2%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">onLoad</a> 函数里获得</td></tr></tbody></table><h1 id="4-uni基础组件的基本使用"><a href="#4-uni基础组件的基本使用" class="headerlink" title="4 uni基础组件的基本使用"></a>4 uni基础组件的基本使用</h1><p>uni-app提供了丰富的基础组件给开发者，开发者可以像搭积木一样，组合各种组件拼接称自己的应用</p><p>uni-app中的组件，就像 <code>HTML</code> 中的 <code>div</code> 、<code>p</code>、<code>span</code> 等标签的作用一样，用于搭建页面的基础结构</p><h2 id="4-1-text文本组件的用法"><a href="#4-1-text文本组件的用法" class="headerlink" title="4.1 text文本组件的用法"></a>4.1 text文本组件的用法</h2><h4 id="001-text-组件的属性"><a href="#001-text-组件的属性" class="headerlink" title="001 - text 组件的属性"></a>001 - text 组件的属性</h4><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>selectable</td><td>boolean</td><td>false</td><td>否</td><td>文本是否可选</td></tr><tr><td>space</td><td>string</td><td>.</td><td>否</td><td>显示连续空格，可选参数：<code>ensp</code>、<code>emsp</code>、<code>nbsp</code></td></tr><tr><td>decode</td><td>boolean</td><td>false</td><td>否</td><td>是否解码</td></tr></tbody></table><ul><li><code>text</code> 组件相当于行内标签、在同一行显示</li><li>除了文本节点以外的其他节点都无法长按选中</li></ul><h4 id="002-代码案例"><a href="#002-代码案例" class="headerlink" title="002 - 代码案例"></a>002 - 代码案例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Html</span><br><span class="line">&lt;view&gt;</span><br><span class="line">  &lt;!-- 长按文本是否可选 --&gt;</span><br><span class="line">  &lt;text selectable&#x3D;&#39;true&#39;&gt;来了老弟&lt;&#x2F;text&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line"></span><br><span class="line">&lt;view&gt;</span><br><span class="line">  &lt;!-- 显示连续空格的方式 --&gt;</span><br><span class="line">  &lt;view&gt;</span><br><span class="line">    &lt;text space&#x3D;&#39;ensp&#39;&gt;来了  老弟&lt;&#x2F;text&gt;</span><br><span class="line">  &lt;&#x2F;view&gt;</span><br><span class="line">  &lt;view&gt;</span><br><span class="line">    &lt;text space&#x3D;&#39;emsp&#39;&gt;来了  老弟&lt;&#x2F;text&gt;</span><br><span class="line">  &lt;&#x2F;view&gt;</span><br><span class="line">  &lt;view&gt;</span><br><span class="line">    &lt;text space&#x3D;&#39;nbsp&#39;&gt;来了  老弟&lt;&#x2F;text&gt;</span><br><span class="line">  &lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line"></span><br><span class="line">&lt;view&gt;</span><br><span class="line">  &lt;text&gt;skyblue&lt;&#x2F;text&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line"></span><br><span class="line">&lt;view&gt;</span><br><span class="line">  &lt;!-- 是否解码 --&gt;</span><br><span class="line">  &lt;text decode&#x3D;&#39;true&#39;&gt;&amp;nbsp; &lt; &gt; &amp; &amp;apos; &amp;ensp; &amp;emsp;&lt;&#x2F;text&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br></pre></td></tr></table></figure><h2 id="4-2-view视图容器组件的用法"><a href="#4-2-view视图容器组件的用法" class="headerlink" title="4.2 view视图容器组件的用法"></a>4.2 view视图容器组件的用法</h2><blockquote><p>View 视图容器， 类似于 HTML 中的 div</p></blockquote><h4 id="001-组件的属性"><a href="#001-组件的属性" class="headerlink" title="001 - 组件的属性"></a>001 - 组件的属性</h4><p><a href="https://ehbhgh.github.io/2019/11/29/%E5%88%9D%E5%A7%8Buniapp/images/2view.png"><img src="https://ehbhgh.github.io/2019/11/29/%E5%88%9D%E5%A7%8Buniapp/images/2view.png" alt="img"></a></p><h4 id="002-代码案例-1"><a href="#002-代码案例-1" class="headerlink" title="002 - 代码案例"></a>002 - 代码案例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Html</span><br><span class="line">&lt;view class&#x3D;&quot;box2&quot; hover-class&#x3D;&quot;box2_active&quot;&gt;</span><br><span class="line">  &lt;view class&#x3D;&#39;box1&#39; hover-class&#x3D;&#39;active&#39; hover-stop-propagation :hover-start-time&#x3D;&quot;2000&quot; :hover-stay-time&#x3D;&#39;2000&#39;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br></pre></td></tr></table></figure><h2 id="4-3-button按钮组件的用法"><a href="#4-3-button按钮组件的用法" class="headerlink" title="4.3 button按钮组件的用法"></a>4.3 button按钮组件的用法</h2><h4 id="001-组件的属性-1"><a href="#001-组件的属性-1" class="headerlink" title="001 - 组件的属性"></a>001 - 组件的属性</h4><table><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>size</td><td>String</td><td>default</td><td>按钮的大小</td></tr><tr><td>type</td><td>String</td><td>default</td><td>按钮的样式类型</td></tr><tr><td>plain</td><td>Boolean</td><td>false</td><td>按钮是否镂空，背景色透明</td></tr><tr><td>disabled</td><td>Boolean</td><td>false</td><td>是否按钮</td></tr><tr><td>loading</td><td>Boolean</td><td>false</td><td>名称是否带 loading t图标</td></tr></tbody></table><ul><li><code>button</code> 组件默认独占一行，设置 <code>size</code> 为 <code>mini</code> 时可以在一行显示多个</li></ul><h4 id="002-案例代码"><a href="#002-案例代码" class="headerlink" title="002 - 案例代码"></a>002 - 案例代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Html</span><br><span class="line">&lt;button size&#x3D;&#39;mini&#39; type&#x3D;&#39;primary&#39;&gt;前端&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;button size&#x3D;&#39;mini&#39; type&#x3D;&#39;default&#39; disabled&#x3D;&#39;true&#39;&gt;前端&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;button size&#x3D;&#39;mini&#39; type&#x3D;&#39;warn&#39; loading&#x3D;&#39;true&#39;&gt;前端&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure><h3 id="1-7-4-image组件的使用"><a href="#1-7-4-image组件的使用" class="headerlink" title="1.7.4 image组件的使用"></a>1.7.4 image组件的使用</h3><p><a href="https://uniapp.dcloud.io/component/image?id=image">image</a>图片。</p><table><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th><th>平台差异说明</th></tr></thead><tbody><tr><td>src</td><td>String</td><td></td><td>图片资源地址</td><td></td></tr><tr><td>mode</td><td>String</td><td>‘scaleToFill’</td><td>图片裁剪、缩放的模式</td><td></td></tr></tbody></table><p><strong>Tips</strong></p><ul><li><code>&lt;image&gt;</code> 组件默认宽度 300px、高度 225px；</li><li><code>src</code> 仅支持相对路径、绝对路径，支持 base64 码；</li><li>页面结构复杂，css样式太多的情况，使用 image 可能导致样式生效较慢，出现 “闪一下” 的情况，此时设置 <code>image&#123;will-change: transform&#125;</code> ,可优化此问题。</li></ul><h1 id="5-uni-app中的样式"><a href="#5-uni-app中的样式" class="headerlink" title="5 uni-app中的样式"></a>5 uni-app中的样式</h1><ul><li><p>rpx 即响应式px，一种根据屏幕宽度自适应的动态单位。以750宽的屏幕为基准，750rpx恰好为屏幕宽度。屏幕变宽，rpx 实际显示效果会等比放大。</p></li><li><p>使用<code>@import</code>语句可以导入外联样式表，<code>@import</code>后跟需要导入的外联样式表的相对路径，用<code>;</code>表示语句结束</p></li><li><p>支持基本常用的选择器class、id、element等</p></li><li><p>在 <code>uni-app</code> 中不能使用 <code>*</code> 选择器。</p></li><li><p><code>page</code> 相当于 <code>body</code> 节点</p></li><li><p>定义在 App.vue 中的样式为全局样式，作用于每一个页面。在 pages 目录下 的 vue 文件中定义的样式（scoped）为局部样式，只作用在对应的页面，并会覆盖 App.vue 中相同的选择器。</p></li><li><p><code>uni-app</code> 支持使用字体图标，使用方式与普通 <code>web</code> 项目相同，需要注意以下几点：</p><ul><li><p>字体文件小于 40kb，<code>uni-app</code> 会自动将其转化为 base64 格式；</p></li><li><p>字体文件大于等于 40kb， 需开发者自己转换，否则使用将不生效；</p></li><li><p>字体文件的引用路径推荐使用以 ~@ 开头的绝对路径。</p></li><li><p><a href="https://www.jianshu.com/p/f423b4e937af">https://www.jianshu.com/p/f423b4e937af</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">@font-face &#123;</span><br><span class="line">    font-family: test1-icon;</span><br><span class="line">    src: url(&#39;~@&#x2F;static&#x2F;iconfont.ttf&#39;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>如何使用scss或者less</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br><span class="line">&#x2F;&#x2F;1.安装插件</span><br><span class="line">npm install less less-loader --save</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;2.vue文件中使用 &lt;style lang&#x3D;&quot;less&quot;&gt;</span><br></pre></td></tr></table></figure></li></ul><h1 id="6-uni的生命周期"><a href="#6-uni的生命周期" class="headerlink" title="6 uni的生命周期"></a>6 uni的生命周期</h1><h2 id="6-1-应用的生命周期"><a href="#6-1-应用的生命周期" class="headerlink" title="6.1 应用的生命周期"></a>6.1 应用的生命周期</h2><p>生命周期的概念：一个对象从创建、运行、销毁的整个过程被成为生命周期。</p><p>生命周期函数：在生命周期中每个阶段会伴随着每一个函数的触发，这些函数被称为生命周期函数</p><p><code>uni-app</code> 支持如下应用生命周期函数：</p><table><thead><tr><th>函数名</th><th>说明</th></tr></thead><tbody><tr><td>onLaunch</td><td>当<code>uni-app</code> 初始化完成时触发（全局只触发一次）</td></tr><tr><td>onShow</td><td>当 <code>uni-app</code> 启动，或从后台进入前台显示</td></tr><tr><td>onHide</td><td>当 <code>uni-app</code> 从前台进入后台</td></tr><tr><td>onError</td><td>当 <code>uni-app</code> 报错时触发</td></tr></tbody></table><h2 id="6-2-页面的生命周期"><a href="#6-2-页面的生命周期" class="headerlink" title="6.2 页面的生命周期"></a>6.2 页面的生命周期</h2><p><code>uni-app</code> 支持如下页面生命周期函数：</p><table><thead><tr><th>函数名</th><th>说明</th><th>平台差异说明</th><th>最低版本</th></tr></thead><tbody><tr><td>onLoad</td><td>监听页面加载，其参数为上个页面传递的数据，参数类型为Object（用于页面传参），参考<a href="https://uniapp.dcloud.io/api/router?id=navigateto">示例</a></td><td></td><td></td></tr><tr><td>onShow</td><td>监听页面显示。页面每次出现在屏幕上都触发，包括从下级页面点返回露出当前页面</td><td></td><td></td></tr><tr><td>onReady</td><td>监听页面初次渲染完成。</td><td></td><td></td></tr><tr><td>onHide</td><td>监听页面隐藏</td><td></td><td></td></tr><tr><td>onUnload</td><td>监听页面卸载</td><td></td><td></td></tr></tbody></table><h1 id="7-uni相关API"><a href="#7-uni相关API" class="headerlink" title="7 uni相关API"></a>7 uni相关API</h1><h2 id="7-1-下拉刷新"><a href="#7-1-下拉刷新" class="headerlink" title="7.1 下拉刷新"></a>7.1 下拉刷新</h2><h3 id="7-1-1-开启下拉刷新"><a href="#7-1-1-开启下拉刷新" class="headerlink" title="7.1.1 开启下拉刷新"></a>7.1.1 开启下拉刷新</h3><p>在uni-app中有两种方式开启下拉刷新</p><ul><li>需要在 <code>pages.json</code> 里，找到的当前页面的pages节点，并在 <code>style</code> 选项中开启 <code>enablePullDownRefresh</code></li><li>通过调用uni.startPullDownRefresh方法来开启下拉刷新</li></ul><h4 id="a-通过配置文件开启"><a href="#a-通过配置文件开启" class="headerlink" title="a) 通过配置文件开启"></a>a) 通过配置文件开启</h4><p>通过pages.json文件中找到当前页面的pages节点，并在 <code>style</code> 选项中开启 <code>enablePullDownRefresh</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Js</span><br><span class="line">&#123;</span><br><span class="line">  &quot;path&quot;:&quot;pages&#x2F;list&#x2F;list&quot;,</span><br><span class="line">    &quot;style&quot;:&#123;</span><br><span class="line">      &quot;enablePullDownRefresh&quot;: true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="b-通过API开启"><a href="#b-通过API开启" class="headerlink" title="b) 通过API开启"></a>b) 通过API开启</h4><p><a href="https://uniapp.dcloud.io/api/ui/pulldown">api文档</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Html</span><br><span class="line">uni.startPullDownRefresh(&#123;&#125;)</span><br></pre></td></tr></table></figure><h3 id="7-1-2-监听下拉刷新"><a href="#7-1-2-监听下拉刷新" class="headerlink" title="7.1.2 监听下拉刷新"></a>7.1.2 监听下拉刷新</h3><p>通过onPullDownRefresh可以监听到下拉刷新的动作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Js</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">这是信息页面</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">import &#123;</span><br><span class="line">Component,</span><br><span class="line">Vue</span><br><span class="line">&#125; from &quot;vue-property-decorator&quot;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;&#125;)</span><br><span class="line">export default class Index extends Vue &#123;</span><br><span class="line"></span><br><span class="line">startPull(): void &#123;</span><br><span class="line">uni.startPullDownRefresh(&#123;&#125;);</span><br><span class="line">&#125;</span><br><span class="line">onPullDownRefresh(): void &#123;</span><br><span class="line">console.log(&#39;触发下拉刷新了&#39;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h3 id="7-1-3-关闭下拉刷新"><a href="#7-1-3-关闭下拉刷新" class="headerlink" title="7.1.3 关闭下拉刷新"></a>7.1.3 关闭下拉刷新</h3><p>uni.stopPullDownRefresh() 停止当前页面下拉刷新</p><h2 id="7-2-上拉加载"><a href="#7-2-上拉加载" class="headerlink" title="7.2 上拉加载"></a>7.2 上拉加载</h2><p>通过在pages.json文件中找到当前页面的pages节点下style中配置onReachBottomDistance可以设置距离底部开启加载的距离，默认为50px</p><p>通过onReachBottom监听到触底的行为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">Js</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">&lt;view v-for&#x3D;&quot;(item,index) in arr&quot; :key&#x3D;&quot;index&quot; class&#x3D;&quot;item&quot;&gt;</span><br><span class="line">&#123;&#123;item&#125;&#125;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">import &#123;</span><br><span class="line">Component,</span><br><span class="line">Vue</span><br><span class="line">&#125; from &quot;vue-property-decorator&quot;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;&#125;)</span><br><span class="line">export default class Index extends Vue &#123;</span><br><span class="line">private arr &#x3D; [&#39;前端&#39;, &#39;java&#39;, &#39;ui&#39;, &#39;大数据&#39;, &#39;前端&#39;, &#39;java&#39;, &#39;ui&#39;, &#39;大数据&#39;,&#39;ui&#39;, &#39;大数据&#39;];</span><br><span class="line">startPull(): void &#123;</span><br><span class="line">uni.startPullDownRefresh(&#123;&#125;);</span><br><span class="line">&#125;</span><br><span class="line">onPullDownRefresh(): void &#123;</span><br><span class="line">console.log(&#39;触发下拉刷新了&#39;)</span><br><span class="line">&#125;</span><br><span class="line">onReachBottom() &#123;</span><br><span class="line">console.log(&#39;触底了&#39;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang&#x3D;&quot;less&quot;&gt;</span><br><span class="line">.item &#123;</span><br><span class="line">height: 100px;</span><br><span class="line">line-height: 100px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;App.vue中添加</span><br><span class="line">&lt;style&gt;</span><br><span class="line">page&#123;</span><br><span class="line">overflow-y:scroll!important;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h2 id="7-3-网络请求"><a href="#7-3-网络请求" class="headerlink" title="7.3 网络请求"></a>7.3 网络请求</h2><p>在uni中可以调用uni.request方法进行请求网络请求</p><p>需要注意的是：在小程序中网络相关的 API 在使用前需要配置域名白名单。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Javascript</span><br><span class="line">uni.request(&#123;</span><br><span class="line">    url: &#39;http:&#x2F;&#x2F;localhost&#x2F;myUniApp&#x2F;php&#x2F;login.php&#39;, &#x2F;&#x2F;仅为示例，并非真实接口地址。</span><br><span class="line">    data: &#123;&#x2F;&#x2F;参数</span><br><span class="line">        rawData: rawData,</span><br><span class="line">        code: loginRes.code</span><br><span class="line">    &#125;,</span><br><span class="line">    header: &#123;</span><br><span class="line">        &#39;custom-header&#39;: &#39;hello&#39; &#x2F;&#x2F;自定义请求头信息</span><br><span class="line">    &#125;,</span><br><span class="line">    method:&#39;POST&#39;&#x2F;&#x2F;请求方式  或GET</span><br><span class="line">    success: res &#x3D;&gt; &#123;</span><br><span class="line">        console.log(&#39;返回&#39;, res.data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>请求示例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">Js</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">&lt;button @click&#x3D;&quot;sendGet&quot;&gt;发送请求&lt;&#x2F;button&gt;</span><br><span class="line">&lt;view v-if&#x3D;&quot;movieData&quot;&gt;</span><br><span class="line">&lt;text&gt;电影名字：&#123;&#123;movieData.originalName&#125;&#125;&lt;&#x2F;text&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">导演：</span><br><span class="line">&lt;text v-for&#x3D;&quot;item in movieData.director&quot;&gt;</span><br><span class="line">&#123;&#123;item.data[0].name&#125;&#125;</span><br><span class="line">&lt;&#x2F;text&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;view&gt;电影信息</span><br><span class="line">&#123;&#123;movieData.data[0].genre&#125;&#125;</span><br><span class="line">&#123;&#123;movieData.data[0].language&#125;&#125;</span><br><span class="line">&#123;&#123;movieData.data[0].description&#125;&#125;</span><br><span class="line">&#123;&#123;movieData.data[0].country&#125;&#125;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">import &#123;</span><br><span class="line">Component,</span><br><span class="line">Vue</span><br><span class="line">&#125; from &quot;vue-property-decorator&quot;;</span><br><span class="line"></span><br><span class="line">type MovieBasicType &#x3D; &#123;</span><br><span class="line">genre:string</span><br><span class="line">name:string</span><br><span class="line">lang:string</span><br><span class="line">language:string</span><br><span class="line">poster:string</span><br><span class="line">description:string</span><br><span class="line">country:string</span><br><span class="line">&#125;</span><br><span class="line">type MovieDirectorType &#x3D; &#123;</span><br><span class="line">name:string,</span><br><span class="line">lang:string</span><br><span class="line">&#125;</span><br><span class="line">type MovieDataType &#x3D; &#123;</span><br><span class="line">id?:string,</span><br><span class="line">originalName?:string,</span><br><span class="line">duration?:number,</span><br><span class="line">data?:MovieBasicType[],</span><br><span class="line">director?:&#123;data:MovieDirectorType[]&#125;[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Component(&#123;&#125;)</span><br><span class="line">export default class Index extends Vue &#123;</span><br><span class="line">private movieData:MovieDataType|null &#x3D; null</span><br><span class="line"></span><br><span class="line">sendGet():void &#123;</span><br><span class="line">uni.request(&#123;</span><br><span class="line">url: &#39;https:&#x2F;&#x2F;movie.querydata.org&#x2F;api?id&#x3D;1302425&#39;,</span><br><span class="line">success:(res) &#x3D;&gt;&#123;</span><br><span class="line">const resobj &#x3D; res.data;</span><br><span class="line">this.movieData &#x3D; resobj as MovieDataType;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;uni-app中对ts的支持只是一般，没有非常严格</span><br></pre></td></tr></table></figure><h2 id="7-4-数据缓存"><a href="#7-4-数据缓存" class="headerlink" title="7.4 数据缓存"></a>7.4 数据缓存</h2><p><a href="https://uniapp.dcloud.io/api/storage/storage?id=setstorage">官方文档</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">Javascript</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">&lt;button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;setStor&quot;&gt;存储数据-异步&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;setStorSync&quot;&gt;存储数据-同步&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;getStorage&quot;&gt;获取数据&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;getStorageSync&quot;&gt;获取数据-同步&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;removeStorage&quot;&gt;删除数据&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;removeStorageSync&quot;&gt;删除数据-同步&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">import &#123;</span><br><span class="line">Component,</span><br><span class="line">Vue</span><br><span class="line">&#125; from &quot;vue-property-decorator&quot;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;&#125;)</span><br><span class="line">export default class Index extends Vue &#123;</span><br><span class="line"></span><br><span class="line">setStor(): void &#123;</span><br><span class="line">uni.setStorage(&#123;</span><br><span class="line">key: &#39;id&#39;,</span><br><span class="line">data: 100,</span><br><span class="line">success() &#123;</span><br><span class="line">console.log(&#39;存储成功&#39;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">setStorSync(): void &#123;</span><br><span class="line">uni.setStorageSync(&#39;id2&#39;, 100)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getStorage(): void &#123;</span><br><span class="line">uni.getStorage(&#123;</span><br><span class="line">key: &#39;id&#39;,</span><br><span class="line">success: res &#x3D;&gt; &#123;</span><br><span class="line">console.log(res)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">getStorageSync(): void &#123;</span><br><span class="line">const id &#x3D; uni.getStorageSync(&#39;id&#39;)</span><br><span class="line">console.log(id)</span><br><span class="line">&#125;</span><br><span class="line">removeStorage(): void &#123;</span><br><span class="line">uni.removeStorage(&#123;</span><br><span class="line">key: &#39;id&#39;,</span><br><span class="line">success: function() &#123;</span><br><span class="line">console.log(&#39;删除成功&#39;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">removeStorageSync(): void &#123;</span><br><span class="line">uni.removeStorageSync(&#39;id&#39;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h2 id="7-5-上传图片、预览图片"><a href="#7-5-上传图片、预览图片" class="headerlink" title="7.5 上传图片、预览图片"></a>7.5 上传图片、预览图片</h2><h3 id="7-5-1-上传图片"><a href="#7-5-1-上传图片" class="headerlink" title="7.5.1 上传图片"></a>7.5.1 上传图片</h3><p>uni.chooseImage方法从本地相册选择图片或使用相机拍照。</p><p>案例代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Html</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">&lt;button @click&#x3D;&quot;chooseImg&quot; type&#x3D;&quot;primary&quot;&gt;上传图片&lt;&#x2F;button&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">&lt;image v-for&#x3D;&quot;item in imgArr&quot; :src&#x3D;&quot;item&quot; :key&#x3D;&quot;index&quot;&gt;&lt;&#x2F;image&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">import &#123;</span><br><span class="line">Component,</span><br><span class="line">Vue</span><br><span class="line">&#125; from &quot;vue-property-decorator&quot;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;&#125;)</span><br><span class="line">export default class Index extends Vue &#123;</span><br><span class="line">private imgArr &#x3D; []</span><br><span class="line"></span><br><span class="line">chooseImg(): void &#123;</span><br><span class="line">uni.chooseImage(&#123;</span><br><span class="line">count: 9,</span><br><span class="line">success: res &#x3D;&gt; &#123;</span><br><span class="line">this.imgArr &#x3D; res.tempFilePaths</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h3 id="7-5-2-预览图片"><a href="#7-5-2-预览图片" class="headerlink" title="7.5.2 预览图片"></a>7.5.2 预览图片</h3><p>结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Html</span><br><span class="line">&lt;view&gt;</span><br><span class="line">&lt;image v-for&#x3D;&quot;item in imgArr&quot; :src&#x3D;&quot;item&quot; @click&#x3D;&quot;previewImg(item)&quot; :key&#x3D;&quot;item&quot;&gt;&lt;&#x2F;image&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br></pre></td></tr></table></figure><p>预览图片的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Js</span><br><span class="line">previewImg (current:any):void &#123;</span><br><span class="line">  uni.previewImage(&#123;</span><br><span class="line">    urls: this.imgArr,</span><br><span class="line">    current</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-6-uni中的导航跳转"><a href="#7-6-uni中的导航跳转" class="headerlink" title="7.6 uni中的导航跳转"></a>7.6 uni中的导航跳转</h2><h3 id="7-6-1-利用navigator进行跳转"><a href="#7-6-1-利用navigator进行跳转" class="headerlink" title="7.6.1 利用navigator进行跳转"></a>7.6.1 利用navigator进行跳转</h3><p>navigator详细文档：<a href="https://uniapp.dcloud.io/component/navigator">文档地址</a></p><p>跳转到普通页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Html</span><br><span class="line">&lt;navigator url&#x3D;&quot;&#x2F;pages&#x2F;about&#x2F;about&quot; hover-class&#x3D;&quot;navigator-hover&quot;&gt;</span><br><span class="line">  &lt;button type&#x3D;&quot;default&quot;&gt;跳转到关于页面&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;navigator&gt;</span><br></pre></td></tr></table></figure><p>跳转到tabbar页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Html</span><br><span class="line">&lt;navigator url&#x3D;&quot;&#x2F;pages&#x2F;message&#x2F;message&quot; open-type&#x3D;&quot;switchTab&quot;&gt;</span><br><span class="line">  &lt;button type&#x3D;&quot;default&quot;&gt;跳转到message页面&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;navigator&gt;</span><br></pre></td></tr></table></figure><h3 id="7-6-2-利用编程式导航进行跳转"><a href="#7-6-2-利用编程式导航进行跳转" class="headerlink" title="7.6.2 利用编程式导航进行跳转"></a>7.6.2 利用编程式导航进行跳转</h3><p><a href="https://ehbhgh.github.io/2019/11/29/%E5%88%9D%E5%A7%8Buniapp/[uni.navigateTo](https://uniapp.dcloud.io/api/router?id=navigateto)">导航跳转文档</a></p><h3 id="7-6-3-利用navigateTo进行导航跳转"><a href="#7-6-3-利用navigateTo进行导航跳转" class="headerlink" title="7.6.3 利用navigateTo进行导航跳转"></a>7.6.3 利用navigateTo进行导航跳转</h3><p>保留当前页面，跳转到应用内的某个页面，使用<code>uni.navigateBack</code>可以返回到原页面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Html</span><br><span class="line">&lt;button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;goAbout&quot;&gt;跳转到关于页面&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure><p>通过navigateTo方法进行跳转到普通页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Js</span><br><span class="line">goAbout ():void &#123;</span><br><span class="line">  uni.navigateTo(&#123;</span><br><span class="line">    url: &#39;&#x2F;pages&#x2F;about&#x2F;about&#39;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>通过switchTab跳转到tabbar页面</strong></p><p>跳转到tabbar页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Html</span><br><span class="line">&lt;button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;goMessage&quot;&gt;跳转到message页面&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure><p>通过switchTab方法进行跳转</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Js</span><br><span class="line">goMessage ():void  &#123;</span><br><span class="line">  uni.switchTab(&#123;</span><br><span class="line">    url: &#39;&#x2F;pages&#x2F;message&#x2F;message&#39;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>redirectTo进行跳转</strong></p><p>关闭当前页面，跳转到应用内的某个页面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Html</span><br><span class="line">&lt;!-- template --&gt;</span><br><span class="line">&lt;button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;goMessage&quot;&gt;跳转到message页面&lt;&#x2F;button&gt;</span><br><span class="line">&lt;!-- js --&gt;</span><br><span class="line">goMessage ():void  &#123;</span><br><span class="line">  uni.switchTab(&#123;</span><br><span class="line">    url: &#39;&#x2F;pages&#x2F;message&#x2F;message&#39;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过onUnload测试当前组件确实卸载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Js</span><br><span class="line">onUnload () &#123;</span><br><span class="line">  console.log(&#39;组件卸载了&#39;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-6-4-导航跳转传递参数"><a href="#7-6-4-导航跳转传递参数" class="headerlink" title="7.6.4 导航跳转传递参数"></a>7.6.4 导航跳转传递参数</h3><p>在导航进行跳转到下一个页面的同时，可以给下一个页面传递相应的参数，接收参数的页面可以通过onLoad生命周期进行接收</p><p>传递参数的页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Js</span><br><span class="line">goAbout ():void  &#123;</span><br><span class="line">  uni.navigateTo(&#123;</span><br><span class="line">    url: &#39;&#x2F;pages&#x2F;about&#x2F;about?id&#x3D;80&#39;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接收参数的页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Js</span><br><span class="line">onLoad (options) &#123;</span><br><span class="line">    console.log(options)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="8-条件注释实现跨端兼容"><a href="#8-条件注释实现跨端兼容" class="headerlink" title="8 条件注释实现跨端兼容"></a>8 条件注释实现跨端兼容</h1><p>条件编译是用特殊的注释作为标记，在编译时根据这些特殊的注释，将注释里面的代码编译到不同平台。</p><p><strong>写法：</strong>以 #ifdef 加平台标识 开头，以 #endif 结尾。</p><p>平台标识</p><table><thead><tr><th>值</th><th>平台</th><th>参考文档</th></tr></thead><tbody><tr><td>APP-PLUS</td><td>5+App</td><td><a href="http://www.html5plus.org/doc/">HTML5+ 规范</a></td></tr><tr><td>H5</td><td>H5</td><td></td></tr><tr><td>MP-WEIXIN</td><td>微信小程序</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/api/">微信小程序</a></td></tr><tr><td>MP-ALIPAY</td><td>支付宝小程序</td><td><a href="https://docs.alipay.com/mini/developer/getting-started">支付宝小程序</a></td></tr><tr><td>MP-BAIDU</td><td>百度小程序</td><td><a href="https://smartprogram.baidu.com/docs/develop/tutorial/codedir/">百度小程序</a></td></tr><tr><td>MP-TOUTIAO</td><td>头条小程序</td><td><a href="https://developer.toutiao.com/dev/cn/mini-app/develop/framework/basic-reference/introduction">头条小程序</a></td></tr><tr><td>MP-QQ</td><td>QQ小程序</td><td>（目前仅cli版支持）</td></tr><tr><td>MP</td><td>微信小程序/支付宝小程序/百度小程序/头条小程序/QQ小程序</td><td></td></tr></tbody></table><h2 id="8-1-组件的条件注释"><a href="#8-1-组件的条件注释" class="headerlink" title="8.1 组件的条件注释"></a>8.1 组件的条件注释</h2><p>代码演示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Html</span><br><span class="line">&lt;!-- #ifdef H5 --&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">  h5页面会显示</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;!-- #endif --&gt;</span><br><span class="line">&lt;!-- #ifdef MP-WEIXIN --&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">  微信小程序会显示</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;!-- #endif --&gt;</span><br><span class="line">&lt;!-- #ifdef APP-PLUS --&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">  app会显示</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;!-- #endif --&gt;</span><br></pre></td></tr></table></figure><h2 id="8-2-api的条件注释"><a href="#8-2-api的条件注释" class="headerlink" title="8.2 api的条件注释"></a>8.2 api的条件注释</h2><p>代码演示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Js</span><br><span class="line">onLoad () &#123;</span><br><span class="line">  &#x2F;&#x2F;#ifdef MP-WEIXIN</span><br><span class="line">  console.log(&#39;微信小程序&#39;)</span><br><span class="line">  &#x2F;&#x2F;#endif</span><br><span class="line">  &#x2F;&#x2F;#ifdef H5</span><br><span class="line">  console.log(&#39;h5页面&#39;)</span><br><span class="line">  &#x2F;&#x2F;#endif</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-3-样式的条件注释"><a href="#8-3-样式的条件注释" class="headerlink" title="8.3 样式的条件注释"></a>8.3 样式的条件注释</h2><p>代码演示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Css</span><br><span class="line">&#x2F;* #ifdef H5 *&#x2F;</span><br><span class="line">view&#123;</span><br><span class="line">  height: 100px;</span><br><span class="line">  line-height: 100px;</span><br><span class="line">  background: red;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;* #endif *&#x2F;</span><br><span class="line">&#x2F;* #ifdef MP-WEIXIN *&#x2F;</span><br><span class="line">view&#123;</span><br><span class="line">  height: 100px;</span><br><span class="line">  line-height: 100px;</span><br><span class="line">  background: green;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;* #endif *&#x2F;</span><br></pre></td></tr></table></figure><h1 id="9-uni-ui的使用"><a href="#9-uni-ui的使用" class="headerlink" title="9 uni-ui的使用"></a>9 uni-ui的使用</h1><p>uni-app中的UI组件库：<a href="https://ask.dcloud.net.cn/article/35489">https://ask.dcloud.net.cn/article/35489</a></p><p><a href="https://uniapp.dcloud.io/component/README?id=uniui">uni-ui文档</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Javascript</span><br><span class="line">&#x2F;&#x2F;1.将资料中的uni-ui放入到项目components目录下(注意：不要npm install @dcloudio&#x2F;uni-ui ，这种方式在子组件中无法使用)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;2.安装sass-loader</span><br><span class="line">npm install node-sass sass-loader@8.0.2      重启hubuilderX</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;3.在页面组件和自定义组件中使用uni-ui</span><br><span class="line">import uniBadge from &quot;@&#x2F;components&#x2F;uni-ui&#x2F;lib&#x2F;uni-badge&#x2F;uni-badge.vue&quot;;</span><br><span class="line">import uniGrid from &quot;@&#x2F;components&#x2F;uni-ui&#x2F;lib&#x2F;uni-grid&#x2F;uni-grid.vue&quot;;</span><br><span class="line">import uniGridItem from &quot;@&#x2F;components&#x2F;uni-ui&#x2F;lib&#x2F;uni-grid-item&#x2F;uni-grid-item.vue&quot;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        uniBadge,</span><br><span class="line">        uniGrid,</span><br><span class="line">        uniGridItem</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">&lt;uni-badge text&#x3D;&quot;1&quot;&gt;&lt;&#x2F;uni-badge&gt;</span><br><span class="line">&lt;uni-badge text&#x3D;&quot;2&quot; type&#x3D;&quot;success&quot;&gt;&lt;&#x2F;uni-badge&gt;</span><br><span class="line">&lt;uni-badge text&#x3D;&quot;3&quot; type&#x3D;&quot;primary&quot; :inverted&#x3D;&quot;true&quot;&gt;&lt;&#x2F;uni-badge&gt;</span><br><span class="line">&lt;uni-grid :column&#x3D;&quot;3&quot;&gt;</span><br><span class="line">&lt;uni-grid-item&gt;</span><br><span class="line">&lt;text class&#x3D;&quot;text&quot;&gt;文本&lt;&#x2F;text&gt;</span><br><span class="line">&lt;&#x2F;uni-grid-item&gt;</span><br><span class="line">&lt;uni-grid-item&gt;</span><br><span class="line">&lt;text class&#x3D;&quot;text&quot;&gt;文本&lt;&#x2F;text&gt;</span><br><span class="line">&lt;&#x2F;uni-grid-item&gt;</span><br><span class="line">&lt;uni-grid-item&gt;</span><br><span class="line">&lt;text class&#x3D;&quot;text&quot;&gt;文本&lt;&#x2F;text&gt;</span><br><span class="line">&lt;&#x2F;uni-grid-item&gt;</span><br><span class="line">&lt;&#x2F;uni-grid&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;#1.uni-app的基本使用&lt;/p&gt;
&lt;p&gt;课程介绍：&lt;/p&gt;
&lt;p&gt;基础部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;环境搭建&lt;/li&gt;
&lt;li&gt;页面外观配置&lt;/li&gt;
&lt;li&gt;数据绑定&lt;/li&gt;
&lt;li&gt;uni-app的生命周期&lt;/li&gt;
&lt;li&gt;组件的使用&lt;/li&gt;
&lt;li&gt;u</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>去重算法</title>
    <link href="http://x821.github.io/2020/11/09/%E5%8E%BB%E9%87%8D%E7%AE%97%E6%B3%95/"/>
    <id>http://x821.github.io/2020/11/09/%E5%8E%BB%E9%87%8D%E7%AE%97%E6%B3%95/</id>
    <published>2020-11-09T01:31:24.000Z</published>
    <updated>2021-03-25T00:59:45.580Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-遍历数组法"><a href="#1-遍历数组法" class="headerlink" title="1.遍历数组法"></a>1.遍历数组法</h3><p>它是最简单的数组去重方法（indexOf方法）</p><p>实现思路：新建一个数组，遍历去要重的数组，当值不在新数组的时候（indexOf为-1）就加入该新数组中；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">2</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique1</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> hash=[];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">     <span class="function"><span class="title">if</span>(<span class="params">hash.indexOf(arr[i])==-<span class="number">1</span></span>)</span>&#123;</span><br><span class="line">      hash.push(arr[i]);</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-数组下标判断法"><a href="#2-数组下标判断法" class="headerlink" title="2.数组下标判断法"></a>2.数组下标判断法</h3><p>调用indexOf方法，性能和方法1差不多</p><p>实现思路：如果当前数组的第 i 项在当前数组中第一次出现的位置不是 i，那么表示第 i 项是重复的，忽略掉。否则存入结果数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique2</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> hash=[];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">     <span class="function"><span class="title">if</span>(<span class="params">arr.indexOf(arr[i])==i</span>)</span>&#123;</span><br><span class="line">      hash.push(arr[i]);</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-排序后相邻去除法"><a href="#3-排序后相邻去除法" class="headerlink" title="3.排序后相邻去除法"></a>3.排序后相邻去除法</h3><p>实现思路：给传入的数组排序，排序后相同的值会相邻，然后遍历排序后数组时，新数组只加入不与前一值重复的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique3</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  arr.sort();</span><br><span class="line">  <span class="keyword">var</span> hash=[arr[<span class="number">0</span>]];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">     <span class="function"><span class="title">if</span>(<span class="params">arr[i]!=hash[hash.length-<span class="number">1</span>]</span>)</span>&#123;</span><br><span class="line">      hash.push(arr[i]);</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-优化遍历数组法"><a href="#4-优化遍历数组法" class="headerlink" title="4.优化遍历数组法"></a>4.优化遍历数组法</h3><p>实现思路：双层循环，外循环表示从0到arr.length，内循环表示从i+1到arr.length</p><p>将没重复的右边值放入新数组。（检测到有重复值时终止当前循环同时进入外层循环的下一轮判断）</p><p>quan_lst 里面是一个一个的js字面量对象，根据json里面的属性进行判定去重</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">quan_lst</span>)</span>&#123;    </span><br><span class="line"><span class="comment">//去掉重复选取的数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; quan_lst.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j =i+<span class="number">1</span>; j &lt;quan_lst.length; ) &#123;</span><br><span class="line">            <span class="keyword">if</span> (quan_lst[i].photoid == quan_lst[j].photoid ) &#123;<span class="comment">//通过photoid属性进行匹配；</span></span><br><span class="line">                quan_lst.splice(j, <span class="number">1</span>);<span class="comment">//去除重复的对象；</span></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-ES6实现"><a href="#5-ES6实现" class="headerlink" title="5.ES6实现"></a>5.ES6实现</h3><p>基本思路：ES6提供了新的数据结构Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。</p><p>Set函数可以接受一个数组（或类似数组的对象）作为参数，用来初始化。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique5</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="keyword">new</span> <span class="built_in">Set</span>(arr);</span><br><span class="line"> <span class="keyword">return</span> [...x];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>扩展：如果重复，则去掉该元素</p><p>数组下标去重</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique22</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> hash=[];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">     <span class="keyword">if</span>(arr.indexOf(arr[i])==arr.lastIndexOf(arr[i]))&#123;</span><br><span class="line">      hash.push(arr[i]);</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>补充：原先自己一直以为indexOf是针对字符串，原来indexOf也可以查询出数组元素所在的数组中的位置(以0开始计算),</p><h3 id="6-ES6实现（第二种方式）"><a href="#6-ES6实现（第二种方式）" class="headerlink" title="6.ES6实现（第二种方式）"></a>6.ES6实现（第二种方式）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">12</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">16</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(unique(arr))</span><br><span class="line"><span class="comment">//[1,8,12,15,16]</span></span><br></pre></td></tr></table></figure><h3 id="7-利用includes"><a href="#7-利用includes" class="headerlink" title="7.利用includes"></a>7.利用includes</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">16</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(arr)) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(‘type error!’)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> array =[];</span><br><span class="line"><span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++</span>)</span> &#123;</span><br><span class="line"><span class="function"><span class="title">if</span>(<span class="params"> !array.includes( arr[i]) </span>)</span> &#123;<span class="comment">//includes 检测数组是否有某个值</span></span><br><span class="line">array.push(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> array</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(unique(arr))</span><br></pre></td></tr></table></figure><h3 id="8-利用filter"><a href="#8-利用filter" class="headerlink" title="8.利用filter"></a>8.利用filter</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">16</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unlink</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> arr.filter(<span class="function"><span class="keyword">function</span> (<span class="params">item, index, arr</span>) </span>&#123;</span><br><span class="line"><span class="comment">//当前元素，在原始数组中的第一个索引==当前索引值，否则返回当前元素</span></span><br><span class="line"><span class="keyword">return</span> arr.indexOf(item, <span class="number">0</span>) === index;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(unlink(arr));</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-遍历数组法&quot;&gt;&lt;a href=&quot;#1-遍历数组法&quot; class=&quot;headerlink&quot; title=&quot;1.遍历数组法&quot;&gt;&lt;/a&gt;1.遍历数组法&lt;/h3&gt;&lt;p&gt;它是最简单的数组去重方法（indexOf方法）&lt;/p&gt;
&lt;p&gt;实现思路：新建一个数组，遍历去要重的数</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://x821.github.io/2020/08/28/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://x821.github.io/2020/08/28/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2020-08-28T14:14:21.000Z</published>
    <updated>2021-03-25T01:05:55.824Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>正则就是对字符串进行查找、匹配、替换等操作的一串“规则字符串”</p><p>使用方法：在一对斜杠之间添加正则表达式 如：**/** 正则表达式 <strong>/</strong></p><h2 id="正则表达式的组成"><a href="#正则表达式的组成" class="headerlink" title="正则表达式的组成"></a>正则表达式的组成</h2><ul><li>普通字符</li><li>特殊字符（元字符）：正则表达式中具有特殊意义的字符</li></ul><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><table><thead><tr><th><strong>\d</strong></th><th><strong>表示数字</strong></th></tr></thead><tbody><tr><td><strong>\D</strong></td><td><strong>非数字</strong></td></tr><tr><td><strong>\s</strong></td><td><strong>空格符</strong></td></tr><tr><td><strong>\S</strong></td><td><strong>非空格符</strong></td></tr><tr><td><strong>\w</strong></td><td><strong>字母或数字或下划线</strong></td></tr><tr><td><strong>\W</strong></td><td><strong>非字母、数字、下划线</strong></td></tr><tr><td><strong>.</strong></td><td><strong>任意字符（不包含换行符）</strong></td></tr><tr><td><strong>\b</strong></td><td><strong>单词边界</strong></td></tr></tbody></table><p>实例1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var reg &#x3D; &#x2F;\d&#x2F;; &#x2F;&#x2F;新建一个正则对象</span><br><span class="line"> var str &#x3D; &#39;1&#39;;</span><br><span class="line">console.log(reg.test(str)); &#x2F;&#x2F;true  str中含有数字</span><br><span class="line">&#x2F;&#x2F;test()是正则对象中的一个方法，它会判断str是否满足正则表达式，返回boolean</span><br></pre></td></tr></table></figure><h2 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h2><p>限定之前表达式出现的次数</p><table><thead><tr><th>*****</th><th><strong>重复0次或多次</strong></th></tr></thead><tbody><tr><td><strong>+</strong></td><td><strong>重复1次或多次</strong></td></tr><tr><td><strong>？</strong></td><td><strong>重复0次或1次</strong></td></tr><tr><td><strong>{n}</strong></td><td><strong>重复n次 (连续)</strong></td></tr><tr><td><strong>{n,}</strong></td><td><strong>重复至少n次 (连续)</strong></td></tr><tr><td><strong>{n,m}</strong></td><td><strong>重复n到m次 (连续)</strong></td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">var reg &#x3D; &#x2F;\d*&#x2F;;</span><br><span class="line">console.log(reg.test(&#39;w&#39;));&#x2F;&#x2F;true</span><br><span class="line">console.log(reg.test(&#39;12&#39;));&#x2F;&#x2F;true</span><br><span class="line">var reg &#x3D; &#x2F;\d+&#x2F;;</span><br><span class="line">console.log(reg.test(&#39;w&#39;));&#x2F;&#x2F;false</span><br><span class="line">console.log(reg.test(&#39;12&#39;));&#x2F;&#x2F;true</span><br><span class="line">var reg &#x3D; &#x2F;\d?&#x2F;;</span><br><span class="line">console.log(reg.test(&#39;w&#39;));&#x2F;&#x2F;true</span><br><span class="line">console.log(reg.test(&#39;12&#39;));&#x2F;&#x2F;true</span><br><span class="line">console.log(reg.test(&#39;w12&#39;));&#x2F;&#x2F;true</span><br><span class="line">&#x2F;&#x2F;这里12出现了两次，不满足“重复0次或1次”的条件为什么显示为true呢？</span><br><span class="line">&#x2F;&#x2F;当执行test()时，只要字符串中有部分满足条件则返回true）</span><br><span class="line">&#x2F;&#x2F;解决办法var reg &#x3D; &#x2F;^\d?$&#x2F;;  加上开始结束符（后面会介绍）</span><br><span class="line">var reg &#x3D; &#x2F;\d&#123;2&#125;&#x2F;;&#x2F;&#x2F;&#123;n&#125;</span><br><span class="line">console.log(reg.test(&#39;2&#39;));&#x2F;&#x2F;false</span><br><span class="line">console.log(reg.test(&#39;23&#39;));&#x2F;&#x2F;true</span><br><span class="line">console.log(reg.test(&#39;2w3&#39;));&#x2F;&#x2F;false  不连续时匹配失败</span><br><span class="line">console.log(reg.test(&#39;234&#39;));&#x2F;&#x2F;true  (理应为false)原因同上</span><br><span class="line">console.log(reg.test(&#39;ab234&#39;));&#x2F;&#x2F;true  (理应为false)原因同上  解决办法同上</span><br><span class="line">var reg &#x3D; &#x2F;\d&#123;2,&#125;&#x2F;;&#x2F;&#x2F;&#123;n,&#125;  &#x2F;&#x2F;同样存在以上问题</span><br><span class="line">var reg &#x3D; &#x2F;\d&#123;2,6&#125;&#x2F;;&#x2F;&#x2F;&#123;n,m&#125;  &#x2F;&#x2F;同样存在以上问题</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="范围符"><a href="#范围符" class="headerlink" title="范围符[ ]"></a>范围符[ ]</h2><p>1、[a-z]、[A-Z]、[0-9],也可以综合写成[a-zA-Z0-9]；当然这范围是自己定义的，比如[a-b]，范围是a到b。</p><p>2、[\u4e00-\u9fa5] 匹配汉字的范围 其中\u4e00，\u9fa5是中日韩汉字Unicode表中对应的编码 4e00对应“一” 9fa5对应“龥”</p><p><a href="http://www.chi2ko.com/tool/CJK.htm">中日韩汉字Unicode表</a></p><p>3、[ab5&amp;@],仅匹配 a 或 b 或 5 或 &amp; 或 @</p><p>4、**[^ab5&amp;@]** 匹配除 a 或 b 或 5 或 &amp; 或 @之外的内容 （注意此处^是在[ ]内的，<strong>区别于开始符^</strong>,两者所处位置不同）</p><p>5、3 | a 匹配3或者a字符</p><h2 id="开始结束符号"><a href="#开始结束符号" class="headerlink" title="开始结束符号"></a>开始结束符号</h2><table><thead><tr><th><strong>^</strong></th><th><strong>开始符（强制规定匹配开始的地方）</strong></th></tr></thead><tbody><tr><td><strong>$</strong></td><td><strong>结束符（强制规定匹配结束的地方）</strong></td></tr></tbody></table><p>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">^\d 字符串要以数字开始，数字只能出现一次</span><br><span class="line">\d$  字符串要以数字结束，数字只能出现一次</span><br><span class="line">^\d$  字符串要以数字开始和结束，数字只能出现一次</span><br><span class="line">\d+$  字符串要以数字开始，以数字结束，数字只能出现一次</span><br><span class="line">^\d?$  字符串要以数字开头和结束，数字出现0次或1次</span><br></pre></td></tr></table></figure><p>我们来解释 <strong>var reg = /\d?/;</strong> 例子中出现的问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var reg &#x3D; &#x2F;\d?&#x2F;;</span><br><span class="line">console.log(reg.test(&#39;w&#39;));&#x2F;&#x2F;true</span><br><span class="line">console.log(reg.test(&#39;12&#39;));&#x2F;&#x2F;开始检测，当检测到 1 时，因为满足了数字出现0次，匹配成功，返回true，此时结束位置在1和2之间</span><br><span class="line">&#x2F;&#x2F;加入开始结束符</span><br><span class="line">var reg &#x3D; &#x2F;^\d?$&#x2F;;</span><br><span class="line">console.log(reg.test(&#39;w&#39;));&#x2F;&#x2F;true</span><br><span class="line">console.log(reg.test(&#39;12&#39;));&#x2F;&#x2F;当加入开始结束字符后，开始匹配位置强制从1开始 2结束</span><br><span class="line">&#x2F;&#x2F;则12是由两个数字的  不符合“重复0次或1次”的条件，则为false</span><br></pre></td></tr></table></figure><p>我们来解释 <strong>var reg = /\d{2}/;</strong> 例子中出现的问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var reg &#x3D; &#x2F;\d&#123;2&#125;&#x2F;;&#x2F;&#x2F;&#123;n&#125;</span><br><span class="line">console.log(reg.test(&#39;2&#39;));&#x2F;&#x2F;false</span><br><span class="line">console.log(reg.test(&#39;23&#39;));&#x2F;&#x2F;true</span><br><span class="line">console.log(reg.test(&#39;234&#39;));&#x2F;&#x2F;true  开始字符为2  结束字符为3</span><br><span class="line">console.log(reg.test(&#39;ww234&#39;));&#x2F;&#x2F;true 开始字符为2  结束字符为3</span><br><span class="line">var reg &#x3D; &#x2F;^\d&#123;2&#125;$&#x2F;;&#x2F;&#x2F;&#123;n&#125;</span><br><span class="line">console.log(reg.test(&#39;2&#39;));&#x2F;&#x2F;false</span><br><span class="line">console.log(reg.test(&#39;23&#39;));&#x2F;&#x2F;true</span><br><span class="line">console.log(reg.test(&#39;234&#39;));&#x2F;&#x2F;false  开始字符为2  结束字符为4</span><br><span class="line">console.log(reg.test(&#39;ab234&#39;));&#x2F;&#x2F;false 开始字符为a  结束字符为4</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="正则对象的创建方式"><a href="#正则对象的创建方式" class="headerlink" title="正则对象的创建方式"></a>正则对象的创建方式</h2><h3 id="1、new-RegExp"><a href="#1、new-RegExp" class="headerlink" title="1、new RegExp()"></a>1、new RegExp()</h3><p>RegExp(reg,msg) 参数一：正则表达式</p><p>参数二：附加条件（如：i 忽略大小写，g 全局匹配）</p><p>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var reg &#x3D; new RegExp(&#39;\\w+&#39;,&#39;ig&#39;);  &#x2F;&#x2F;注意，此处第一个\是转义字符，因为参数一不能直接传入正则表达式</span><br><span class="line">var reg &#x3D; new RegExp(&#39;[a-z]&#39;,&#39;ig&#39;);</span><br><span class="line">var str &#x3D; &quot;AaaC2_&quot;;</span><br><span class="line">console.log(reg.test(str));&#x2F;&#x2F;true</span><br></pre></td></tr></table></figure><h3 id="2、简写"><a href="#2、简写" class="headerlink" title="2、简写"></a>2、简写</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var reg &#x3D; &#x2F;[a-z]&#x2F;ig;</span><br><span class="line">var str &#x3D; &quot;AaaC2_&quot;;</span><br><span class="line">console.log(reg.test(str));&#x2F;&#x2F;true</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="正则对象的方法"><a href="#正则对象的方法" class="headerlink" title="正则对象的方法"></a>正则对象的方法</h2><p>RegExp.test(‘字符串’); 判断字符串知否满足正则表达式 返回布尔值</p><p>RegExp.exec(‘字符串’); 判断字符串知否满足正则表达式 将找到的内容以数组的形式返回</p><p>1、不使用 “<code>g</code>“ 标志时,每次都返回第一个找的内容 而不继续向后查找</p><p>2、当正则表达式使用 “<code>g</code>“ 标志时，可以多次执行 <code>exec</code> 方法来查找同一个字符串中的成功匹配。当你这样做时，查找将从正则表达式的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex"><code>lastIndex</code></a> 属性指定的位置开始</p><p><strong>lastIndex</strong>:</p><p>只有正则表达式使用了表示全局检索的 “<code>g</code>“ 标志时，该属性才会起作用。此时应用下面的规则：</p><ul><li>如果 <code>lastIndex</code> 大于字符串的长度，则 <code>regexp.test</code> 和 <code>regexp.exec</code> 将会匹配失败，然后 <code>lastIndex</code> 被设置为 0。</li><li>如果 <code>lastIndex</code> 等于字符串的长度，且该正则表达式匹配空字符串，则该正则表达式匹配从 <code>lastIndex</code> 开始的字符串。（then the regular expression matches input starting at <code>lastIndex</code>.）</li><li>如果 <code>lastIndex</code> 等于字符串的长度，且该正则表达式不匹配空字符串 ，则该正则表达式不匹配字符串，<code>lastIndex</code> 被设置为 0.。</li><li>否则，<code>lastIndex</code> 被设置为紧随最近一次成功匹配的下一个位置。</li></ul><p>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;找出所有三个英文字母组成的  并且以A开头的单词</span><br><span class="line">var str &#x3D; &#39;Asd Asss wes sgetgs x Adv Wdf&#39;;</span><br><span class="line">var reg &#x3D; &#x2F;\bA[A-Za-z]&#123;2&#125;\b&#x2F;g;</span><br><span class="line">console.log(reg.lastIndex);&#x2F;&#x2F;初始值为0</span><br><span class="line">var word &#x3D; reg.exec(str);&#x2F;&#x2F;￥1￥</span><br><span class="line">console.log(reg.lastIndex);&#x2F;&#x2F;3</span><br><span class="line">while(word)&#123;</span><br><span class="line">    console.log(word);</span><br><span class="line">    word &#x3D; reg.exec(str);&#x2F;&#x2F;￥2￥</span><br><span class="line">    console.log(reg.lastIndex);</span><br><span class="line">&#125;</span><br><span class="line">onsole.log(word);&#x2F;&#x2F;null</span><br><span class="line">console.log(reg.lastIndex);&#x2F;&#x2F;0</span><br></pre></td></tr></table></figure><p>该函数运行的实质：exec每一次执行都有开始位置，而这个开始位置是由RegExp对象的lastIndex属性值所决定的；</p><p>以下为该段代码的执行顺序与解析：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1、reg.lastIndex 的初始值为0</span><br><span class="line">2、执行￥1￥处的exec时，当前的lastIndex数值为0，则exec从字符串的0位置（即A字符）开始。执行结束，将**所找的字符串**（Asd）以数组的形式返回给word，并修改reg.lastIndex的值为&quot; **所找到的字符串最后一个的位置的下一个位置** &quot;（也就是d下标加一，为3），</span><br><span class="line">3、执行while循环，word此时为[Asd]数组，while语句判断成功</span><br><span class="line">4、执行￥2￥处的exec，此时reg.lastIndex为3，则从字符串中下标为3的字符开始执行，找到 &quot;Adv&quot;,  v的下标为24，则reg.lastIndex的值被设置为25，word此时为[Adv]数组</span><br><span class="line">5、判断while 成功</span><br><span class="line">6、执行￥2￥处的exec，此时reg.lastIndex为25，则从字符串中下标为25的字符开始执行，未找到满足条件的内容，则返回null给word，并将reg.lastIndex设为0；</span><br><span class="line">7、判断while,此时word为null，判断失败，则跳出循环</span><br><span class="line">8、程序结束</span><br></pre></td></tr></table></figure><h2 id="懒惰模式与贪婪模式"><a href="#懒惰模式与贪婪模式" class="headerlink" title="懒惰模式与贪婪模式"></a>懒惰模式与贪婪模式</h2><p>懒惰模式：在满足条件的前提下，尽可能<strong>少</strong>的匹配字符</p><p>贪婪模式：在满足条件的前提下，尽可能<strong>多</strong>的匹配字符</p><p>正则表达式的量词有：* + ？ {}</p><p>量词默认是贪婪模式，当在量词之后加上?时，将贪婪模式转换为懒惰模式。</p><h2 id="分组提取"><a href="#分组提取" class="headerlink" title="分组提取"></a>分组提取</h2><p>正则中（）表示分组</p><p>若存在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((((a))((b)))(c))</span><br></pre></td></tr></table></figure><p>则第一组；(((a))((b)))(c)</p><p>第二组：((a))</p><p>第三组：(a)</p><p>第四组：(b)</p><p>第五组：(c)</p><p>找法：从左往右找左括号(</p><p>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var reg &#x3D; &#x2F;((\d+)(\w+))&#x2F;;</span><br><span class="line">var str &#x3D; &quot;123abc_c&quot;</span><br><span class="line">if(reg.test(str))&#123;</span><br><span class="line">    &#x2F;&#x2F;$后的数字 类似数组的下标</span><br><span class="line">    console.log(RegExp.$1);&#x2F;&#x2F;获得第一组(\d+)(\w+)的内容  则是123abc_c</span><br><span class="line">    console.log(RegExp.$2);&#x2F;&#x2F;获得第二组(\d+)的内容  则是123</span><br><span class="line">    console.log(RegExp.$3);&#x2F;&#x2F;获得第二组(\w+)的内容  则是abc_c</span><br><span class="line">&#125;</span><br><span class="line">字符串</span><br></pre></td></tr></table></figure><h2 id="字符串中正则的使用"><a href="#字符串中正则的使用" class="headerlink" title="字符串中正则的使用"></a>字符串中正则的使用</h2><p>方法：</p><table><thead><tr><th><strong>String.match(正则对象)</strong></th><th><strong>返回符合正则条件的集合</strong></th></tr></thead><tbody><tr><td><strong>String.replace(正则对象,”替换的字符串”)</strong></td><td><strong>替换字符串，若要全局替换，正则对象要加g</strong></td></tr><tr><td><strong>String.search(正则对象)</strong></td><td><strong>查找字符串，返回查找内容的第一次出现的位置</strong></td></tr><tr><td><strong>String.split(正则对象)</strong></td><td><strong>切割字符串，返回切割后的数组</strong></td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;match</span><br><span class="line">var str&#x3D;&quot;abc123ee23f90&quot;;</span><br><span class="line">&#x2F;&#x2F;将字符串中所有出现的每一个数字提取出来</span><br><span class="line">var arr &#x3D;  str.match(&#x2F;\d&#x2F;g);</span><br><span class="line">console.log(arr);</span><br><span class="line">&#x2F;&#x2F;将字符串中所有出现的连续的数字提取出来</span><br><span class="line">var arr &#x3D;  str.match(&#x2F;\d+&#x2F;g);</span><br><span class="line">console.log(arr);</span><br><span class="line">&#x2F;&#x2F;replace</span><br><span class="line">&#x2F;&#x2F;替换所有 - +</span><br><span class="line">var str &#x3D; &quot;a-b-+b-c&quot;;</span><br><span class="line">console.log(str.replace(&#x2F;-|\+&#x2F;g,&quot;*&quot;));&#x2F;&#x2F;结果a*b**b*c</span><br><span class="line">&#x2F;&#x2F;若不加g  则结果为a*b-+b-c</span><br><span class="line">&#x2F;&#x2F;search</span><br><span class="line">&#x2F;&#x2F;忽略大小写  找到第一个b的下标</span><br><span class="line">var str &#x3D; &quot;a-b-b-c&quot;;</span><br><span class="line">console.log(str.search(&#x2F;B&#x2F;i));&#x2F;&#x2F;结果2</span><br><span class="line">&#x2F;&#x2F;split</span><br><span class="line">var str&#x3D;&quot;a|b|c|&quot;;</span><br><span class="line">console.log(str.split(&#x2F;\|&#x2F;));&#x2F;&#x2F;结果  &quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;正则表达式&quot;&gt;&lt;a href=&quot;#正则表达式&quot; class=&quot;headerlink&quot; title=&quot;正则表达式&quot;&gt;&lt;/a&gt;正则表达式&lt;/h1&gt;&lt;p&gt;正则就是对字符串进行查找、匹配、替换等操作的一串“规则字符串”&lt;/p&gt;
&lt;p&gt;使用方法：在一对斜杠之间添加正则表达式</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>art-template</title>
    <link href="http://x821.github.io/2020/07/12/art-template/"/>
    <id>http://x821.github.io/2020/07/12/art-template/</id>
    <published>2020-07-12T10:26:19.000Z</published>
    <updated>2021-03-24T01:33:52.204Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h1><p>art-template 是一个简约、超快的模板引擎。 它采用作用域预声明的技术来优化模板渲染速度，从而获得接近 JavaScript 极限的运行性能，并且同时支持 NodeJS 和浏览器。 </p><p>通过npm安装: <code>npm install art-template --save</code></p><h1 id="二、基础数据渲染"><a href="#二、基础数据渲染" class="headerlink" title="二、基础数据渲染"></a>二、基础数据渲染</h1><h2 id="1、引入art-template-js文件"><a href="#1、引入art-template-js文件" class="headerlink" title="1、引入art-template.js文件"></a>1、引入art-template.js文件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;template-debug.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="2、编写HTML模板"><a href="#2、编写HTML模板" class="headerlink" title="2、编写HTML模板"></a>2、编写HTML模板</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script id&#x3D;&quot;test&quot; type&#x3D;&quot;text&#x2F;html&quot;&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123;title&#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="3、向模板插入数据，并输出到页面"><a href="#3、向模板插入数据，并输出到页面" class="headerlink" title="3、向模板插入数据，并输出到页面"></a>3、向模板插入数据，并输出到页面</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var data &#x3D; &#123;</span><br><span class="line">    title:&quot;hello world&quot;</span><br><span class="line">&#125;;</span><br><span class="line">var html &#x3D; template(&quot;test&quot;,data);</span><br><span class="line">document.getElementById(&#39;content&#39;).innerHTML &#x3D; html;</span><br></pre></td></tr></table></figure><h1 id="三、输出HTML"><a href="#三、输出HTML" class="headerlink" title="三、输出HTML"></a>三、<strong>输出HTML</strong></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script id&#x3D;&quot;test&quot; type&#x3D;&quot;text&#x2F;html&quot;&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123;title&#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&#x2F;&#x2F;注意：&#123;&#123;title&#125;&#125;这是对内容编码输出，应该写成&#123;&#123;#title&#125;&#125;这是对内容不编码输出</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script id&#x3D;&quot;test&quot; type&#x3D;&quot;text&#x2F;html&quot;&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123;#title&#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">var data &#x3D; &#123;</span><br><span class="line">    title:&quot;&lt;p&gt;hello world&lt;&#x2F;p&gt;&quot;</span><br><span class="line">&#125;;</span><br><span class="line">var html &#x3D; template(&quot;test&quot;,data);</span><br><span class="line">document.getElementById(&#39;content&#39;).innerHTML &#x3D; html;</span><br></pre></td></tr></table></figure><h1 id="四、流程控制语句（if-else）"><a href="#四、流程控制语句（if-else）" class="headerlink" title="四、流程控制语句（if else）"></a>四、<strong>流程控制语句</strong>（if else）</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;if value&#125;&#125;</span><br><span class="line">…</span><br><span class="line">&#123;&#123;else if value&#125;&#125;</span><br><span class="line">…</span><br><span class="line">&#123;&#123;else&#125;&#125;</span><br><span class="line">…</span><br><span class="line">&#123;&#123;&#x2F;if&#125;&#125;</span><br><span class="line">art-template里面的流程控制就相对其他模板来说强大很多了，直接看例子吧</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script id&#x3D;&quot;test&quot; type&#x3D;&quot;text&#x2F;html&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &#123;&#123;if bok&#x3D;&#x3D;22&#125;&#125;</span><br><span class="line">        &lt;h1&gt;线上&lt;&#x2F;h1&gt;</span><br><span class="line">        &#123;&#123;else if bok&#x3D;&#x3D;33&#125;&#125;</span><br><span class="line">        &lt;h2&gt;隐藏&lt;&#x2F;h2&gt;</span><br><span class="line">        &#123;&#123;else&#125;&#125;</span><br><span class="line">        &lt;h3&gt;走这里&lt;&#x2F;h3&gt;</span><br><span class="line">        &#123;&#123;&#x2F;if&#125;&#125;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var data &#x3D; &#123;</span><br><span class="line">        &quot;bok&quot;:22</span><br><span class="line">    &#125;;</span><br><span class="line">    var html &#x3D; template(&#39;test&#39;,data);</span><br><span class="line">    document.getElementById(&quot;app&quot;).innerHTML &#x3D; html;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>嵌套的写法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script id&#x3D;&quot;test&quot; type&#x3D;&quot;text&#x2F;html&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &#123;&#123;if bok&#125;&#125;</span><br><span class="line">            &#123;&#123;if list.length&gt;&#x3D;0&#125;&#125;</span><br><span class="line">                &#123;&#123;each list&#125;&#125;</span><br><span class="line">                    &lt;p&gt;&#123;&#123;$index&#125;&#125;:&#123;&#123;$value&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">                &#123;&#123;&#x2F;each&#125;&#125;</span><br><span class="line">            &#123;&#123;else&#125;&#125;</span><br><span class="line">                &lt;p&gt;没有数据&lt;&#x2F;p&gt;</span><br><span class="line">            &#123;&#123;&#x2F;if&#125;&#125;</span><br><span class="line">        &#123;&#123;&#x2F;if&#125;&#125;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var data &#x3D; &#123;</span><br><span class="line">        &quot;bok&quot;:true,</span><br><span class="line">        list:[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</span><br><span class="line">    &#125;;</span><br><span class="line">    var html &#x3D; template(&#39;test&#39;,data);</span><br><span class="line">    document.getElementById(&quot;app&quot;).innerHTML &#x3D; html;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="五、循环遍历语句"><a href="#五、循环遍历语句" class="headerlink" title="五、循环遍历语句"></a>五、循环遍历语句</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;each name&#125;&#125;</span><br><span class="line">索引：&#123;&#123; $ index&#125;&#125;</span><br><span class="line">值：&#123;&#123; $ value&#125;&#125;</span><br><span class="line">&#123;&#123;&#x2F;each&#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;script id&#x3D;&quot;test&quot; type&#x3D;&quot;text&#x2F;html&quot;&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &#123;&#123;if c&#x3D;&#x3D;100&#125;&#125;</span><br><span class="line">           &lt;ul&gt;</span><br><span class="line">                &#123;&#123;each person&#125;&#125;</span><br><span class="line">                    &lt;li&gt;</span><br><span class="line">                        编号：&#123;&#123;$index+1&#125;&#125;--姓名：&#123;&#123;$value.name&#125;&#125;--年龄：&#123;&#123;$value.age&#125;&#125;</span><br><span class="line">                    &lt;&#x2F;li&gt;</span><br><span class="line">                &#123;&#123;&#x2F;each&#125;&#125;</span><br><span class="line">            &lt;&#x2F;ul&gt;</span><br><span class="line">        &#123;&#123;&#x2F;if&#125;&#125;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var data &#x3D; &#123;</span><br><span class="line">        c:100,</span><br><span class="line">        person:[</span><br><span class="line">            &#123;name:&quot;jack&quot;,age:18&#125;,</span><br><span class="line">            &#123;name:&quot;tom&quot;,age:19&#125;,</span><br><span class="line">            &#123;name:&quot;jerry&quot;,age:20&#125;,</span><br><span class="line">            &#123;name:&quot;kid&quot;,age:21&#125;,</span><br><span class="line">            &#123;name:&quot;jade&quot;,age:22&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;;</span><br><span class="line">    var html &#x3D; template(&quot;test&quot;,data);</span><br><span class="line">    document.getElementById(&quot;content&quot;).innerHTML &#x3D; html;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h1 id="六、调用自定义方法"><a href="#六、调用自定义方法" class="headerlink" title="六、调用自定义方法"></a>六、调用自定义方法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;可以直接在&#123;&#123;&#125;&#125;中调用</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;template-web.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script id&#x3D;&quot;test&quot; type&#x3D;&quot;text&#x2F;html&quot;&gt;</span><br><span class="line">    &#123;&#123;if c&#x3D;&#x3D;100&#125;&#125;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &#123;&#123;each person&#125;&#125;</span><br><span class="line">                &lt;li&gt;姓名：&#123;&#123;$value.name&#125;&#125;--性别：&#123;&#123;show($value.sex)&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">            &#123;&#123;&#x2F;each&#125;&#125;</span><br><span class="line">        &lt;&#x2F;ul&gt;</span><br><span class="line">    &#123;&#123;&#x2F;if&#125;&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;div id &#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var data &#x3D; &#123;</span><br><span class="line">        c:100,</span><br><span class="line">        person:[</span><br><span class="line">            &#123;name:&quot;jack&quot;,age:18,sex:1&#125;,</span><br><span class="line">            &#123;name:&quot;tom&quot;,age:19,sex:0&#125;,</span><br><span class="line">            &#123;name:&quot;jerry&quot;,age:20,sex:0&#125;,</span><br><span class="line">            &#123;name:&quot;kid&quot;,age:21,sex:1&#125;,</span><br><span class="line">            &#123;name:&quot;jade&quot;,age:22,sex:0&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;;</span><br><span class="line">    &#x2F;&#x2F;自定义函数</span><br><span class="line">   template.defaults.imports.show &#x3D; function(sex)&#123;</span><br><span class="line">      console.log(sex);&#x2F;&#x2F;同样可以打印日志到控制台</span><br><span class="line">        if(sex&#x3D;&#x3D;0)&#123;</span><br><span class="line">        return &quot;男&quot;</span><br><span class="line">        &#125;else if(sex&#x3D;&#x3D;1)&#123;</span><br><span class="line">              return &quot;女&quot;</span><br><span class="line">      &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    var html &#x3D; template(&quot;test&quot;,data);</span><br><span class="line">    document.getElementById(&quot;app&quot;).innerHTML &#x3D; html;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h1 id="七、调用子模板"><a href="#七、调用子模板" class="headerlink" title="七、调用子模板"></a>七、调用子模板</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;include ‘main’&#125;&#125; 引入子模板，数据默认为共享</span><br><span class="line">&#123;&#123;include ‘main’ a&#125;&#125; a为制定数据，但是同样必须是父级数据，可以看看下面的例子，如果不注入的a的话，引入的子模板是接受不到数据的</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;template-debug.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script id&#x3D;&quot;main&quot; type&#x3D;&quot;text&#x2F;html&quot;&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">       &#123;&#123;each list&#125;&#125;</span><br><span class="line">            &lt;li&gt;&#123;&#123;$value&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">        &#123;&#123;&#x2F;each&#125;&#125;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script id&#x3D;&quot;test&quot; type&#x3D;&quot;text&#x2F;html&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &#123;&#123;each person&#125;&#125;</span><br><span class="line">                &lt;li&gt;&#123;&#123;$value.name&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">            &#123;&#123;&#x2F;each&#125;&#125;</span><br><span class="line">        &lt;&#x2F;ul&gt;</span><br><span class="line">        &#123;&#123;include &#39;main&#39; a&#125;&#125;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var data &#x3D; &#123;</span><br><span class="line">        person:[</span><br><span class="line">            &#123;name:&quot;jack&quot;,age:18&#125;,</span><br><span class="line">            &#123;name:&quot;tom&quot;,age:19&#125;,</span><br><span class="line">            &#123;name:&quot;jerry&quot;,age:20&#125;,</span><br><span class="line">            &#123;name:&quot;kid&quot;,age:21&#125;,</span><br><span class="line">            &#123;name:&quot;jade&quot;,age:22&#125;</span><br><span class="line">        ],</span><br><span class="line">        a:&#123;</span><br><span class="line">            list:[&#39;文艺&#39;, &#39;博客&#39;, &#39;摄影&#39;, &#39;电影&#39;, &#39;民谣&#39;, &#39;旅行&#39;, &#39;吉他&#39;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    var html &#x3D; template(&quot;test&quot;,data);</span><br><span class="line">    document.getElementById(&quot;app&quot;).innerHTML&#x3D;html;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、介绍&quot;&gt;&lt;a href=&quot;#一、介绍&quot; class=&quot;headerlink&quot; title=&quot;一、介绍&quot;&gt;&lt;/a&gt;一、介绍&lt;/h1&gt;&lt;p&gt;art-template 是一个简约、超快的模板引擎。 它采用作用域预声明的技术来优化模板渲染速度，从而获得接近 JavaS</summary>
      
    
    
    
    <category term="JS" scheme="http://x821.github.io/categories/JS/"/>
    
    
  </entry>
  
  <entry>
    <title>关于浮动的若干问题</title>
    <link href="http://x821.github.io/2020/06/18/%E5%85%B3%E4%BA%8E%E6%B5%AE%E5%8A%A8%E7%9A%84%E8%8B%A5%E5%B9%B2%E9%97%AE%E9%A2%98/"/>
    <id>http://x821.github.io/2020/06/18/%E5%85%B3%E4%BA%8E%E6%B5%AE%E5%8A%A8%E7%9A%84%E8%8B%A5%E5%B9%B2%E9%97%AE%E9%A2%98/</id>
    <published>2020-06-18T11:52:41.000Z</published>
    <updated>2021-03-25T01:31:01.501Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-标准文档流"><a href="#1-标准文档流" class="headerlink" title="1.标准文档流"></a>1.标准文档流</h1><p>标准流实际上就是一个网页内标签元素正常从上到下，从左到右排列顺序的意思，比如块级元素会独占一行，行内元素会按顺序依次前后排列；按照这种大前提的布局排列之下绝对不会出现例外的情况叫做标准流布局。</p><h1 id="2-浮动"><a href="#2-浮动" class="headerlink" title="2.浮动"></a>2.浮动</h1><h2 id="2-1-浮动的机制"><a href="#2-1-浮动的机制" class="headerlink" title="2.1 浮动的机制"></a>2.1 浮动的机制</h2><p>当有两个div同时在标准刘文档中的时候，两个div会隔行显示：</p><p><img src="C:\Users\xumengqi\AppData\Local\Temp\1616634884321.png" alt="1616634884321"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(2D图)</span><br></pre></td></tr></table></figure><p><img src="C:\Users\xumengqi\AppData\Local\Temp\1616635103759.png" alt="img4"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**（3D图）**</span><br></pre></td></tr></table></figure><p>当将蓝色div对应的CSS添加浮动属性后，蓝色div会脱离标准流，而浮在标准流之上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">float: left;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\xumengqi\AppData\Local\Temp\1616635167172.png" alt="1616635167172"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**（2D图）**</span><br></pre></td></tr></table></figure><p><img src="C:\Users\xumengqi\AppData\Local\Temp\1616635271886.png" alt="1616635271886"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**（3D图）**</span><br></pre></td></tr></table></figure><p>将蓝色div和红色div同时设置浮动属性后，两者都处于浮动的层次，显示方式默认为贴边水平并排显示</p><p><img src="C:\Users\xumengqi\AppData\Local\Temp\1616635316755.png" alt="1616635316755"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**（2D图）**</span><br></pre></td></tr></table></figure><p><img src="C:\Users\xumengqi\AppData\Local\Temp\1616635380749.png" alt="1616635380749"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**（3D图）**</span><br></pre></td></tr></table></figure><h2 id="2-2-浮动的使用"><a href="#2-2-浮动的使用" class="headerlink" title="2.2 浮动的使用"></a>2.2 浮动的使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器&#123;float:属性值;&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">属性值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">left</td><td align="center">元素向左浮动</td></tr><tr><td align="center">right</td><td align="center">元素向右浮动</td></tr><tr><td align="center">none</td><td align="center">元素不浮动（默认值）</td></tr></tbody></table><h2 id="2-3-清除浮动"><a href="#2-3-清除浮动" class="headerlink" title="2.3 清除浮动"></a>2.3 清除浮动</h2><h3 id="2-3-1-为什么要清除浮动"><a href="#2-3-1-为什么要清除浮动" class="headerlink" title="2.3.1 为什么要清除浮动"></a>2.3.1 为什么要清除浮动</h3><p>浮动本质是用来做一些文字混排效果的，但是被我们拿来做布局用，则会有很多的问题出现。</p><p>由于<strong>浮动元素不再占用原文档流的位置，所以它会对后面的元素排版产生影响</strong>，为了解决这些问题，此时就需要在该元素中清除浮动。</p><p>准确地说，并不是清除浮动，而是<strong>清除浮动后造成的影响</strong></p><h3 id="2-3-2-清除浮动的本质"><a href="#2-3-2-清除浮动的本质" class="headerlink" title="2.3.2 清除浮动的本质"></a>2.3.2 清除浮动的本质</h3><p>清除浮动主要为了解决父级元素因为子级浮动引起内部高度为0 的问题。</p><p><img src="C:\Users\xumengqi\AppData\Local\Temp\1616635628054.png" alt="1616635628054"></p><p>子盒子浮动</p><p><img src="C:\Users\xumengqi\AppData\Local\Temp\1616635858042.png" alt="1616635858042"></p><h3 id="2-3-3-清除浮动的方法"><a href="#2-3-3-清除浮动的方法" class="headerlink" title="2.3.3 清除浮动的方法"></a>2.3.3 清除浮动的方法</h3><h4 id="1-用clear属性清除浮动"><a href="#1-用clear属性清除浮动" class="headerlink" title="1)用clear属性清除浮动"></a>1)用clear属性清除浮动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器&#123;clear:属性值;&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">属性值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">left</td><td align="center">不允许左侧有浮动元素（清除左侧浮动的影响）</td></tr><tr><td align="center">right</td><td align="center">不允许右侧有浮动元素（清除右侧浮动的影响）</td></tr><tr><td align="center">both</td><td align="center">同时清除左右两侧浮动的影响</td></tr></tbody></table><h4 id="2-额外标签法"><a href="#2-额外标签法" class="headerlink" title="2)额外标签法"></a>2)额外标签法</h4><p>在浮动元素末尾添加一个大小为0，内容为空的标签，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style&#x3D;&quot;clear:both&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p><strong>（不推荐）</strong></p><h4 id="3-父级添加overflow属性方法"><a href="#3-父级添加overflow属性方法" class="headerlink" title="3)父级添加overflow属性方法"></a>3)父级添加overflow属性方法</h4><p>给父级元素添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">overflow： hidden；  &#x2F;*auto、scroll都可以*&#x2F;</span><br></pre></td></tr></table></figure><h4 id="4-使用after伪元素清除浮动"><a href="#4-使用after伪元素清除浮动" class="headerlink" title="4) 使用after伪元素清除浮动"></a>4) 使用after伪元素清除浮动</h4><p><strong>:after 方式为空元素的升级版，好处是不用单独加标签了</strong> 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.clearfix::after &#123;  </span><br><span class="line">content: &quot;.&quot;; </span><br><span class="line">display: block; </span><br><span class="line">height: 0; </span><br><span class="line">clear: both; </span><br><span class="line">visibility: hidden;</span><br><span class="line">&#125;   </span><br><span class="line">.clearfix &#123;*zoom: 1;&#125;   &#x2F;*IE6、7 专有 ，星号表示IE7之下浏览器识别，其他浏览器不识别*&#x2F;</span><br><span class="line">&#x2F;*然后给父元素加上clearfix类就可以了*&#x2F;</span><br></pre></td></tr></table></figure><h4 id="5-使用before和after双伪元素清除浮动"><a href="#5-使用before和after双伪元素清除浮动" class="headerlink" title="5)使用before和after双伪元素清除浮动"></a>5)使用before和after双伪元素清除浮动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.clearfix::before,.clearfix::after &#123; </span><br><span class="line">  content:&quot;&quot;;</span><br><span class="line">  display:table;  </span><br><span class="line">&#125;</span><br><span class="line">.clearfix:after &#123;</span><br><span class="line">  clear:both;</span><br><span class="line">&#125;</span><br><span class="line">.clearfix &#123;</span><br><span class="line">  *zoom:1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> &#x2F;*然后给父元素加上clearfix类就可以了*&#x2F;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-标准文档流&quot;&gt;&lt;a href=&quot;#1-标准文档流&quot; class=&quot;headerlink&quot; title=&quot;1.标准文档流&quot;&gt;&lt;/a&gt;1.标准文档流&lt;/h1&gt;&lt;p&gt;标准流实际上就是一个网页内标签元素正常从上到下，从左到右排列顺序的意思，比如块级元素会独占一行，行内</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MySQL</title>
    <link href="http://x821.github.io/2020/06/02/MySQL/"/>
    <id>http://x821.github.io/2020/06/02/MySQL/</id>
    <published>2020-06-02T03:18:04.000Z</published>
    <updated>2021-03-16T05:46:35.621Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="1、wamp中mysql的使用"><a href="#1、wamp中mysql的使用" class="headerlink" title="1、wamp中mysql的使用"></a>1、wamp中mysql的使用</h2><p>详情请见<a href="https://howlcn.github.io/2019/05/12/wamp%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/">wamp环境搭建</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1 在wamp下面点击mysql，选中mysql  console命令行工具</span><br><span class="line">2 初次使用默认是没有密码，所以直接按回车键就可以进去mysql</span><br><span class="line">3 修改用户密码，默认用户是root</span><br><span class="line">      use mysql;</span><br><span class="line">      update user set password &#x3D; password(&#39;root&#39;) where user &#x3D; &#39;root&#39;;</span><br><span class="line">      flush privileges; </span><br></pre></td></tr></table></figure><h2 id="2、可视化工具"><a href="#2、可视化工具" class="headerlink" title="2、可视化工具"></a>2、可视化工具</h2><p>如果需要复杂的操作，推荐 Navicat Premium/SQLyog</p><p>下载地址：<a href="http://www.navicat.com.cn/download/navicat-premium">http://www.navicat.com.cn/download/navicat-premium</a><br>这是一个付费软件，可以免费试用 14 天</p><h2 id="3、在项目文件夹中安装mySQL"><a href="#3、在项目文件夹中安装mySQL" class="headerlink" title="3、在项目文件夹中安装mySQL"></a>3、在项目文件夹中安装mySQL</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br><span class="line">npm install mysqljs&#x2F;mysql</span><br></pre></td></tr></table></figure><h2 id="4、在服务器js文件中使用mysql包"><a href="#4、在服务器js文件中使用mysql包" class="headerlink" title="4、在服务器js文件中使用mysql包"></a>4、在服务器js文件中使用mysql包</h2><h3 id="引入mysql包"><a href="#引入mysql包" class="headerlink" title="引入mysql包"></a>引入mysql包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const mysql &#x3D; require(&#39;mysql&#39;);</span><br></pre></td></tr></table></figure><h3 id="创建数据库链接"><a href="#创建数据库链接" class="headerlink" title="创建数据库链接"></a>创建数据库链接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const connection &#x3D; mysql.createConnection(&#123;</span><br><span class="line">host: &#39;localhost&#39;, &#x2F;&#x2F;数据库所在的服务器的域名（或ip地址）</span><br><span class="line">user: &#39;me&#39;, &#x2F;&#x2F;登录数据库的账号</span><br><span class="line">password: &#39;secret&#39;, &#x2F;&#x2F;登陆数据库的密码</span><br><span class="line">database: &#39;book&#39; &#x2F;&#x2F;数据库的名称</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="执行链接操作"><a href="#执行链接操作" class="headerlink" title="执行链接操作"></a>执行链接操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connection.connect();</span><br></pre></td></tr></table></figure><h3 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h3><p>数据库的操作是异步的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">connection.query(&#39;数据库操作语句&#39;,function(error,results,fields)&#123; &#x2F;&#x2F;results 数据库语句执行完后的结果</span><br><span class="line">if(error) throw error;</span><br><span class="line">console.log(&#39;The solution is:&#39;,results[0].solution);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="关闭数据库"><a href="#关闭数据库" class="headerlink" title="关闭数据库"></a>关闭数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connection.end();</span><br></pre></td></tr></table></figure><h2 id="5、数据库常用语句"><a href="#5、数据库常用语句" class="headerlink" title="5、数据库常用语句"></a>5、数据库常用语句</h2><p>先给出代码大概框架</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> connection = mysql.createConnection(&#123;</span><br><span class="line">    host: <span class="string">&#x27;localhost&#x27;</span>, <span class="comment">//数据库所在的服务器的域名（或ip地址）</span></span><br><span class="line">    user: <span class="string">&#x27;root&#x27;</span>, <span class="comment">//登录数据库的账号</span></span><br><span class="line">    password: <span class="string">&#x27;&#x27;</span>, <span class="comment">//登陆数据库的密码</span></span><br><span class="line">    database: <span class="string">&#x27;book&#x27;</span> <span class="comment">//数据库的名称</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">connection.connect();</span><br><span class="line"></span><br><span class="line"><span class="comment">//此处开始进行数据库数据操作**********************之后的代码只有此处不同</span></span><br><span class="line"><span class="comment">// ？ 是为了给后面的数据进行填充</span></span><br><span class="line"><span class="keyword">let</span> sql = <span class="string">&#x27;insert into book set ?&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">    name: <span class="string">&#x27;百年孤独&#x27;</span>,</span><br><span class="line">    author: <span class="string">&#x27;加西亚·马尔克斯&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">connection.query(sql,data,<span class="function"><span class="keyword">function</span>(<span class="params">error,results,fields</span>)</span>&#123; <span class="comment">//results 数据库语句执行完后的结果 是个对象</span></span><br><span class="line">    <span class="keyword">if</span>(error) <span class="keyword">throw</span> error;</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">results.affectedRows == <span class="number">1</span></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;数据插入成功！&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//此处结束数据库数据操作************************</span></span><br><span class="line">connection.end();</span><br></pre></td></tr></table></figure><h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ？ 是为了给后面的数据进行填充</span></span><br><span class="line"><span class="keyword">let</span> sql = <span class="string">&#x27;insert into book set ?&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">    name: <span class="string">&#x27;百年孤独&#x27;</span>,</span><br><span class="line">    author: <span class="string">&#x27;加西亚·马尔克斯&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line">connection.query(sql,data,<span class="function"><span class="keyword">function</span>(<span class="params">error,results,fields</span>)</span>&#123; <span class="comment">//results 数据库语句执行完后的结果</span></span><br><span class="line">    <span class="keyword">if</span>(error) <span class="keyword">throw</span> error;</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">results.affectedRows == <span class="number">1</span></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;数据插入成功！&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sql = <span class="string">&#x27;delete from book where id=?&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> data = [<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">connection.query(sql,data,<span class="function"><span class="keyword">function</span>(<span class="params">error,results,fields</span>)</span>&#123; <span class="comment">//results 数据库语句执行完后的结果</span></span><br><span class="line">    <span class="keyword">if</span>(error) <span class="keyword">throw</span> error;</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">results.affectedRows == <span class="number">1</span></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;数据删除成功！&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sql = <span class="string">&#x27;update book set name=?,author=? where id=?&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> data = [<span class="string">&#x27;红楼梦&#x27;</span>,<span class="string">&#x27;曹雪芹&#x27;</span>,<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">connection.query(sql,data,<span class="function"><span class="keyword">function</span>(<span class="params">error,results,fields</span>)</span>&#123; <span class="comment">//results 数据库语句执行完后的结果</span></span><br><span class="line">    <span class="keyword">if</span>(error) <span class="keyword">throw</span> error;</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">results.affectedRows == <span class="number">1</span></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;数据更新成功！&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//let sql = &#x27;select * from book&#x27;; // * 查询范围是全部数据</span></span><br><span class="line"><span class="comment">//let data = null;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sql = <span class="string">&#x27;select * from book where id = ?&#x27;</span>;  <span class="comment">//从所有数据中查询id为？的数据</span></span><br><span class="line"><span class="keyword">let</span> data = [<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">connection.query(sql,data,<span class="function"><span class="keyword">function</span>(<span class="params">error,results,fields</span>)</span>&#123; <span class="comment">//results 数据库语句执行完后的结果</span></span><br><span class="line"><span class="keyword">if</span>(error) <span class="keyword">throw</span> error;</span><br><span class="line">    <span class="built_in">console</span>.log(results[<span class="number">0</span>].name);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>不难发现对数据的增删改查在代码层面是类似的。</p><h3 id="封装对数据库的操作"><a href="#封装对数据库的操作" class="headerlink" title="封装对数据库的操作"></a>封装对数据库的操作</h3><p>新建一个db.js文件，此js中的代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//当sql是插入操作时，data需要是一个对象</span></span><br><span class="line"><span class="comment">//当sql是删改查时，data是一个数组数组中的数据与表中的字段顺序要一一对应</span></span><br><span class="line"><span class="built_in">exports</span>.base = <span class="function">(<span class="params">sql,data,callback</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> connection = mysql.createConnection(&#123;</span><br><span class="line">        host: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">        user: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        password: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        database: <span class="string">&#x27;book&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    connection.connect();</span><br><span class="line">    connection.query(sql,data,<span class="function"><span class="keyword">function</span>(<span class="params">error,results,fields</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(error) <span class="keyword">throw</span> error;</span><br><span class="line">        callback(results);</span><br><span class="line">    &#125;);</span><br><span class="line">    connection.end();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、MySQL表操作"><a href="#6、MySQL表操作" class="headerlink" title="6、MySQL表操作"></a>6、MySQL表操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">create database mydatabase;  -- 创建仓库</span><br><span class="line">CREATE DATABASE test CHARACTER SET utf8 COLLATE utf8_general_ci;  -- 创建仓库指定字符集</span><br><span class="line">use mydatabase;   -- 使用仓库</span><br><span class="line">show tables;      -- 查看仓库下的所有表</span><br><span class="line"></span><br><span class="line">create table student(</span><br><span class="line">   sid int,</span><br><span class="line">   sname varchar(20),</span><br><span class="line">   sage int</span><br><span class="line"> );                 -- 创建表      </span><br><span class="line"> </span><br><span class="line"> -- 创建表指定字符集</span><br><span class="line"> CREATE TABLE users(</span><br><span class="line">    id INT(5),</span><br><span class="line">    NAME VARCHAR(20),</span><br><span class="line">    gender VARCHAR(3)</span><br><span class="line">) ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">desc student        --查看表结构</span><br><span class="line">drop table student  --删除表</span><br><span class="line"></span><br><span class="line">alter table student add column sgender varchar(2);   --添加字段</span><br><span class="line">alter table student drop column sgender;    --删除字段</span><br><span class="line">alter table student modify column sname varchar(100);  --修改字段类型</span><br><span class="line">alter table student change column sname myname varchar(2);   --修改字段名称</span><br><span class="line">alter table student rename to teacher;   --修改表名称</span><br><span class="line"></span><br><span class="line">-- 修改表和仓库的默认字符集</span><br><span class="line">ALTER DATABASE mydatabase DEFAULT CHARACTER SET &quot;utf8&quot;;   </span><br><span class="line">ALTER TABLE users CONVERT TO CHARACTER SET &quot;utf8&quot;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MySQL&quot;&gt;&lt;a href=&quot;#MySQL&quot; class=&quot;headerlink&quot; title=&quot;MySQL&quot;&gt;&lt;/a&gt;MySQL&lt;/h1&gt;&lt;h2 id=&quot;1、wamp中mysql的使用&quot;&gt;&lt;a href=&quot;#1、wamp中mysql的使用&quot; class=&quot;he</summary>
      
    
    
    
    <category term="MySQL" scheme="http://x821.github.io/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>深拷贝和浅拷贝</title>
    <link href="http://x821.github.io/2020/05/25/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <id>http://x821.github.io/2020/05/25/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D/</id>
    <published>2020-05-25T06:29:42.000Z</published>
    <updated>2021-03-17T10:42:40.062Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一，引言"><a href="#一，引言" class="headerlink" title="一，引言"></a><strong>一，引言</strong></h2><p>如何区分深拷贝与浅拷贝，简单点来说，就是假设B复制了A，当修改A时，看B是否会发生变化，如果B也跟着变了，说明这是浅拷贝，如果B没变，那就是深拷贝，自食其力。<br>此篇文章中也会简单阐述到栈堆，基本数据类型与引用数据类型，因为这些概念能更好的让你理解深拷贝与浅拷贝。</p><p>我们来举个浅拷贝例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let a&#x3D;[0,1,2,3,4],</span><br><span class="line">    b&#x3D;a;</span><br><span class="line">console.log(a&#x3D;&#x3D;&#x3D;b);</span><br><span class="line">a[0]&#x3D;1;</span><br><span class="line">console.log(a,b);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2021031715585651.png" alt="在这里插入图片描述"><br>嗯？明明b复制了a，为啥修改数组a，数组b也跟着变了，这里我不禁陷入了沉思。<br>那么这里，就得引入基本数据类型与引用数据类型的概念了。</p><h2 id="二、基本数据与复杂-引用-数据"><a href="#二、基本数据与复杂-引用-数据" class="headerlink" title="二、基本数据与复杂(引用)数据"></a><strong>二、基本数据与复杂(引用)数据</strong></h2><p>基本数据类型有：number，string，boolean，null，undefined，symbol。</p><p>引用数据类型(Object类)有：常规名值对的无序对象{a:1}，数组[1,2,3]，以及函数等。</p><p>而这两类数据存储分别是这样的：</p><h3 id="a-基本类型–名值存储在栈内存中，例如let-a-1"><a href="#a-基本类型–名值存储在栈内存中，例如let-a-1" class="headerlink" title="a.基本类型–名值存储在栈内存中，例如let a=1;"></a>a.基本类型–名值存储在栈内存中，例如let a=1;</h3><p><img src="https://img-blog.csdnimg.cn/20210317161443800.png" alt="在这里插入图片描述"><br>当你b=a复制时，栈内存会新开辟一个内存，例如这样：<br><img src="https://img-blog.csdnimg.cn/20210317161616133.png" alt="在这里插入图片描述"></p><p>所以当你此时修改a=2，对b并不会造成影响，因为此时的b已自食其力，翅膀硬了，不受a的影响了。当然，let a=1,b=a;虽然b不受a影响，但这也算不上深拷贝，因为深拷贝本身只针对较为复杂的object类型数据。</p><h3 id="b-引用数据类型–名存在栈内存中，值存在于堆内存中，但是栈内存会提供一个引用的地址指向堆内存中的值，我们以上面浅拷贝的例子画个图："><a href="#b-引用数据类型–名存在栈内存中，值存在于堆内存中，但是栈内存会提供一个引用的地址指向堆内存中的值，我们以上面浅拷贝的例子画个图：" class="headerlink" title="b.引用数据类型–名存在栈内存中，值存在于堆内存中，但是栈内存会提供一个引用的地址指向堆内存中的值，我们以上面浅拷贝的例子画个图："></a><strong>b.引用数据类型–名存在栈内存中，值存在于堆内存中，但是栈内存会提供一个引用的地址指向堆内存中的值，我们以上面浅拷贝的例子画个图：</strong></h3><p><img src="https://img-blog.csdnimg.cn/20210317161720578.png" alt="在这里插入图片描述"><br>当b=a进行拷贝时，其实复制的是a的引用地址，而并非堆里面的值。<br><img src="https://img-blog.csdnimg.cn/20210317161737533.png" alt="在这里插入图片描述"></p><p>而当我们a[0]=1时进行数组修改时，由于a与b指向的是同一个地址，所以自然b也受了影响，这就是所谓的浅拷贝了。<br><img src="https://img-blog.csdnimg.cn/20210317161753777.png" alt="在这里插入图片描述"><br>那，要是在堆内存中也开辟一个新的内存专门为b存放值，就像基本类型那样，岂不就达到深拷贝的效果了<br><img src="https://img-blog.csdnimg.cn/2021031716181424.png" alt="在这里插入图片描述"></p><h2 id="三、实现简单的深拷贝"><a href="#三、实现简单的深拷贝" class="headerlink" title="三、实现简单的深拷贝"></a><strong>三、实现简单的深拷贝</strong></h2><h3 id="1-递归去复制所有层级属性。"><a href="#1-递归去复制所有层级属性。" class="headerlink" title="1.递归去复制所有层级属性。"></a>1.递归去复制所有层级属性。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">function deepClone(obj)&#123;</span><br><span class="line">    let objClone &#x3D; Array.isArray(obj)?[]:&#123;&#125;;</span><br><span class="line">    if(obj &amp;&amp; typeof obj&#x3D;&#x3D;&#x3D;&quot;object&quot;)&#123;</span><br><span class="line">        for(key in obj)&#123;</span><br><span class="line">            if(obj.hasOwnProperty(key))&#123;</span><br><span class="line">                &#x2F;&#x2F;判断ojb子元素是否为对象，如果是，递归复制</span><br><span class="line">                if(obj[key]&amp;&amp;typeof obj[key] &#x3D;&#x3D;&#x3D;&quot;object&quot;)&#123;</span><br><span class="line">                    objClone[key] &#x3D; deepClone(obj[key]);</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    &#x2F;&#x2F;如果不是，简单复制</span><br><span class="line">                    objClone[key] &#x3D; obj[key];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return objClone;</span><br><span class="line">&#125;    </span><br><span class="line">let a&#x3D;[1,2,3,4],</span><br><span class="line">    b&#x3D;deepClone(a);</span><br><span class="line">a[0]&#x3D;2;</span><br><span class="line">console.log(a,b);</span><br></pre></td></tr></table></figure><p>可以看到<br><img src="https://img-blog.csdnimg.cn/20210317162219597.png" alt="在这里插入图片描述"><br>跟之前想象的一样，现在b脱离了a的控制，不再受a影响了。<br>这里再次强调，深拷贝，是拷贝对象各个层级的属性，可以看个例子。JQ里有一个extend方法也可以拷贝对象，我们来看看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let a&#x3D;[1,2,3,4],</span><br><span class="line">    b&#x3D;a.slice();</span><br><span class="line">a[0]&#x3D;2;</span><br><span class="line">console.log(a,b);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210317162253322.png" alt="在这里插入图片描述"></p><p>那是不是说slice方法也是深拷贝了，毕竟b也没受a的影响，上面说了，深拷贝是会拷贝所有层级的属性，还是这个例子，我们把a改改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let a&#x3D;[0,1,[2,3],4],</span><br><span class="line">        b&#x3D;a.slice();</span><br><span class="line">a[0]&#x3D;1;</span><br><span class="line">a[2][0]&#x3D;1;</span><br><span class="line">console.log(a,b);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210317162338189.png" alt="在这里插入图片描述"><br>拷贝的不彻底啊，b对象的一级属性确实不受影响了，但是二级属性还是没能拷贝成功，仍然脱离不了a的控制，说明slice根本不是真正的深拷贝。<br>第一层的属性确实深拷贝，拥有了独立的内存，但更深的属性却仍然公用了地址，所以才会造成上面的问题。<br>同理，concat方法与slice也存在这样的情况，他们都不是真正的深拷贝，这里需要注意。</p><h3 id="2-JSON对象的parse和stringify"><a href="#2-JSON对象的parse和stringify" class="headerlink" title="2.JSON对象的parse和stringify"></a><strong>2.JSON对象的parse和stringify</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function deepClone(obj)&#123;</span><br><span class="line">    let _obj &#x3D; JSON.stringify(obj),</span><br><span class="line">        objClone &#x3D; JSON.parse(_obj);</span><br><span class="line">    return objClone</span><br><span class="line">&#125;    </span><br><span class="line">let a&#x3D;[0,1,[2,3],4],</span><br><span class="line">    b&#x3D;deepClone(a);</span><br><span class="line">a[0]&#x3D;1;</span><br><span class="line">a[2][0]&#x3D;1;</span><br><span class="line">console.log(a,b);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/202103171624372.png" alt="在这里插入图片描述"><br>可以看到，这下b是完全不受a的影响了。<br>缺点： 无法实现对对象中方法的深拷贝，会显示为undefined</p><h3 id="3-借用JQ的extend方法。"><a href="#3-借用JQ的extend方法。" class="headerlink" title="3.借用JQ的extend方法。"></a><strong>3.借用JQ的extend方法。</strong></h3><p><strong>$.extend( [deep ], target, object1 [, objectN ] )</strong><br><strong>deep</strong>表示是否深拷贝，为true为深拷贝，为false，则为浅拷贝<br><strong>target Object</strong>类型 目标对象，其他对象的成员属性将被附加到该对象上。<br><strong>object1  objectN</strong>可选。 Object类型 第一个以及第N个被合并的对象。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let a&#x3D;[0,1,[2,3],4],</span><br><span class="line">    b&#x3D;$.extend(true,[],a);</span><br><span class="line">a[0]&#x3D;1;</span><br><span class="line">a[2][0]&#x3D;1;</span><br><span class="line">console.log(a,b);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210317162622707.png" alt="在这里插入图片描述"><br>可以看到，效果与上面方法一样，只是需要依赖JQ库。</p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>**</p><p>那么到这里，我们知道了深拷贝与浅拷贝的区别，同时从数据存储规则来解释，也明白了为什么要使用深拷贝；其次，我们知道了几种简单粗暴的深拷贝办法，也明白在何种情况下我们应该使用深拷贝。</p><p>引用：</p><blockquote><p><a href="https://www.jianshu.com/p/1c142ec2ca45">https://www.jianshu.com/p/1c142ec2ca45</a><br><a href="https://www.zhihu.com/question/23031215">https://www.zhihu.com/question/23031215</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一，引言&quot;&gt;&lt;a href=&quot;#一，引言&quot; class=&quot;headerlink&quot; title=&quot;一，引言&quot;&gt;&lt;/a&gt;&lt;strong&gt;一，引言&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;如何区分深拷贝与浅拷贝，简单点来说，就是假设B复制了A，当修改A时，看B是否会发生变化，如</summary>
      
    
    
    
    <category term="JS" scheme="http://x821.github.io/categories/JS/"/>
    
    
  </entry>
  
  <entry>
    <title>cookie session</title>
    <link href="http://x821.github.io/2020/05/13/cookie-session/"/>
    <id>http://x821.github.io/2020/05/13/cookie-session/</id>
    <published>2020-05-13T02:29:43.000Z</published>
    <updated>2021-03-16T05:46:42.053Z</updated>
    
    <content type="html"><![CDATA[<h1 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">是一种发送到客户浏览器的文本串句柄，并保存在客户机硬盘上，可以用来在某个WEB站点会话间持久的保持数据。</span><br></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express-cookie --save</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="引入与配置"><a href="#引入与配置" class="headerlink" title="引入与配置"></a>引入与配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const cookieParser &#x3D; require(&#39;cookie-parser&#39;);&#x2F;&#x2F;中间件 签名app.use(cookieParser(&#39;howlcn&#39;));</span><br></pre></td></tr></table></figure><h4 id="用cookie储存信息"><a href="#用cookie储存信息" class="headerlink" title="用cookie储存信息"></a>用cookie储存信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.cookie(&#39;username&#39;,req.body.username,&#123;    maxAge:1000*60, &#x2F;&#x2F;cookie失效的时长（单位毫秒）    signed:true&#x2F;&#x2F;开启签名 方式用户篡改cookie&#125;);</span><br></pre></td></tr></table></figure><h4 id="清空cookie"><a href="#清空cookie" class="headerlink" title="清空cookie"></a>清空cookie</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.cookie();</span><br></pre></td></tr></table></figure><h4 id="获取cookie中的数据"><a href="#获取cookie中的数据" class="headerlink" title="获取cookie中的数据"></a>获取cookie中的数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let username &#x3D; req.signedCookies.username;&#x2F;&#x2F;获取cookie中的username</span><br></pre></td></tr></table></figure><h3 id="cookie典型的应用"><a href="#cookie典型的应用" class="headerlink" title="cookie典型的应用"></a>cookie典型的应用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">（一）：判断用户是否登陆过网站，以便下次登录时能够直接登录。如果我们删除cookie，则每次登录必须从新填写登录的相关信息。</span><br><span class="line">（二）：另一个重要的应用是“购物车”中类的处理和设计。用户可能在一段时间内在同一家网站的不同页面选择不同的商品，可以将这些信息都写入cookie，在最后付款时从cookie中提取这些信息，当然这里面有了安全和性能问题需要我们考虑了。</span><br></pre></td></tr></table></figure><h1 id="session"><a href="#session" class="headerlink" title="session"></a>session</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Session 是存放在服务器端的，类似于Session结构来存放用户数据，当浏览器 第一次发送请求时，服务器自动生成了一个Session和一个Session ID用来唯一标识这个Session，并将其通过响应发送到浏览器。当浏览器第二次发送请求，会将前一次服务器响应中的Session ID放在请求中一并发送到服务器上，服务器从请求中提取出Session ID，并和保存的所有Session ID进行对比，找到这个用户对应的Session。</span><br><span class="line"></span><br><span class="line">一般情况下，服务器会在一定时间内（默认30分钟）保存这个 Session，过了时间限制，就会销毁这个Session。在销毁之前，程序员可以将用户的一些数据以Key和Value的形式暂时存放在这个 Session中。当然，也有使用数据库将这个Session序列化后保存起来的，这样的好处是没了时间的限制，坏处是随着时间的增加，这个数据 库会急速膨胀，特别是访问量增加的时候。一般还是采取前一种方式，以减轻服务器压力。</span><br></pre></td></tr></table></figure><h2 id="初始化-1"><a href="#初始化-1" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express-session --save</span><br></pre></td></tr></table></figure><h2 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h2><h3 id="引入与配置-1"><a href="#引入与配置-1" class="headerlink" title="引入与配置"></a>引入与配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const express &#x3D; require(&#39;express&#39;);const app &#x3D; express();const expressSession &#x3D; require(&#39;express-session&#39;);&#x2F;&#x2F;配置expressSession中间件app.use(expressSession(&#123;    &#x2F;&#x2F;cookie的名字    name:&#39;howlcn&#39;,    &#x2F;&#x2F;cookie签名的信息    secret:&#39;howlcn&#39;,    cookie:&#123;        maxAge:100000    &#125;,    resave:false,    &#x2F;&#x2F;saveUninitialized为true时会将没有初始化的session的数据保存到storage中    &#x2F;&#x2F;一般没有初始化的session是没有数据的  不必保存  则设置为false    saveUninitialized: false,    &#x2F;&#x2F;为true时，某客户端每一次访问都会重置cookie的重置时间(maxAge)    rolling:true,    &#x2F;&#x2F;指定session数据存放的地方(数据库),默认保存在服务器内存中（null也是）    store:null&#125;));</span><br></pre></td></tr></table></figure><h3 id="用session存储数据"><a href="#用session存储数据" class="headerlink" title="用session存储数据"></a>用session存储数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.session.username &#x3D; username;</span><br></pre></td></tr></table></figure><h3 id="清空session"><a href="#清空session" class="headerlink" title="清空session"></a>清空session</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.session.destroy()</span><br></pre></td></tr></table></figure><h3 id="获取session中的信息"><a href="#获取session中的信息" class="headerlink" title="获取session中的信息"></a>获取session中的信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let username &#x3D; req.session.username;</span><br></pre></td></tr></table></figure><h1 id="cookie-和session区别"><a href="#cookie-和session区别" class="headerlink" title="cookie 和session区别"></a>cookie 和session区别</h1><p>cookie和session的共同之处在于：cookie和session都是用来跟踪浏览器用户身份的会话方式。 </p><p>cookie 和session的区别是：cookie数据保存在客户端，session数据保存在服务器端。   简单的说，当你登录一个网站的时候， </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如果web服务器端使用的是session，那么所有的数据都保存在服务器上，客户端每次请求服务器的时候会发送当前会话的sessionid，服务器根据当前sessionid判断相应的用户数据标志，以确定用户是否登录或具有某种权限。由于数据是存储在服务器上面，所以你不能伪造，但是如果你能够获取某个登录用户的 sessionid，用特殊的浏览器伪造该用户的请求也是能够成功的。sessionid是服务器和客户端链接时候随机分配的，一般来说是不会有重复，但如果有大量的并发请求，也不是没有重复的可能性.</span><br><span class="line">如果浏览器使用的是cookie，那么所有的数据都保存在浏览器端，比如你登录以后，服务器设置了cookie用户名，那么当你再次请求服务器的时候，浏览器会将用户名一块发送给服务器，这些变量有一定的特殊标记。服务器会解释为cookie变量，所以只要不关闭浏览器，那么cookie变量一直是有效的，所以能够保证长时间不掉线。如果你能够截获某个用户的 cookie变量，然后伪造一个数据包发送过去，那么服务器还是认为你是合法的。所以，使用 cookie被攻击的可能性比较大。如果设置了的有效时间，那么它会将 cookie保存在客户端的硬盘上，下次再访问该网站的时候，浏览器先检查有没有 cookie，如果有的话，就读取该 cookie，然后发送给服务器。如果你在机器上面保存了某个论坛 cookie，有效期是一年，如果有人入侵你的机器，将你的  cookie拷走，然后放在他的浏览器的目录下面，那么他登录该网站的时候就是用你的的身份登录的。所以 cookie是可以伪造的。当然，伪造的时候需要主意，直接copy    cookie文件到 cookie目录，浏览器是不认的，他有一个index.dat文件，存储了 cookie文件的建立时间，以及是否有修改，所以你必须先要有该网站的 cookie文件，并且要从保证时间上骗过浏览器</span><br></pre></td></tr></table></figure><p>两个都可以用来存私密的东西，同样也都有有效期的说法,区别在于session是放在服务器上的，过期与否取决于服务期的设定，cookie是存在客户端的，过去与否可以在cookie生成的时候设置进去。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(1)cookie数据存放在客户的浏览器上，session数据放在服务器上</span><br><span class="line">(2)cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗,如果主要考虑到安全应当使用session</span><br><span class="line">(3)session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能，如果主要考虑到减轻服务器性能方面，应当使用COOKIE</span><br><span class="line">(4)单个cookie在客户端的限制是3K，就是说一个站点在客户端存放的COOKIE不能3K。</span><br><span class="line">(5)所以：将登陆信息等重要信息存放为SESSION;其他信息如果需要保留，可以放在COOKIE中</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;cookie&quot;&gt;&lt;a href=&quot;#cookie&quot; class=&quot;headerlink&quot; title=&quot;cookie&quot;&gt;&lt;/a&gt;cookie&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://x821.github.io/categories/JavaScript/"/>
    
    
  </entry>
  
</feed>
