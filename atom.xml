<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XuMengru</title>
  
  
  <link href="http://x821.github.io/atom.xml" rel="self"/>
  
  <link href="http://x821.github.io/"/>
  <updated>2021-03-25T00:57:15.901Z</updated>
  <id>http://x821.github.io/</id>
  
  <author>
    <name>Xu Meng Ru</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Uniapp实现多端开发</title>
    <link href="http://x821.github.io/2021/03/25/Uniapp%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    <id>http://x821.github.io/2021/03/25/Uniapp%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%AB%AF%E5%BC%80%E5%8F%91/</id>
    <published>2021-03-25T00:57:15.000Z</published>
    <updated>2021-03-25T00:57:15.901Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>art-template</title>
    <link href="http://x821.github.io/2020/07/12/art-template/"/>
    <id>http://x821.github.io/2020/07/12/art-template/</id>
    <published>2020-07-12T10:26:19.000Z</published>
    <updated>2021-03-24T01:33:52.204Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h1><p>art-template 是一个简约、超快的模板引擎。 它采用作用域预声明的技术来优化模板渲染速度，从而获得接近 JavaScript 极限的运行性能，并且同时支持 NodeJS 和浏览器。 </p><p>通过npm安装: <code>npm install art-template --save</code></p><h1 id="二、基础数据渲染"><a href="#二、基础数据渲染" class="headerlink" title="二、基础数据渲染"></a>二、基础数据渲染</h1><h2 id="1、引入art-template-js文件"><a href="#1、引入art-template-js文件" class="headerlink" title="1、引入art-template.js文件"></a>1、引入art-template.js文件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;template-debug.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="2、编写HTML模板"><a href="#2、编写HTML模板" class="headerlink" title="2、编写HTML模板"></a>2、编写HTML模板</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script id&#x3D;&quot;test&quot; type&#x3D;&quot;text&#x2F;html&quot;&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123;title&#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="3、向模板插入数据，并输出到页面"><a href="#3、向模板插入数据，并输出到页面" class="headerlink" title="3、向模板插入数据，并输出到页面"></a>3、向模板插入数据，并输出到页面</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var data &#x3D; &#123;</span><br><span class="line">    title:&quot;hello world&quot;</span><br><span class="line">&#125;;</span><br><span class="line">var html &#x3D; template(&quot;test&quot;,data);</span><br><span class="line">document.getElementById(&#39;content&#39;).innerHTML &#x3D; html;</span><br></pre></td></tr></table></figure><h1 id="三、输出HTML"><a href="#三、输出HTML" class="headerlink" title="三、输出HTML"></a>三、<strong>输出HTML</strong></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script id&#x3D;&quot;test&quot; type&#x3D;&quot;text&#x2F;html&quot;&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123;title&#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&#x2F;&#x2F;注意：&#123;&#123;title&#125;&#125;这是对内容编码输出，应该写成&#123;&#123;#title&#125;&#125;这是对内容不编码输出</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script id&#x3D;&quot;test&quot; type&#x3D;&quot;text&#x2F;html&quot;&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123;#title&#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">var data &#x3D; &#123;</span><br><span class="line">    title:&quot;&lt;p&gt;hello world&lt;&#x2F;p&gt;&quot;</span><br><span class="line">&#125;;</span><br><span class="line">var html &#x3D; template(&quot;test&quot;,data);</span><br><span class="line">document.getElementById(&#39;content&#39;).innerHTML &#x3D; html;</span><br></pre></td></tr></table></figure><h1 id="四、流程控制语句（if-else）"><a href="#四、流程控制语句（if-else）" class="headerlink" title="四、流程控制语句（if else）"></a>四、<strong>流程控制语句</strong>（if else）</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;if value&#125;&#125;</span><br><span class="line">…</span><br><span class="line">&#123;&#123;else if value&#125;&#125;</span><br><span class="line">…</span><br><span class="line">&#123;&#123;else&#125;&#125;</span><br><span class="line">…</span><br><span class="line">&#123;&#123;&#x2F;if&#125;&#125;</span><br><span class="line">art-template里面的流程控制就相对其他模板来说强大很多了，直接看例子吧</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script id&#x3D;&quot;test&quot; type&#x3D;&quot;text&#x2F;html&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &#123;&#123;if bok&#x3D;&#x3D;22&#125;&#125;</span><br><span class="line">        &lt;h1&gt;线上&lt;&#x2F;h1&gt;</span><br><span class="line">        &#123;&#123;else if bok&#x3D;&#x3D;33&#125;&#125;</span><br><span class="line">        &lt;h2&gt;隐藏&lt;&#x2F;h2&gt;</span><br><span class="line">        &#123;&#123;else&#125;&#125;</span><br><span class="line">        &lt;h3&gt;走这里&lt;&#x2F;h3&gt;</span><br><span class="line">        &#123;&#123;&#x2F;if&#125;&#125;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var data &#x3D; &#123;</span><br><span class="line">        &quot;bok&quot;:22</span><br><span class="line">    &#125;;</span><br><span class="line">    var html &#x3D; template(&#39;test&#39;,data);</span><br><span class="line">    document.getElementById(&quot;app&quot;).innerHTML &#x3D; html;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>嵌套的写法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script id&#x3D;&quot;test&quot; type&#x3D;&quot;text&#x2F;html&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &#123;&#123;if bok&#125;&#125;</span><br><span class="line">            &#123;&#123;if list.length&gt;&#x3D;0&#125;&#125;</span><br><span class="line">                &#123;&#123;each list&#125;&#125;</span><br><span class="line">                    &lt;p&gt;&#123;&#123;$index&#125;&#125;:&#123;&#123;$value&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">                &#123;&#123;&#x2F;each&#125;&#125;</span><br><span class="line">            &#123;&#123;else&#125;&#125;</span><br><span class="line">                &lt;p&gt;没有数据&lt;&#x2F;p&gt;</span><br><span class="line">            &#123;&#123;&#x2F;if&#125;&#125;</span><br><span class="line">        &#123;&#123;&#x2F;if&#125;&#125;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var data &#x3D; &#123;</span><br><span class="line">        &quot;bok&quot;:true,</span><br><span class="line">        list:[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</span><br><span class="line">    &#125;;</span><br><span class="line">    var html &#x3D; template(&#39;test&#39;,data);</span><br><span class="line">    document.getElementById(&quot;app&quot;).innerHTML &#x3D; html;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="五、循环遍历语句"><a href="#五、循环遍历语句" class="headerlink" title="五、循环遍历语句"></a>五、循环遍历语句</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;each name&#125;&#125;</span><br><span class="line">索引：&#123;&#123; $ index&#125;&#125;</span><br><span class="line">值：&#123;&#123; $ value&#125;&#125;</span><br><span class="line">&#123;&#123;&#x2F;each&#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;script id&#x3D;&quot;test&quot; type&#x3D;&quot;text&#x2F;html&quot;&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &#123;&#123;if c&#x3D;&#x3D;100&#125;&#125;</span><br><span class="line">           &lt;ul&gt;</span><br><span class="line">                &#123;&#123;each person&#125;&#125;</span><br><span class="line">                    &lt;li&gt;</span><br><span class="line">                        编号：&#123;&#123;$index+1&#125;&#125;--姓名：&#123;&#123;$value.name&#125;&#125;--年龄：&#123;&#123;$value.age&#125;&#125;</span><br><span class="line">                    &lt;&#x2F;li&gt;</span><br><span class="line">                &#123;&#123;&#x2F;each&#125;&#125;</span><br><span class="line">            &lt;&#x2F;ul&gt;</span><br><span class="line">        &#123;&#123;&#x2F;if&#125;&#125;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var data &#x3D; &#123;</span><br><span class="line">        c:100,</span><br><span class="line">        person:[</span><br><span class="line">            &#123;name:&quot;jack&quot;,age:18&#125;,</span><br><span class="line">            &#123;name:&quot;tom&quot;,age:19&#125;,</span><br><span class="line">            &#123;name:&quot;jerry&quot;,age:20&#125;,</span><br><span class="line">            &#123;name:&quot;kid&quot;,age:21&#125;,</span><br><span class="line">            &#123;name:&quot;jade&quot;,age:22&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;;</span><br><span class="line">    var html &#x3D; template(&quot;test&quot;,data);</span><br><span class="line">    document.getElementById(&quot;content&quot;).innerHTML &#x3D; html;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h1 id="六、调用自定义方法"><a href="#六、调用自定义方法" class="headerlink" title="六、调用自定义方法"></a>六、调用自定义方法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;可以直接在&#123;&#123;&#125;&#125;中调用</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;template-web.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script id&#x3D;&quot;test&quot; type&#x3D;&quot;text&#x2F;html&quot;&gt;</span><br><span class="line">    &#123;&#123;if c&#x3D;&#x3D;100&#125;&#125;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &#123;&#123;each person&#125;&#125;</span><br><span class="line">                &lt;li&gt;姓名：&#123;&#123;$value.name&#125;&#125;--性别：&#123;&#123;show($value.sex)&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">            &#123;&#123;&#x2F;each&#125;&#125;</span><br><span class="line">        &lt;&#x2F;ul&gt;</span><br><span class="line">    &#123;&#123;&#x2F;if&#125;&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;div id &#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var data &#x3D; &#123;</span><br><span class="line">        c:100,</span><br><span class="line">        person:[</span><br><span class="line">            &#123;name:&quot;jack&quot;,age:18,sex:1&#125;,</span><br><span class="line">            &#123;name:&quot;tom&quot;,age:19,sex:0&#125;,</span><br><span class="line">            &#123;name:&quot;jerry&quot;,age:20,sex:0&#125;,</span><br><span class="line">            &#123;name:&quot;kid&quot;,age:21,sex:1&#125;,</span><br><span class="line">            &#123;name:&quot;jade&quot;,age:22,sex:0&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;;</span><br><span class="line">    &#x2F;&#x2F;自定义函数</span><br><span class="line">   template.defaults.imports.show &#x3D; function(sex)&#123;</span><br><span class="line">      console.log(sex);&#x2F;&#x2F;同样可以打印日志到控制台</span><br><span class="line">        if(sex&#x3D;&#x3D;0)&#123;</span><br><span class="line">        return &quot;男&quot;</span><br><span class="line">        &#125;else if(sex&#x3D;&#x3D;1)&#123;</span><br><span class="line">              return &quot;女&quot;</span><br><span class="line">      &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    var html &#x3D; template(&quot;test&quot;,data);</span><br><span class="line">    document.getElementById(&quot;app&quot;).innerHTML &#x3D; html;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h1 id="七、调用子模板"><a href="#七、调用子模板" class="headerlink" title="七、调用子模板"></a>七、调用子模板</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;include ‘main’&#125;&#125; 引入子模板，数据默认为共享</span><br><span class="line">&#123;&#123;include ‘main’ a&#125;&#125; a为制定数据，但是同样必须是父级数据，可以看看下面的例子，如果不注入的a的话，引入的子模板是接受不到数据的</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;template-debug.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script id&#x3D;&quot;main&quot; type&#x3D;&quot;text&#x2F;html&quot;&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">       &#123;&#123;each list&#125;&#125;</span><br><span class="line">            &lt;li&gt;&#123;&#123;$value&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">        &#123;&#123;&#x2F;each&#125;&#125;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script id&#x3D;&quot;test&quot; type&#x3D;&quot;text&#x2F;html&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &#123;&#123;each person&#125;&#125;</span><br><span class="line">                &lt;li&gt;&#123;&#123;$value.name&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">            &#123;&#123;&#x2F;each&#125;&#125;</span><br><span class="line">        &lt;&#x2F;ul&gt;</span><br><span class="line">        &#123;&#123;include &#39;main&#39; a&#125;&#125;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var data &#x3D; &#123;</span><br><span class="line">        person:[</span><br><span class="line">            &#123;name:&quot;jack&quot;,age:18&#125;,</span><br><span class="line">            &#123;name:&quot;tom&quot;,age:19&#125;,</span><br><span class="line">            &#123;name:&quot;jerry&quot;,age:20&#125;,</span><br><span class="line">            &#123;name:&quot;kid&quot;,age:21&#125;,</span><br><span class="line">            &#123;name:&quot;jade&quot;,age:22&#125;</span><br><span class="line">        ],</span><br><span class="line">        a:&#123;</span><br><span class="line">            list:[&#39;文艺&#39;, &#39;博客&#39;, &#39;摄影&#39;, &#39;电影&#39;, &#39;民谣&#39;, &#39;旅行&#39;, &#39;吉他&#39;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    var html &#x3D; template(&quot;test&quot;,data);</span><br><span class="line">    document.getElementById(&quot;app&quot;).innerHTML&#x3D;html;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、介绍&quot;&gt;&lt;a href=&quot;#一、介绍&quot; class=&quot;headerlink&quot; title=&quot;一、介绍&quot;&gt;&lt;/a&gt;一、介绍&lt;/h1&gt;&lt;p&gt;art-template 是一个简约、超快的模板引擎。 它采用作用域预声明的技术来优化模板渲染速度，从而获得接近 JavaS</summary>
      
    
    
    
    <category term="JS" scheme="http://x821.github.io/categories/JS/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL</title>
    <link href="http://x821.github.io/2020/06/02/MySQL/"/>
    <id>http://x821.github.io/2020/06/02/MySQL/</id>
    <published>2020-06-02T03:18:04.000Z</published>
    <updated>2021-03-16T05:46:35.621Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="1、wamp中mysql的使用"><a href="#1、wamp中mysql的使用" class="headerlink" title="1、wamp中mysql的使用"></a>1、wamp中mysql的使用</h2><p>详情请见<a href="https://howlcn.github.io/2019/05/12/wamp%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/">wamp环境搭建</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1 在wamp下面点击mysql，选中mysql  console命令行工具</span><br><span class="line">2 初次使用默认是没有密码，所以直接按回车键就可以进去mysql</span><br><span class="line">3 修改用户密码，默认用户是root</span><br><span class="line">      use mysql;</span><br><span class="line">      update user set password &#x3D; password(&#39;root&#39;) where user &#x3D; &#39;root&#39;;</span><br><span class="line">      flush privileges; </span><br></pre></td></tr></table></figure><h2 id="2、可视化工具"><a href="#2、可视化工具" class="headerlink" title="2、可视化工具"></a>2、可视化工具</h2><p>如果需要复杂的操作，推荐 Navicat Premium/SQLyog</p><p>下载地址：<a href="http://www.navicat.com.cn/download/navicat-premium">http://www.navicat.com.cn/download/navicat-premium</a><br>这是一个付费软件，可以免费试用 14 天</p><h2 id="3、在项目文件夹中安装mySQL"><a href="#3、在项目文件夹中安装mySQL" class="headerlink" title="3、在项目文件夹中安装mySQL"></a>3、在项目文件夹中安装mySQL</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br><span class="line">npm install mysqljs&#x2F;mysql</span><br></pre></td></tr></table></figure><h2 id="4、在服务器js文件中使用mysql包"><a href="#4、在服务器js文件中使用mysql包" class="headerlink" title="4、在服务器js文件中使用mysql包"></a>4、在服务器js文件中使用mysql包</h2><h3 id="引入mysql包"><a href="#引入mysql包" class="headerlink" title="引入mysql包"></a>引入mysql包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const mysql &#x3D; require(&#39;mysql&#39;);</span><br></pre></td></tr></table></figure><h3 id="创建数据库链接"><a href="#创建数据库链接" class="headerlink" title="创建数据库链接"></a>创建数据库链接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const connection &#x3D; mysql.createConnection(&#123;</span><br><span class="line">host: &#39;localhost&#39;, &#x2F;&#x2F;数据库所在的服务器的域名（或ip地址）</span><br><span class="line">user: &#39;me&#39;, &#x2F;&#x2F;登录数据库的账号</span><br><span class="line">password: &#39;secret&#39;, &#x2F;&#x2F;登陆数据库的密码</span><br><span class="line">database: &#39;book&#39; &#x2F;&#x2F;数据库的名称</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="执行链接操作"><a href="#执行链接操作" class="headerlink" title="执行链接操作"></a>执行链接操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connection.connect();</span><br></pre></td></tr></table></figure><h3 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h3><p>数据库的操作是异步的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">connection.query(&#39;数据库操作语句&#39;,function(error,results,fields)&#123; &#x2F;&#x2F;results 数据库语句执行完后的结果</span><br><span class="line">if(error) throw error;</span><br><span class="line">console.log(&#39;The solution is:&#39;,results[0].solution);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="关闭数据库"><a href="#关闭数据库" class="headerlink" title="关闭数据库"></a>关闭数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connection.end();</span><br></pre></td></tr></table></figure><h2 id="5、数据库常用语句"><a href="#5、数据库常用语句" class="headerlink" title="5、数据库常用语句"></a>5、数据库常用语句</h2><p>先给出代码大概框架</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> connection = mysql.createConnection(&#123;</span><br><span class="line">    host: <span class="string">&#x27;localhost&#x27;</span>, <span class="comment">//数据库所在的服务器的域名（或ip地址）</span></span><br><span class="line">    user: <span class="string">&#x27;root&#x27;</span>, <span class="comment">//登录数据库的账号</span></span><br><span class="line">    password: <span class="string">&#x27;&#x27;</span>, <span class="comment">//登陆数据库的密码</span></span><br><span class="line">    database: <span class="string">&#x27;book&#x27;</span> <span class="comment">//数据库的名称</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">connection.connect();</span><br><span class="line"></span><br><span class="line"><span class="comment">//此处开始进行数据库数据操作**********************之后的代码只有此处不同</span></span><br><span class="line"><span class="comment">// ？ 是为了给后面的数据进行填充</span></span><br><span class="line"><span class="keyword">let</span> sql = <span class="string">&#x27;insert into book set ?&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">    name: <span class="string">&#x27;百年孤独&#x27;</span>,</span><br><span class="line">    author: <span class="string">&#x27;加西亚·马尔克斯&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">connection.query(sql,data,<span class="function"><span class="keyword">function</span>(<span class="params">error,results,fields</span>)</span>&#123; <span class="comment">//results 数据库语句执行完后的结果 是个对象</span></span><br><span class="line">    <span class="keyword">if</span>(error) <span class="keyword">throw</span> error;</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">results.affectedRows == <span class="number">1</span></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;数据插入成功！&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//此处结束数据库数据操作************************</span></span><br><span class="line">connection.end();</span><br></pre></td></tr></table></figure><h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ？ 是为了给后面的数据进行填充</span></span><br><span class="line"><span class="keyword">let</span> sql = <span class="string">&#x27;insert into book set ?&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">    name: <span class="string">&#x27;百年孤独&#x27;</span>,</span><br><span class="line">    author: <span class="string">&#x27;加西亚·马尔克斯&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line">connection.query(sql,data,<span class="function"><span class="keyword">function</span>(<span class="params">error,results,fields</span>)</span>&#123; <span class="comment">//results 数据库语句执行完后的结果</span></span><br><span class="line">    <span class="keyword">if</span>(error) <span class="keyword">throw</span> error;</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">results.affectedRows == <span class="number">1</span></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;数据插入成功！&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sql = <span class="string">&#x27;delete from book where id=?&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> data = [<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">connection.query(sql,data,<span class="function"><span class="keyword">function</span>(<span class="params">error,results,fields</span>)</span>&#123; <span class="comment">//results 数据库语句执行完后的结果</span></span><br><span class="line">    <span class="keyword">if</span>(error) <span class="keyword">throw</span> error;</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">results.affectedRows == <span class="number">1</span></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;数据删除成功！&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sql = <span class="string">&#x27;update book set name=?,author=? where id=?&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> data = [<span class="string">&#x27;红楼梦&#x27;</span>,<span class="string">&#x27;曹雪芹&#x27;</span>,<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">connection.query(sql,data,<span class="function"><span class="keyword">function</span>(<span class="params">error,results,fields</span>)</span>&#123; <span class="comment">//results 数据库语句执行完后的结果</span></span><br><span class="line">    <span class="keyword">if</span>(error) <span class="keyword">throw</span> error;</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">results.affectedRows == <span class="number">1</span></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;数据更新成功！&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//let sql = &#x27;select * from book&#x27;; // * 查询范围是全部数据</span></span><br><span class="line"><span class="comment">//let data = null;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sql = <span class="string">&#x27;select * from book where id = ?&#x27;</span>;  <span class="comment">//从所有数据中查询id为？的数据</span></span><br><span class="line"><span class="keyword">let</span> data = [<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">connection.query(sql,data,<span class="function"><span class="keyword">function</span>(<span class="params">error,results,fields</span>)</span>&#123; <span class="comment">//results 数据库语句执行完后的结果</span></span><br><span class="line"><span class="keyword">if</span>(error) <span class="keyword">throw</span> error;</span><br><span class="line">    <span class="built_in">console</span>.log(results[<span class="number">0</span>].name);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>不难发现对数据的增删改查在代码层面是类似的。</p><h3 id="封装对数据库的操作"><a href="#封装对数据库的操作" class="headerlink" title="封装对数据库的操作"></a>封装对数据库的操作</h3><p>新建一个db.js文件，此js中的代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//当sql是插入操作时，data需要是一个对象</span></span><br><span class="line"><span class="comment">//当sql是删改查时，data是一个数组数组中的数据与表中的字段顺序要一一对应</span></span><br><span class="line"><span class="built_in">exports</span>.base = <span class="function">(<span class="params">sql,data,callback</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> connection = mysql.createConnection(&#123;</span><br><span class="line">        host: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">        user: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        password: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        database: <span class="string">&#x27;book&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    connection.connect();</span><br><span class="line">    connection.query(sql,data,<span class="function"><span class="keyword">function</span>(<span class="params">error,results,fields</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(error) <span class="keyword">throw</span> error;</span><br><span class="line">        callback(results);</span><br><span class="line">    &#125;);</span><br><span class="line">    connection.end();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、MySQL表操作"><a href="#6、MySQL表操作" class="headerlink" title="6、MySQL表操作"></a>6、MySQL表操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">create database mydatabase;  -- 创建仓库</span><br><span class="line">CREATE DATABASE test CHARACTER SET utf8 COLLATE utf8_general_ci;  -- 创建仓库指定字符集</span><br><span class="line">use mydatabase;   -- 使用仓库</span><br><span class="line">show tables;      -- 查看仓库下的所有表</span><br><span class="line"></span><br><span class="line">create table student(</span><br><span class="line">   sid int,</span><br><span class="line">   sname varchar(20),</span><br><span class="line">   sage int</span><br><span class="line"> );                 -- 创建表      </span><br><span class="line"> </span><br><span class="line"> -- 创建表指定字符集</span><br><span class="line"> CREATE TABLE users(</span><br><span class="line">    id INT(5),</span><br><span class="line">    NAME VARCHAR(20),</span><br><span class="line">    gender VARCHAR(3)</span><br><span class="line">) ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">desc student        --查看表结构</span><br><span class="line">drop table student  --删除表</span><br><span class="line"></span><br><span class="line">alter table student add column sgender varchar(2);   --添加字段</span><br><span class="line">alter table student drop column sgender;    --删除字段</span><br><span class="line">alter table student modify column sname varchar(100);  --修改字段类型</span><br><span class="line">alter table student change column sname myname varchar(2);   --修改字段名称</span><br><span class="line">alter table student rename to teacher;   --修改表名称</span><br><span class="line"></span><br><span class="line">-- 修改表和仓库的默认字符集</span><br><span class="line">ALTER DATABASE mydatabase DEFAULT CHARACTER SET &quot;utf8&quot;;   </span><br><span class="line">ALTER TABLE users CONVERT TO CHARACTER SET &quot;utf8&quot;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MySQL&quot;&gt;&lt;a href=&quot;#MySQL&quot; class=&quot;headerlink&quot; title=&quot;MySQL&quot;&gt;&lt;/a&gt;MySQL&lt;/h1&gt;&lt;h2 id=&quot;1、wamp中mysql的使用&quot;&gt;&lt;a href=&quot;#1、wamp中mysql的使用&quot; class=&quot;he</summary>
      
    
    
    
    <category term="MySQL" scheme="http://x821.github.io/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>深拷贝和浅拷贝</title>
    <link href="http://x821.github.io/2020/05/25/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <id>http://x821.github.io/2020/05/25/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D/</id>
    <published>2020-05-25T06:29:42.000Z</published>
    <updated>2021-03-17T10:42:40.062Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一，引言"><a href="#一，引言" class="headerlink" title="一，引言"></a><strong>一，引言</strong></h2><p>如何区分深拷贝与浅拷贝，简单点来说，就是假设B复制了A，当修改A时，看B是否会发生变化，如果B也跟着变了，说明这是浅拷贝，如果B没变，那就是深拷贝，自食其力。<br>此篇文章中也会简单阐述到栈堆，基本数据类型与引用数据类型，因为这些概念能更好的让你理解深拷贝与浅拷贝。</p><p>我们来举个浅拷贝例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let a&#x3D;[0,1,2,3,4],</span><br><span class="line">    b&#x3D;a;</span><br><span class="line">console.log(a&#x3D;&#x3D;&#x3D;b);</span><br><span class="line">a[0]&#x3D;1;</span><br><span class="line">console.log(a,b);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2021031715585651.png" alt="在这里插入图片描述"><br>嗯？明明b复制了a，为啥修改数组a，数组b也跟着变了，这里我不禁陷入了沉思。<br>那么这里，就得引入基本数据类型与引用数据类型的概念了。</p><h2 id="二、基本数据与复杂-引用-数据"><a href="#二、基本数据与复杂-引用-数据" class="headerlink" title="二、基本数据与复杂(引用)数据"></a><strong>二、基本数据与复杂(引用)数据</strong></h2><p>基本数据类型有：number，string，boolean，null，undefined，symbol。</p><p>引用数据类型(Object类)有：常规名值对的无序对象{a:1}，数组[1,2,3]，以及函数等。</p><p>而这两类数据存储分别是这样的：</p><h3 id="a-基本类型–名值存储在栈内存中，例如let-a-1"><a href="#a-基本类型–名值存储在栈内存中，例如let-a-1" class="headerlink" title="a.基本类型–名值存储在栈内存中，例如let a=1;"></a>a.基本类型–名值存储在栈内存中，例如let a=1;</h3><p><img src="https://img-blog.csdnimg.cn/20210317161443800.png" alt="在这里插入图片描述"><br>当你b=a复制时，栈内存会新开辟一个内存，例如这样：<br><img src="https://img-blog.csdnimg.cn/20210317161616133.png" alt="在这里插入图片描述"></p><p>所以当你此时修改a=2，对b并不会造成影响，因为此时的b已自食其力，翅膀硬了，不受a的影响了。当然，let a=1,b=a;虽然b不受a影响，但这也算不上深拷贝，因为深拷贝本身只针对较为复杂的object类型数据。</p><h3 id="b-引用数据类型–名存在栈内存中，值存在于堆内存中，但是栈内存会提供一个引用的地址指向堆内存中的值，我们以上面浅拷贝的例子画个图："><a href="#b-引用数据类型–名存在栈内存中，值存在于堆内存中，但是栈内存会提供一个引用的地址指向堆内存中的值，我们以上面浅拷贝的例子画个图：" class="headerlink" title="b.引用数据类型–名存在栈内存中，值存在于堆内存中，但是栈内存会提供一个引用的地址指向堆内存中的值，我们以上面浅拷贝的例子画个图："></a><strong>b.引用数据类型–名存在栈内存中，值存在于堆内存中，但是栈内存会提供一个引用的地址指向堆内存中的值，我们以上面浅拷贝的例子画个图：</strong></h3><p><img src="https://img-blog.csdnimg.cn/20210317161720578.png" alt="在这里插入图片描述"><br>当b=a进行拷贝时，其实复制的是a的引用地址，而并非堆里面的值。<br><img src="https://img-blog.csdnimg.cn/20210317161737533.png" alt="在这里插入图片描述"></p><p>而当我们a[0]=1时进行数组修改时，由于a与b指向的是同一个地址，所以自然b也受了影响，这就是所谓的浅拷贝了。<br><img src="https://img-blog.csdnimg.cn/20210317161753777.png" alt="在这里插入图片描述"><br>那，要是在堆内存中也开辟一个新的内存专门为b存放值，就像基本类型那样，岂不就达到深拷贝的效果了<br><img src="https://img-blog.csdnimg.cn/2021031716181424.png" alt="在这里插入图片描述"></p><h2 id="三、实现简单的深拷贝"><a href="#三、实现简单的深拷贝" class="headerlink" title="三、实现简单的深拷贝"></a><strong>三、实现简单的深拷贝</strong></h2><h3 id="1-递归去复制所有层级属性。"><a href="#1-递归去复制所有层级属性。" class="headerlink" title="1.递归去复制所有层级属性。"></a>1.递归去复制所有层级属性。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">function deepClone(obj)&#123;</span><br><span class="line">    let objClone &#x3D; Array.isArray(obj)?[]:&#123;&#125;;</span><br><span class="line">    if(obj &amp;&amp; typeof obj&#x3D;&#x3D;&#x3D;&quot;object&quot;)&#123;</span><br><span class="line">        for(key in obj)&#123;</span><br><span class="line">            if(obj.hasOwnProperty(key))&#123;</span><br><span class="line">                &#x2F;&#x2F;判断ojb子元素是否为对象，如果是，递归复制</span><br><span class="line">                if(obj[key]&amp;&amp;typeof obj[key] &#x3D;&#x3D;&#x3D;&quot;object&quot;)&#123;</span><br><span class="line">                    objClone[key] &#x3D; deepClone(obj[key]);</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    &#x2F;&#x2F;如果不是，简单复制</span><br><span class="line">                    objClone[key] &#x3D; obj[key];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return objClone;</span><br><span class="line">&#125;    </span><br><span class="line">let a&#x3D;[1,2,3,4],</span><br><span class="line">    b&#x3D;deepClone(a);</span><br><span class="line">a[0]&#x3D;2;</span><br><span class="line">console.log(a,b);</span><br></pre></td></tr></table></figure><p>可以看到<br><img src="https://img-blog.csdnimg.cn/20210317162219597.png" alt="在这里插入图片描述"><br>跟之前想象的一样，现在b脱离了a的控制，不再受a影响了。<br>这里再次强调，深拷贝，是拷贝对象各个层级的属性，可以看个例子。JQ里有一个extend方法也可以拷贝对象，我们来看看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let a&#x3D;[1,2,3,4],</span><br><span class="line">    b&#x3D;a.slice();</span><br><span class="line">a[0]&#x3D;2;</span><br><span class="line">console.log(a,b);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210317162253322.png" alt="在这里插入图片描述"></p><p>那是不是说slice方法也是深拷贝了，毕竟b也没受a的影响，上面说了，深拷贝是会拷贝所有层级的属性，还是这个例子，我们把a改改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let a&#x3D;[0,1,[2,3],4],</span><br><span class="line">        b&#x3D;a.slice();</span><br><span class="line">a[0]&#x3D;1;</span><br><span class="line">a[2][0]&#x3D;1;</span><br><span class="line">console.log(a,b);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210317162338189.png" alt="在这里插入图片描述"><br>拷贝的不彻底啊，b对象的一级属性确实不受影响了，但是二级属性还是没能拷贝成功，仍然脱离不了a的控制，说明slice根本不是真正的深拷贝。<br>第一层的属性确实深拷贝，拥有了独立的内存，但更深的属性却仍然公用了地址，所以才会造成上面的问题。<br>同理，concat方法与slice也存在这样的情况，他们都不是真正的深拷贝，这里需要注意。</p><h3 id="2-JSON对象的parse和stringify"><a href="#2-JSON对象的parse和stringify" class="headerlink" title="2.JSON对象的parse和stringify"></a><strong>2.JSON对象的parse和stringify</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function deepClone(obj)&#123;</span><br><span class="line">    let _obj &#x3D; JSON.stringify(obj),</span><br><span class="line">        objClone &#x3D; JSON.parse(_obj);</span><br><span class="line">    return objClone</span><br><span class="line">&#125;    </span><br><span class="line">let a&#x3D;[0,1,[2,3],4],</span><br><span class="line">    b&#x3D;deepClone(a);</span><br><span class="line">a[0]&#x3D;1;</span><br><span class="line">a[2][0]&#x3D;1;</span><br><span class="line">console.log(a,b);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/202103171624372.png" alt="在这里插入图片描述"><br>可以看到，这下b是完全不受a的影响了。<br>缺点： 无法实现对对象中方法的深拷贝，会显示为undefined</p><h3 id="3-借用JQ的extend方法。"><a href="#3-借用JQ的extend方法。" class="headerlink" title="3.借用JQ的extend方法。"></a><strong>3.借用JQ的extend方法。</strong></h3><p><strong>$.extend( [deep ], target, object1 [, objectN ] )</strong><br><strong>deep</strong>表示是否深拷贝，为true为深拷贝，为false，则为浅拷贝<br><strong>target Object</strong>类型 目标对象，其他对象的成员属性将被附加到该对象上。<br><strong>object1  objectN</strong>可选。 Object类型 第一个以及第N个被合并的对象。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let a&#x3D;[0,1,[2,3],4],</span><br><span class="line">    b&#x3D;$.extend(true,[],a);</span><br><span class="line">a[0]&#x3D;1;</span><br><span class="line">a[2][0]&#x3D;1;</span><br><span class="line">console.log(a,b);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210317162622707.png" alt="在这里插入图片描述"><br>可以看到，效果与上面方法一样，只是需要依赖JQ库。</p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>**</p><p>那么到这里，我们知道了深拷贝与浅拷贝的区别，同时从数据存储规则来解释，也明白了为什么要使用深拷贝；其次，我们知道了几种简单粗暴的深拷贝办法，也明白在何种情况下我们应该使用深拷贝。</p><p>引用：</p><blockquote><p><a href="https://www.jianshu.com/p/1c142ec2ca45">https://www.jianshu.com/p/1c142ec2ca45</a><br><a href="https://www.zhihu.com/question/23031215">https://www.zhihu.com/question/23031215</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一，引言&quot;&gt;&lt;a href=&quot;#一，引言&quot; class=&quot;headerlink&quot; title=&quot;一，引言&quot;&gt;&lt;/a&gt;&lt;strong&gt;一，引言&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;如何区分深拷贝与浅拷贝，简单点来说，就是假设B复制了A，当修改A时，看B是否会发生变化，如</summary>
      
    
    
    
    <category term="JS" scheme="http://x821.github.io/categories/JS/"/>
    
    
  </entry>
  
  <entry>
    <title>cookie session</title>
    <link href="http://x821.github.io/2020/05/13/cookie-session/"/>
    <id>http://x821.github.io/2020/05/13/cookie-session/</id>
    <published>2020-05-13T02:29:43.000Z</published>
    <updated>2021-03-16T05:46:42.053Z</updated>
    
    <content type="html"><![CDATA[<h1 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">是一种发送到客户浏览器的文本串句柄，并保存在客户机硬盘上，可以用来在某个WEB站点会话间持久的保持数据。</span><br></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express-cookie --save</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="引入与配置"><a href="#引入与配置" class="headerlink" title="引入与配置"></a>引入与配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const cookieParser &#x3D; require(&#39;cookie-parser&#39;);&#x2F;&#x2F;中间件 签名app.use(cookieParser(&#39;howlcn&#39;));</span><br></pre></td></tr></table></figure><h4 id="用cookie储存信息"><a href="#用cookie储存信息" class="headerlink" title="用cookie储存信息"></a>用cookie储存信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.cookie(&#39;username&#39;,req.body.username,&#123;    maxAge:1000*60, &#x2F;&#x2F;cookie失效的时长（单位毫秒）    signed:true&#x2F;&#x2F;开启签名 方式用户篡改cookie&#125;);</span><br></pre></td></tr></table></figure><h4 id="清空cookie"><a href="#清空cookie" class="headerlink" title="清空cookie"></a>清空cookie</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.cookie();</span><br></pre></td></tr></table></figure><h4 id="获取cookie中的数据"><a href="#获取cookie中的数据" class="headerlink" title="获取cookie中的数据"></a>获取cookie中的数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let username &#x3D; req.signedCookies.username;&#x2F;&#x2F;获取cookie中的username</span><br></pre></td></tr></table></figure><h3 id="cookie典型的应用"><a href="#cookie典型的应用" class="headerlink" title="cookie典型的应用"></a>cookie典型的应用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">（一）：判断用户是否登陆过网站，以便下次登录时能够直接登录。如果我们删除cookie，则每次登录必须从新填写登录的相关信息。</span><br><span class="line">（二）：另一个重要的应用是“购物车”中类的处理和设计。用户可能在一段时间内在同一家网站的不同页面选择不同的商品，可以将这些信息都写入cookie，在最后付款时从cookie中提取这些信息，当然这里面有了安全和性能问题需要我们考虑了。</span><br></pre></td></tr></table></figure><h1 id="session"><a href="#session" class="headerlink" title="session"></a>session</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Session 是存放在服务器端的，类似于Session结构来存放用户数据，当浏览器 第一次发送请求时，服务器自动生成了一个Session和一个Session ID用来唯一标识这个Session，并将其通过响应发送到浏览器。当浏览器第二次发送请求，会将前一次服务器响应中的Session ID放在请求中一并发送到服务器上，服务器从请求中提取出Session ID，并和保存的所有Session ID进行对比，找到这个用户对应的Session。</span><br><span class="line"></span><br><span class="line">一般情况下，服务器会在一定时间内（默认30分钟）保存这个 Session，过了时间限制，就会销毁这个Session。在销毁之前，程序员可以将用户的一些数据以Key和Value的形式暂时存放在这个 Session中。当然，也有使用数据库将这个Session序列化后保存起来的，这样的好处是没了时间的限制，坏处是随着时间的增加，这个数据 库会急速膨胀，特别是访问量增加的时候。一般还是采取前一种方式，以减轻服务器压力。</span><br></pre></td></tr></table></figure><h2 id="初始化-1"><a href="#初始化-1" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express-session --save</span><br></pre></td></tr></table></figure><h2 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h2><h3 id="引入与配置-1"><a href="#引入与配置-1" class="headerlink" title="引入与配置"></a>引入与配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const express &#x3D; require(&#39;express&#39;);const app &#x3D; express();const expressSession &#x3D; require(&#39;express-session&#39;);&#x2F;&#x2F;配置expressSession中间件app.use(expressSession(&#123;    &#x2F;&#x2F;cookie的名字    name:&#39;howlcn&#39;,    &#x2F;&#x2F;cookie签名的信息    secret:&#39;howlcn&#39;,    cookie:&#123;        maxAge:100000    &#125;,    resave:false,    &#x2F;&#x2F;saveUninitialized为true时会将没有初始化的session的数据保存到storage中    &#x2F;&#x2F;一般没有初始化的session是没有数据的  不必保存  则设置为false    saveUninitialized: false,    &#x2F;&#x2F;为true时，某客户端每一次访问都会重置cookie的重置时间(maxAge)    rolling:true,    &#x2F;&#x2F;指定session数据存放的地方(数据库),默认保存在服务器内存中（null也是）    store:null&#125;));</span><br></pre></td></tr></table></figure><h3 id="用session存储数据"><a href="#用session存储数据" class="headerlink" title="用session存储数据"></a>用session存储数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.session.username &#x3D; username;</span><br></pre></td></tr></table></figure><h3 id="清空session"><a href="#清空session" class="headerlink" title="清空session"></a>清空session</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.session.destroy()</span><br></pre></td></tr></table></figure><h3 id="获取session中的信息"><a href="#获取session中的信息" class="headerlink" title="获取session中的信息"></a>获取session中的信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let username &#x3D; req.session.username;</span><br></pre></td></tr></table></figure><h1 id="cookie-和session区别"><a href="#cookie-和session区别" class="headerlink" title="cookie 和session区别"></a>cookie 和session区别</h1><p>cookie和session的共同之处在于：cookie和session都是用来跟踪浏览器用户身份的会话方式。 </p><p>cookie 和session的区别是：cookie数据保存在客户端，session数据保存在服务器端。   简单的说，当你登录一个网站的时候， </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如果web服务器端使用的是session，那么所有的数据都保存在服务器上，客户端每次请求服务器的时候会发送当前会话的sessionid，服务器根据当前sessionid判断相应的用户数据标志，以确定用户是否登录或具有某种权限。由于数据是存储在服务器上面，所以你不能伪造，但是如果你能够获取某个登录用户的 sessionid，用特殊的浏览器伪造该用户的请求也是能够成功的。sessionid是服务器和客户端链接时候随机分配的，一般来说是不会有重复，但如果有大量的并发请求，也不是没有重复的可能性.</span><br><span class="line">如果浏览器使用的是cookie，那么所有的数据都保存在浏览器端，比如你登录以后，服务器设置了cookie用户名，那么当你再次请求服务器的时候，浏览器会将用户名一块发送给服务器，这些变量有一定的特殊标记。服务器会解释为cookie变量，所以只要不关闭浏览器，那么cookie变量一直是有效的，所以能够保证长时间不掉线。如果你能够截获某个用户的 cookie变量，然后伪造一个数据包发送过去，那么服务器还是认为你是合法的。所以，使用 cookie被攻击的可能性比较大。如果设置了的有效时间，那么它会将 cookie保存在客户端的硬盘上，下次再访问该网站的时候，浏览器先检查有没有 cookie，如果有的话，就读取该 cookie，然后发送给服务器。如果你在机器上面保存了某个论坛 cookie，有效期是一年，如果有人入侵你的机器，将你的  cookie拷走，然后放在他的浏览器的目录下面，那么他登录该网站的时候就是用你的的身份登录的。所以 cookie是可以伪造的。当然，伪造的时候需要主意，直接copy    cookie文件到 cookie目录，浏览器是不认的，他有一个index.dat文件，存储了 cookie文件的建立时间，以及是否有修改，所以你必须先要有该网站的 cookie文件，并且要从保证时间上骗过浏览器</span><br></pre></td></tr></table></figure><p>两个都可以用来存私密的东西，同样也都有有效期的说法,区别在于session是放在服务器上的，过期与否取决于服务期的设定，cookie是存在客户端的，过去与否可以在cookie生成的时候设置进去。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(1)cookie数据存放在客户的浏览器上，session数据放在服务器上</span><br><span class="line">(2)cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗,如果主要考虑到安全应当使用session</span><br><span class="line">(3)session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能，如果主要考虑到减轻服务器性能方面，应当使用COOKIE</span><br><span class="line">(4)单个cookie在客户端的限制是3K，就是说一个站点在客户端存放的COOKIE不能3K。</span><br><span class="line">(5)所以：将登陆信息等重要信息存放为SESSION;其他信息如果需要保留，可以放在COOKIE中</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;cookie&quot;&gt;&lt;a href=&quot;#cookie&quot; class=&quot;headerlink&quot; title=&quot;cookie&quot;&gt;&lt;/a&gt;cookie&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://x821.github.io/categories/JavaScript/"/>
    
    
  </entry>
  
</feed>
